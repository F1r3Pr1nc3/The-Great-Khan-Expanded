## Compat dummy file (via load order)
### By 0.01 KD (New Generation of the World)
# on_game_start = {
# 	events = {
# 		mod_neutral_grow.0
# 		newgen_visitors.0
# 	}
# }

# on_monthly_pulse_country = {
# 	events = {
# 		mod_danger_event.1
# 		mod_land_ai_defense.1
# 		mod_crime_event.1
# 		mod_ai_buffs.21
# 		mod_ai_buffs.25
# 	}
# }

# on_mid_game_pulse = {
# 	events = {
# 		marauder.497
# 		mod_neutral_grow.89
# 	}
# }
# on_late_game_pulse = {
# 	events = {
# 		mod_leviaphans.14
# 	}
# }

# on_five_year_pulse = {
# 	events = {
# 		mod_neutral_grow.1
# 		mod_leviaphans.6
# 		newgen_eaters.11
# 		newgen_visitors.1
# 		newgen_country.7
# 	}
# }
# on_five_year_pulse_country = {
# 	events = {
# 		mod_ai_buffs.7
# 		newgen_eaters.13
# 		newgen_cor_kn.5
# 	}
# }
# # This = owner of fleet
# # From = fleet
# # fromfrom = planet (if any)
# on_fleet_auto_move_arrival = {
# 	events = {
# 		newgendrcr.18
# 	}
# }
# A war is beginning, executed for every country in the war.
# Root = Country
# From = War
on_war_beginning = {
	events = {
		# mod_ai_buffs.4
		# mod_neutral_grow.50
		# mod_neutral_grow.67
		mod_planet_conquering.12
		# mod_ai_buffs.17
	}
}
# A war has ended
# Root = Loser
# From = Main Winner
# on_war_ended = {
# 	events = {
# 		mod_ai_buffs.4
# 	}
# }
# A war has been won
# Root = Winner Warleader
# From = Loser Warleader
# fromfrom = War
on_war_won = {
	events = {
		mod_planet_conquering.13
		# newgen_fallen.3
		# mod_neutral_grow.53
	}
}
# on_war_lost = {
# 	events = {
# 		newgen_fallen.4
# 	}
# }
# on_status_quo = {
# 	events = {
# 		newgen_fallen.5
# 	}
# }
# on_status_quo_forced = {
# 	events = {
# 		newgen_fallen.5
# 	}
# }
# on_country_created = {
# 	events = {
# 		newgen_country.1
# 	}
# }
# on_yearly_pulse = {
# 	events = {
# 		mod_defense_platform.4
# 		mod_check_income.1
# 		mod_ai_buffs.1
#		 marauder.498
#		 mod_fleet_control.5
#		 mod_nanite_collectors.3
# 		mod_leviaphans.17
# 		marauder.149
# 		marauder.148
# 		marauder.147
# 		mod_neutral_grow.15
# 	}
# }
# this = country
on_yearly_pulse_country = {
	events = {
		mod_planet_conquering.4
		# newgen_cor_kn.4
		# mod_ai_buffs.26
	}
}
# on_decade_pulse = {
# 	events = {
# 		mod_leviaphans.20
# 	}
# }
# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
# on_space_battle_lost = {
# 	events = {
# 		newgen_eaters.2
# 		pirate.214
# 		newgendrcr.8
# 		newgen_visitors.7
# 		newgendrcr.14
# 		newgendrcr.23
# 	}
# }
# A fleet has entered a system
# Scope = Fleet
# From = System
# on_entering_system_fleet = {
# 	events = {
# 		newgen_eaters.1
# 		mod_leviaphans.12
# 		mod_neutral_grow.43
# 		mod_leviaphans.15
# 		pirate.153
# 		mod_fleet_control.6
# 		newgen_eaters.9
# 		newgen_visitors.6
# 		newgen_visitors.20
# 		mod_leviaphans.29
# 	}
# }
# # This = owner of fleet 1
# # From = owner of fleet 2
# # fromfrom = fleet 1
# # fromfromfrom = fleet 2
# on_entering_battle = {
# 	events = {
# 		mod_nanite_collectors.1
# 		mod_leviaphans.1
# 		mod_leviaphans.4
# 		mod_leviaphans.10
# 		mod_leviaphans.19
# 		mod_leviaphans.24
# 		mod_check_suicide.3
# 		mod_check_suicide.4
# 		mod_ai_buffs.5
# 		mod_ai_buffs.8
# 		mod_ai_buffs.22
# 		newgen_visitors.18
# 		newgen_eaters.12
# 		mod_ai_buffs.29
# 	}
# }
# # This = Ship
# # From = Disabler Ship
# on_ship_disabled = {
# 	events = {
# 		pirate.151
# 		newgen_eaters.16
# 		pirate.215
# 		mod_ai_buffs.19
# 		newgen_visitors.8
# 		mod_ai_buffs.30
# 	}
# }
# THIS = System: system being occupied
# FROM = Country: Conqueror of the system
# fromfrom = Country: Original owner of the system
on_system_occupied = {
	events = {
		# mod_neutral_grow.65
		mod_planet_conquering.11
	}
}

# THIS = System: system being returned from occupation
# FROM = Country: Previous owner of the  system
# fromfrom = Country: Occupier of the system
# on_system_returned = {
# 	events = {
# 		mod_neutral_grow.65
# 	}
# }
# This = Ship
# on_ship_enabled = {
# 	events = {
# 		leviathans.2096
# 	}
# }

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
# on_space_battle_won = {
# 	events = {
# 		pirate.72
# 		mod_nanite_collectors.2
# 		mod_leviaphans.2
# 		mod_leviaphans.16
# 		mod_leviaphans.26
# 		pirate.152
# 		mod_neutral_grow.48
# 		newgendrcr.6
# 		newgen_visitors.19
# 		mod_leviaphans.28
# 		mod_ai_buffs.28
# 	}
# }
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
# fromfromfrom = ship 2
# on_ship_destroyed_victim = {
# 	events = {
# 		mod_cara.10
# 	}
# }
# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
# on_fleet_destroyed_perp = {
# 	events = {
# 		mod_cara.1
# 		mod_cara.6
# 		mod_cara.8
# 	}
# }
# Planet has taken damage from orbital bombardment - Damage is applied daily
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		# pirate.210
		# mod_neutral_grow.61
		mod_planet_conquering.18
	}
}
# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# fromfrom = planet
on_planet_defenders_lose = {
	events = {
		mod_planet_conquering.1
		# mod_communications.2
		# newgen_eaters.6
		# pirate.216
	}
}
# This = country, leader attacker
# From = country, planet owner
# fromfrom = planet
on_planet_attackers_win = {
	events = {
		mod_planet_conquering.3
		# pirate.212
	}
}
# A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# Root = Country
# From = system
# fromfrom = Fleet of the science ship that surveyed it, if any
# on_system_survey = {
# 	events = {
# 		newgen_eaters.10
# 	}
# }
# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# fromfrom = planet
on_planet_defenders_win = {
	events = {
		# pirate.2120
		# newgen_eaters.5
		mod_planet_conquering.16
	}
}
# An army has been killed in ground combat
# This = owner
# From = army
# fromfrom = opponent
# fromfromfrom = planet
# on_army_killed_in_combat = {
# 	events = {
# 		pirate.211
# 	}
# }
# From = system
# fromfrom = country (previous owner)
# This = country (new owner)
# on_system_gained = {
# 	events = {
# 		mod_ai_buffs.9
# 		mod_neutral_grow.71
# 		mod_neutral_grow.87
# 	}
# }

# From = system
# fromfrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
		# mod_neutral_grow.64
		mod_horde_capturing.1
	}
}
# on_colony_1_year_old = {
# 	events = {
# 		newgen_presc_countr.4
# 		mod_neutral_grow.74
# 	}
# }

# Fired whenever a new owner is set for a planet,
# be it after a war or through a trade
# From = Country scope (new owner)
# This = Planet scope
on_planet_transfer = {
	events = {
		mod_planet_conquering.2
		# newgen_presc_countr.1
	}
}
on_colony_destroyed = {
	events = {
		mod_planet_conquering.6
		# marauder.715
	}
}
# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# fromfrom = planet
on_planet_defenders_lose = {
	events = {
		mod_horde_capturing.4
		# newgen_cor_kn.1
		# newgen_cor_kn.2
	}
}
# A ship has been built
# Root = Ship
# From = Planet
# on_ship_built = {
# 	events = {
# 		mod_fleet_control.7
# 	}
# }
# A ship has been upgraded
#  Root = Ship
# on_ship_upgraded = {
# 	events = {
# 		mod_fleet_control.9
# 	}
# }
# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
# on_post_communications_established = {
# 	events = {
# 		mod_communications.1
# 		mod_communications.3
# 		mod_communications.4
# 		mod_communications.5
# 		mod_communications.6
# 		mod_communications.7
# 		mod_communications.8
# 		mod_communications.14
# 	}
# }
# Triggers when ground combat starts
# This = planet
# From = country attacking
# on_ground_combat_started = {
# 	events = {
# 		mod_neutral_grow.56
# 		mod_ai_buffs.11
# 		newgen_cor_kn.6
# 	}
# }
# Fired whenever a new owner is set for a planet, and the planet was aggressively conquered
# Fired in ADDITION to on_planet_transfer
# From = Country scope (new owner)
# This = Planet scope
# on_planet_conquer = {
# 	events = {
# 		mod_ai_buffs.10
# 	}
# }
on_country_destroyed = {
	events = {
		mod_planet_conquering.14
	}
}
# A planets controller becomes a country not the same as the owner.
# Root = Planet
# From = Planet Owner
# fromfrom = Planet Controller (the one occupying)
on_planet_occupied = {
	events = {
		mod_planet_conquering.10
	}
}
# Fires when you first get intel (_low and up) on a new system
# Scope = Country
# From = System
on_system_first_visited = {
	events = {
		# mod_leviaphans.5
	}
}
# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# fromfrom = System jumped from
# on_entering_gateway = {
# 	events = {
# 		mod_neutral_grow.76
# 	}
# }

# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# fromfrom = System jumped from
# on_entering_wormhole = {
# 	events = {
# 		newgen_visitors.3
# 	}
# }
on_destroy_planet_with_PLANET_KILLER_CRACKER = {
	events = {
		mod_planet_conquering.15
	}
}
on_destroy_planet_with_PLANET_KILLER_SHIELDER = {
	events = {
		mod_planet_conquering.15
	}
}
on_destroy_planet_with_PLANET_KILLER_NEUTRON = {
	events = {
		mod_planet_conquering.15
	}
}
on_destroy_planet_with_PLANET_KILLER_GODRAY = {
	events = {
		mod_planet_conquering.15
	}
}
on_destroy_planet_with_PLANET_KILLER_STAR_CRACKER = {
	events = {
		mod_planet_conquering.15
	}
}
on_destroy_planet_with_PLANET_KILLER_DELUGE = {
	events = {
		mod_planet_conquering.15
	}
}
# This = subject
# From = subject's overlord
# on_becoming_subject = {
# 	events = {
# 		mod_ai_buffs.18
# 	}
# }
# # this = country
# on_decade_pulse_country = {
# 	events = {
# 		mod_ai_buffs.20
# 	}
# }
# Triggered when two empires discover each other
# This = Empire 1
# From = Empire 2
# Fromfromfrom = System where contact occurred
# on_first_contact = {
# 	events = {
# 		newgen_recluses_event.2
# 	}
# }
# A planet has been colonized.
# Scope = Planet
# on_colonized = {
# 	events = {
# 		newgen_country.4
# 	}
# }
# on_leader_death_notify = {
# 	events = {
# 		newgen_cor_kn.8
# 	}
# }
