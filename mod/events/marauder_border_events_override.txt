namespace = marauder
namespace = marauder_borders

# Placeholder since v.3.9.1 (parser crashes if missing, but again ok with v.3.10)
# Rebuild marauder starbase
system_event = {
	id = marauder.17
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOR = { exists = starbase has_star_flag = marauder_starbase_destroyed }
		has_star_flag = marauder_system
	}
	immediate = {
		if = {
			limit = {
				any_fleet_in_system = {
					exists = owner
					owner = { is_country_type = dormant_marauders }
				}
			}
			random_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_country_type = dormant_marauders }
				}
				prev = {
					create_starbase = { size = "starbase_marauder" owner = prev.owner }
				}
			}
			set_timed_star_flag = { flag = marauder_starbase_destroyed months = 3 }
		}
	}
}

# Fully handover marauder country (HIDDEN)
# From marauder.602 .603 .604
# This = be destroyed country
country_event = {
	id = marauder.609
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		exists = event_target:raider_khanate
		# NOT = { has_global_flag = great_khan_wins }
	}
	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = last_created_country
				last_created_country = { has_origin = "origin_khan_successor" }
			}
			last_created_country = { save_event_target_as = new_khanate }
		}
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = from
				from = {
					is_ai = yes
					OR = { CmtTriggerIsMarauder = yes is_subject_of_khan = yes }
				}
			}
			from = { save_event_target_as = new_khanate }
		}
		if = {
			limit = { NOT = { exists = event_target:new_khanate } }
			break = yes
		}
		if = {
			limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
			# Drag military fleets except for one (or two)
			ordered_owned_fleet = {
				limit = {
					is_mobile = yes
					is_civilian = no
					exists = leader # Somehow gets ignored sometimes (if juggernaut?)
					any_owned_ship = { is_ship_class = shipclass_military }
				}
				position = 1
				order_by = trigger:fleet_power
				if = { # is_ship_size = juggernaut
					limit = { count_owned_ship = { limit = { is_ship_class = shipclass_starbase } count = 0 } }
					leader = { set_owner = event_target:new_khanate }
				}
				set_owner = event_target:new_khanate
			}
			random_owned_fleet = {
				limit = { is_mobile = yes exists = leader }
				set_owner = root
				# Recruit leader
				leader = {
					set_owner = root
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
			random_owned_fleet = {
				limit = {
					is_mobile = yes
					exists = leader
					exists = solar_system
					is_civilian = no any_owned_ship = { is_ship_class = shipclass_military }
				}
				set_owner = event_target:new_khanate
				# Recruit leader
				leader = {
					set_owner = event_target:new_khanate
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
			if = {
				limit = { event_target:new_khanate = { CmtTriggerIsMarauder = no } }
				every_owned_fleet = {
					limit = {
						is_civilian = no
						any_owned_ship = { is_ship_class = shipclass_military }
					}
					delete_fleet = this
				}
			}
		}
		# Normalize Starbases
		# Note: system_within_border caching is quite funky at a time like this when many borders are changing hands. The starbase ownership is checked to be extra sure, since it is not cached (unlike system ownership - though that probably would have worked too)
		if = {
			limit = {
				OR = {
					NOT = { has_global_flag = marauder_crisis_ongoing }
					event_target:new_khanate = { CmtTriggerIsMarauder = no }
				}
			}
			# Return colonies that have only the starbase conquered.
			every_system_within_border = {
				limit = {
					has_owner = yes
					is_capital_system = no
					exists = starbase
					starbase = { is_owned_by = prev }
				}
				if = {
					limit = {
						any_system_colony = {
							NOR = {
								is_owned_by = root
								is_controlled_by = root
								is_owned_by = event_target:new_khanate
								is_controlled_by = event_target:new_khanate
								merg_is_habitat = yes
							}
						}
						count_system_colony = {
							limit = {
								is_controlled_by = root
								OR = {
									merg_is_habitat = no
									AND = {
										merg_is_habitat = yes
										prev = { starbase = { has_starbase_size = starbase_marauder } }
									}
								}
							}
							count = 0
						}
					}
					ordered_system_colony = {
						limit = {
							has_owner = yes
							exists = owner
							NOR = {
								is_owned_by = root
								is_controlled_by = root
								is_owned_by = event_target:new_khanate
								is_controlled_by = event_target:new_khanate
								merg_is_habitat = yes
							}
							owner = { is_default_or_fallen = yes }
						}
						position = 0
						order_by = trigger:num_sapient_pops
						log="Give system \\[Prev.GetName] back to \\[This.Owner.GetName]"
						owner = { save_event_target_as = planet_owner }
						prev = {
							# commit_system_to = { EMPIRE = prevprev.planet_owner } # The target scope is solved there (so add 1 more prev)
							commit_system_to = { EMPIRE = event_target:planet_owner }
							add_claims = { who = root num_of_claims = 1 show_notification = no }
						}
					}
				} # else = { starbase = { set_owner = event_target:new_khanate } }
				starbase = {
					if = {
						limit = { has_starbase_size = starbase_marauder }
						set_starbase_size = starbase_outpost
					}
				}
			}
			event_target:new_khanate = {
				if = {
					limit = { is_ai = yes }
					add_500_unity_per_year_passed = yes
					random_system_within_border = {
						limit = { CmtTriggerMarauderCapitalSystem = yes }
						system_event = { id = khan.301 days = -1 } # Create Citadel
					}
				}
			}
		}
		every_owned_starbase = {
			limit = {
				solar_system = {
					has_owner = yes
					is_owned_by = root		# Note: caching is quite funky at a time like this when many borders are changing hands. The starbase ownership is checked to be extra sure, since it is not cached (unlike system ownership - though that probably would have worked too)
					is_capital_system = no
				}
			}
			set_owner = event_target:new_khanate
		}
		save_event_target_as = integrated_empire
		log="Handover \\[This.GetName] to \\[event_target:new_khanate.GetName]"
		# Full handover
		every_owned_fleet = {
			limit = {
				is_mobile = yes
				# garrison = no
				OR = {
					is_civilian = yes
					num_ships > 1
					exists = leader
				}
			}
			set_owner = event_target:new_khanate
			# Recruit leader
			if = {
				limit = { exists = leader }
				leader = {
					set_owner = event_target:new_khanate
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
		}

		event_target:new_khanate = {
			# Fire when country finishes being integrated
			# From = subject
			fire_on_action = { on_action = on_subject_integrated }
			if = {
				limit = { is_ai = yes }
				add_resource = {
					minerals =		20000
					energy =		40000
					alloys =		20000
					food =			20000
					influence = 	1000
					consumer_goods = 20000
				}
				copy_techs_from = { target = root }
				# Upgrade starbase
				if = {
					limit = { any_owned_starbase = { has_starbase_size < starbase_starhold } }
					random_owned_starbase = {
						limit = { has_starbase_size < starbase_starhold }
						set_starbase_size = starbase_starhold
						starbase_event = { id = khan.302 days = 1 }
					}
					if = {
						limit = { any_owned_starbase = { has_starbase_size < starbase_starhold } }
						random_owned_starbase = {
							limit = { has_starbase_size < starbase_starhold }
							set_starbase_size = starbase_starhold
							starbase_event = { id = khan.302 days = 1 }
						}
					}
					if = {
						limit = { any_owned_starbase = { has_starbase_size < starbase_starhold } }
						random_owned_starbase = {
							limit = { has_starbase_size < starbase_starhold }
							set_starbase_size = starbase_starhold
							starbase_event = { id = khan.302 days = 1 }
						}
					}
				}
				# Survey Own Space
				every_planet_within_border = {
					set_surveyed = { surveyed = yes surveyor = event_target:new_khanate }
				}
				# Survey Rest of Horde's Space
				root = {
					every_planet_within_border = {
						set_surveyed = { surveyed = yes surveyor = event_target:new_khanate }
					}
				}
				# Mining and Research Stations
				every_planet_within_border = {
					limit = {
						has_owner = no
						OR = { has_deposit_for = shipclass_mining_station has_deposit_for = shipclass_research_station }
					}
					if = {
						limit = { has_deposit_for = shipclass_mining_station has_mining_station = no }
						create_mining_station = { owner = event_target:new_khanate }
					}
					else_if = {
						limit = { has_deposit_for = shipclass_research_station has_research_station = no }
						create_research_station = { owner = event_target:new_khanate }
					}
				}

				if = {
					limit = { CmtTriggerIsMarauder = no }
					owner_species = { save_event_target_as = marauder_species }
					add_500_unity_per_year_passed = yes
					country_event = { id = game_start.6 days = 6 random = 4 }	# advanced_empire
					country_event = { id = game_start.9 days = 12 random = 8 }	# empire_init_create_ships civil
					### Units
					create_ship_design = { design = "NAME_Pirate_Transport" }
					add_ship_design = last_created_design
					create_ship_design = { design = "NAME_Clan_Builder" }
					add_ship_design = last_created_design
					create_ship_design = { design = "NAME_Outrider" }
					add_ship_design = last_created_design
					### Dynamic Empire fleet_power
					root = { set_variable = { which = "successor_fleet_power" value = 40000 } }
					# Store each fleet_power to var.
					every_playable_country = {
						limit = {
							NOT = { is_variable_set = "successor_fleet_power" }
							fleet_power > 40000
						}
						if = {
							limit = { any_owned_planet = { has_planet_flag = fallen_empire_world } }
							set_variable = { which = "successor_fleet_power" value = 220000 }
						}
						else = {
							export_trigger_value_to_variable = { trigger = fleet_power variable = "successor_fleet_power" }
						}
					}
					random_owned_planet = {
						limit = { solar_system = { exists = starbase } }
						weights = { base = 1
							modifier = { add = 1 is_colony = yes }
							modifier = { add = 2 is_capital = yes }
						}
						prev = {
							CmtEffectCreateFleet_KhanStandard = yes # create_marauder_successor_fleet = yes
							CmtEffectCreateFleet_KhanArmy = yes
							CmtEffectCreateFleet_KhanConstructor = yes
						}
						while = { count = 4
							limit = {
								any_playable_country = {
									is_variable_set = "successor_fleet_power"
									check_variable = { which = "successor_fleet_power" value > root.successor_fleet_power }
								}
							}
							root = {
								change_variable = { which = "successor_fleet_power" value = 20000 }
								# Own old to get the right design!?
								CmtEffectCreateFleet_KhanStandard = { DIADOCHI = yes } # create_marauder_successor_fleet = yes
							}
							last_created_leader = {
								set_owner = prevprev
								last_created_fleet = {
									set_owner = prevprevprev
									assign_leader = prev
									set_leader = prev
								}
							}
						}
					}
					country_event = { id = khan.612 days = 7 } # Build Habitats
				}

				### Do automatic claims if planet has belonged to an empire.
				# TODO also former systems?
				every_owned_planet = {
					limit = { any_playable_country = { has_country_flag = former_owner@prev } }
					random_playable_country = {
						limit = { has_country_flag = former_owner@prev }
						prev.solar_system = {
							if = {
								limit = { NOT = { is_owned_by = prev } }
								add_claims = { who = prev num_of_claims = 3 show_notification = no }
							}
							else = {
								prev = { remove_country_flag = former_owner@prevprevprev }
							}
						}
						if = {
							limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
							remove_country_flag = former_owner@prev
						}
					}
				}
				every_planet_within_border = {
					limit = {
						has_owner = no
						colonizable_planet = yes
						any_playable_country = { has_country_flag = former_owner@prev }
					}
					random_playable_country = {
						limit = { has_country_flag = former_owner@prev }
						prev.solar_system = {
							if = {
								limit = { NOT = { is_owned_by = prev } }
								add_claims = { who = prev num_of_claims = 2 show_notification = no }
							}
							else = {
								prev = { remove_country_flag = former_owner@prevprevprev }
							}
						}
						if = {
							limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
							remove_country_flag = former_owner@prev
						}
					}
				}
				# Cleanup temp vars
				every_playable_country = {
					limit = { is_variable_set = "successor_fleet_power" }
					clear_variable = "successor_fleet_power"
				}
			}
			# Take old leaders # TODO more filter
			root = {
				every_owned_leader = {
					limit = {
						OR = {
							AND = {
								num_negative_traits < 2
								has_psionic_leader_trait = yes
							}
							has_leader_flag = legendary_leader
							has_leader_flag = paragon_origin_legendary_leader
							has_trait = leader_trait_legendary_offspring
						}
					}
					set_owner = prevprev
				}
			}
			if = {
				limit = { root = { num_owned_relics > 0 } }
				steal_relic = { target = root relic = all }
			}
		}
		event_target:new_khanate = {
			if = {
				limit = { CmtTriggerIsMarauder = no used_naval_capacity_percent < 0.75 }
				every_owned_fleet = {
					limit = {
						is_mobile = yes
						# garrison = no
						OR = {
							is_civilian = yes
							num_ships > 1
							exists = leader
						}
					}
					# Normalize fleets!?
					set_fleet_settings = {
						can_upgrade = yes
						can_disband = yes
						can_change_composition = yes
						can_change_leader = yes
					}
				}
				create_fleet_from_naval_cap = 0.2
			}
		}
		# Note: Needs to be last (as the country may be destroyed without planet)
		if = {
			limit = {
				exists = event_target:integrated_empire
				is_valid = event_target:integrated_empire
				event_target:integrated_empire = { is_scope_valid = yes is_scope_type = country }
				exists = event_target:integrated_empire.owner	# double scope is another workaround
			}
			# Establish Communications
			every_country = {
				limit = { has_communications = event_target:integrated_empire NOT = { has_communications = event_target:new_khanate } }
				establish_communications_no_message = event_target:new_khanate
			}
			every_owned_planet = {
				limit = {
					has_owner = yes
					is_colony = yes
					is_owned_by = event_target:integrated_empire.owner
					is_controlled_by = event_target:integrated_empire.owner
					# Note: caching is quite funky at a time like this when many borders are changing hands. The starbase ownership is checked to be extra sure, since it is not cached (unlike system ownership - though that probably would have worked too)
					solar_system = {
						exists = starbase
						starbase = { is_owned_by = event_target:new_khanate }
					}
				}
				set_owner = event_target:new_khanate
				set_controller = event_target:new_khanate
				add_modifier = { modifier = "revolt_suppressed" months = 20 } # Just to keep the initial conquered planets in line while they stabilize.
			}
		}
	}
	after = {
		if = {
			limit = { exists = event_target:integrated_empire }
			event_target:integrated_empire = {
				every_owned_fleet = {
					limit = {
						is_mobile = no
						exists = starbase
						starbase = { has_starbase_size = starbase_marauder }
					}
					destroy_fleet = this
				}
			}
		}
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = from
				from = {
					is_ai = yes
					OR = { CmtTriggerIsMarauder = yes is_subject_of_khan = yes }
				}
			}
			from = { save_event_target_as = new_khanate }
		}
		if = {
			limit = {
				exists = event_target:new_khanate
				CmtTriggerIsMarauder = no
			}
			event_target:new_khanate = {
				every_owned_fleet = {
					limit = {
						is_mobile = no
						exists = starbase
						starbase = { has_starbase_size = starbase_marauder }
					}
					destroy_fleet = this
				}
				every_owned_fleet = {
					limit = { is_disabled = yes }
					set_event_locked = no
					every_owned_ship = { set_disabled = no }
				}
			}
			if = {
				limit = { exists = event_target:integrated_empire num_owned_planets < 1 }
				event_target:integrated_empire = {
					destroy_country = yes
				}
			}
		}
	}
}

###### (By MrFunEGUY & FirePrince)
### Country Creation Before Potential Diadochi Split
# Root = Awakened Marauders
country_event = {
	id = marauder_borders.1000
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		owner_species = { save_event_target_as = marauder_species }
		every_owned_fleet = {
			limit = {
				OR = {
					has_fleet_flag = satrapy_garrison
					has_fleet_flag = satrapy_garrison_fleet
					has_fleet_flag = horde_auxuliaries
					NOT = { is_within_borders_of = root }
				}
				count_owned_ship = { limit = { is_ship_size = starbase_marauder } count = 0 }
			}
			destroy_fleet = this
		}
		every_controlled_fleet = {
			limit = { is_mobile = yes is_leased = yes }
			end_fleet_contract = { initiator = prev reason = cancelled }
		}
		# CREATE_KHAN_SUCCESSOR_COUNTRY
		if = {
			limit = { has_global_flag = cultural_overhaul_active }
			if = { limit = { has_global_flag = cultural_overhaul_funefork_active }
				random_list = {
					90 = {
						create_country = {
							name_list = random
							species = event_target:marauder_species
							type = default
							authority = auth_imperial
							civics = { civic = random }
							origin = "origin_khan_successor"
							ethos = { ethic = ethic_militarist ethic = ethic_authoritarian }
							ignore_initial_colony_error = yes
						}
					}
					9 = {
						create_country = {
							name_list = random
							species = event_target:marauder_species
							type = default
							authority = auth_dictatorial
							civics = { civic = random }
							origin = "origin_khan_successor"
							ethos = { ethic = ethic_militarist ethic = ethic_xenophobe }
							ignore_initial_colony_error = yes
						}
					}
					1 = {
						create_country = {
							name_list = random
							species = event_target:marauder_species
							type = default
							authority = auth_dict_democratic
							civics = { civic = random }
							origin = "origin_khan_successor"
							ethos = { ethic = ethic_militarist ethic = ethic_authoritarian }
							ignore_initial_colony_error = yes
						}
					}
				}
			}
			else = {
				random_list = {
					90 = {
						create_country = {
							name_list = random
							species = event_target:marauder_species
							type = default
							authority = auth_imperial
							civics = { civic = random }
							origin = "origin_khan_successor"
							ethos = { ethic = ethic_militarist ethic = ethic_authoritarian }
							ignore_initial_colony_error = yes
						}
					}
					10 = {
						create_country = {
							name_list = random
							species = event_target:marauder_species
							type = default
							authority = auth_dictatorial
							civics = { civic = random }
							origin = "origin_khan_successor"
							ethos = { ethic = ethic_militarist ethic = ethic_xenophobe }
							ignore_initial_colony_error = yes
						}
					}
				}
			}
		}
		else = {
			create_country = {
				name_list = random
				species = event_target:marauder_species
				type = default
				authority = auth_imperial
				civics = { civic = random }
				origin = "origin_khan_successor"
				ethos = { ethic = ethic_militarist ethic = ethic_authoritarian }
				ignore_initial_colony_error = yes
				day_zero_contact = no
				exclude_day_zero_contact = root
			}
		}

		last_created_country = {
			save_event_target_as = new_khanate
			set_country_flag = new_khanate_flag
			set_country_flag = first_alien_life
			set_country_flag = has_encountered_other_empire
			set_timed_country_flag = { flag = ai_no_wars months = 1 }
			set_name = root # Change later
			## ADD_KHAN_ETHICS
			if = {
				limit = { has_global_flag = cultural_overhaul_active }
				if = {
					limit = { is_imperial = yes }
					random_list = {
						1 = { } # Stays with Regular Auth Ethic
						1 = { country_add_ethic = ethic_fanatic_authoritarian } # Gets Fanatic Auth Ethic
					}
					if = {
						limit = { has_ethic = ethic_fanatic_authoritarian }
						country_add_ethic = ethic_xenophobe
					}
					else = {
						random_list = {
							1 = { country_add_ethic = ethic_xenophobe }
							1 = { country_add_ethic = ethic_fanatic_xenophobe }
						}
					}
					if = {
						limit = { has_ethic = ethic_xenophobe has_ethic = ethic_authoritarian }
						random_list = {
							1 = { country_add_ethic = ethic_socialism }
							1 = { country_add_ethic = ethic_spiritualist }
							1 = { country_add_ethic = ethic_capitalism }
						}
					}
				}
				else_if = {
					limit = { has_authority = auth_dictatorial }
					random_list = {
						1 = { country_add_ethic = ethic_authoritarian }
						1 = { country_add_ethic = ethic_fanatic_authoritarian }
					}
					if = {
						limit = { has_ethic = ethic_fanatic_authoritarian }
						country_add_ethic = ethic_xenophobe
					}
					else = {
						random_list = {
							1 = { country_add_ethic = ethic_xenophobe }
							1 = { country_add_ethic = ethic_fanatic_xenophobe }
						}
					}
					if = {
						limit = { has_ethic = ethic_xenophobe has_ethic = ethic_authoritarian }
						random_list = {
							1 = { country_add_ethic = ethic_socialism }
							1 = { country_add_ethic = ethic_spiritualist }
							1 = { country_add_ethic = ethic_capitalism }
						}
					}
				}
				else_if = {
					limit = { has_authority = auth_dict_democratic }
					random_list = {
						1 = { country_add_ethic = ethic_xenophobe }
						1 = { country_add_ethic = ethic_fanatic_xenophobe }
					}
					if = {
						limit = { has_ethic = ethic_xenophobe }
						random_list = {
							1 = { country_add_ethic = ethic_socialism }
							1 = { country_add_ethic = ethic_spiritualist }
							1 = { country_add_ethic = ethic_capitalism }
						}
					}
				}
			}
			shift_ethic = ethic_fanatic_militarist
			force_add_civic = civic_great_khans_legacy
			force_add_civic = civic_slaver_guilds
			# Establish Communications
			every_country = {
				limit = { has_communications = root }
				establish_communications_no_message = prev
			}
		}
		restore_country_backup_data = yes
		every_subject = {
			# limit = { is_default_or_fallen = yes }
			# set_subject_of = { who = none }
			# country_event = { id = marauder.670 days = 3 }		# Notify Satrap End
			country_event = { id = marauder.671 days = 10 }			# Notify Garrison End
		}
		country_event = { id = marauder.609 }						# Fully handover + empire init
	}
	after = {
		if = {
			limit = { exists = event_target:raider_khanate }
			if = { # If human player
				limit = {
					is_ai = no
					exists = event_target:new_khanate
					is_same_empire = event_target:raider_khanate
				}
				event_target:new_khanate = { set_player = event_target:raider_khanate }
			}
		}
		if = {
			limit = {
				count_subject = {
					limit = { any_agreement = { agreement_preset = preset_satrapy } }
					count > 0
				}
			}
			every_subject = {
				limit = { any_agreement = { agreement_preset = preset_satrapy } }
				set_subject_of = { who = event_target:new_khanate preset = preset_relic_satrapy }
			}
		}
		event_target:new_khanate = {
			ordered_owned_planet = {
				limit = { num_sapient_pops > 0 }
				position = 0
				order_by = trigger:num_sapient_pops
				set_capital = yes
				starbase = {
					if = {
						limit = { has_starbase_size < starbase_starhold }
						set_starbase_size = starbase_starhold
					}
					set_starbase_module = { slot = 1 module = shipyard }
					set_starbase_module = { slot = 2 module = shipyard }
					set_starbase_module = { slot = 3 module = shipyard }
				}
			}
			country_event = { id = marauder_borders.1001 days = 40 } # Wait to build sectors
		}
	}
}

### Check if all sectors are set, can take many months if the Khan has a lot of planets
country_event = {
	id = marauder_borders.1001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { # Try again in another month
			limit = {
				any_owned_planet = { is_in_frontier_space = yes }
				OR = {
					NOT = { is_variable_set = khan_frontier_counter }
					check_variable = { which = khan_frontier_counter value < 9 } # Max 10 months, as of 3.8/9 sometimes sectors cannot be created due to the 5 jump limit issue
				}
			}
			country_event = { id = marauder_borders.1001 days = 30 }
			if = {
				limit = { NOT = { is_variable_set = khan_frontier_counter } }
				set_variable = { which = khan_frontier_counter value = 1 }
			}
			else = { change_variable = { which = khan_frontier_counter value = 1 } }
		}
		else = { # Begin Sector Assignment
			country_event = { id = marauder_borders.1002 }
			if = {
				limit = { is_variable_set = khan_frontier_counter }
				clear_variable = khan_frontier_counter
			}
		}
	}
}

country_event = {
	id = marauder_borders.1002
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				exists = event_target:CmtGlobalVar
				event_target:CmtGlobalVar = {
					is_variable_set = CmtVarKhanPostDeathKhanate
					is_variable_set = CmtVarKhanPostDeathSplinter
				}
				OR = {
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value != 1 } }
					AND = {
						num_sectors > 2
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value != 1 } }
					}
					AND = {
						count_subject = { count > 1 } # count_country = { limit = { is_subject_of_khan = yes } count > 1 }
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value != 1 } }
					}
				}
			}
			random_list = {
				66 = { # Fractures into Diadochi.
					modifier = {
						factor = 0	# Should not happen if Marauders are too small
						OR = {
							AND = { num_sectors < 3 num_owned_planets < 10 }
							num_owned_planets < 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 1 } }
						}
					}
					modifier = {
						factor = 0.167
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 2 } }
					}
					modifier = {
						factor = 0.334
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 3 } }
					}
					modifier = { factor = 2 OR = { num_sectors > 4 num_owned_planets > 18 } }
					log="TGKE Fractures into Diadochi"
					country_event = { id = marauder.601 }
				}
				18 = { # Stays united in New Khanate.
					modifier = {
						factor = 0
						OR = {
							num_sectors > 4
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 1 } }
						}
					}
					modifier = {
						factor = 2
						OR = {
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 3 } }
							has_country_flag = diadochi
						}
					}
					modifier = {
						factor = 6
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 4 } }
					}
					modifier = { factor = 0.2 OR = { num_sectors > 4 num_owned_planets > 15 } }
					log="TGKE Stays united in New Khanate"
					country_event = { id = marauder.602 }
				}
				16 = { # Turns into Democratic Federation.
					modifier = {
						factor = 0 # Can only happen if there are enough Satrapies.
						OR = {
							count_subject = { count < 2 } # count_country = { limit = { is_subject_of_khan = yes } count < 2 }
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 1 } }
						}
					}
					modifier = {
						factor = 2
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 3 } }
					}
					modifier = {
						factor = 6
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 4 } }
					}
					modifier = { factor = 0.2 OR = { num_sectors > 4 num_owned_planets > 15 } }
					log="TGKE Turns into Democratic Federation"
					country_event = { id = marauder.603 }
				}
			}
		}
		else = {
			random_list = {
				66 = { # Fractures into Diadochi.
					modifier = { factor = 0 num_sectors < 3 num_owned_planets < 10 }	# Should not happen if Marauders are too small
					modifier = { factor = 2 OR = { num_sectors > 4 num_owned_planets > 18 } }
					country_event = { id = marauder.601 }
				}
				18 = { # Stays united in New Khanate.
					modifier = { factor = 0 num_sectors > 4 }
					country_event = { id = marauder.602 }
				}
				16 = { # Turns into Democratic Federation.
					modifier = {
						factor = 0 # Can only happen if there are enough Satrapies.
						count_subject = { count < 2 } # count_country = { limit = { is_subject_of_khan = yes } count < 2 }
					}
					country_event = { id = marauder.603 }
				}
			}
		}
	}
}

# Diadochi: Claims, Intel, Switch Systems SET_DIADOCHI_LEADERS_AND_FLEET
# Root Original Diadochi, New Khanat
country_event = {
	id = marauder_borders.2000
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_update_modifiers_batch = begin
		set_name = random # Only after marauder.620

		every_playable_country = {
			limit = {
				has_origin = "origin_khan_successor"
				has_government = gov_diadochi
				# has_country_flag = diadochi
			}

			## GET_DIADOCHI_IMMEDIATE_SETUP
			# Setting graphical culture
			set_graphical_culture = event_target:first_diadochi
			# Establish comms
			every_country = {
				limit = {
					OR = {
						has_communications = event_target:first_diadochi
						intel_level = { level > low system = event_target:diadochi_country.capital_scope.solar_system }
					}
				}
				establish_communications_no_message = event_target:diadochi_country
			}
			# Clear new contact opinion modifier
			if = {
				limit = { has_opinion_modifier = { who = event_target:first_diadochi modifier = opinion_new_contact } }
				remove_opinion_modifier = { who = event_target:first_diadochi modifier = opinion_new_contact }
			}
			country_event = { id = khan.610 days = -1 } # Handover some old stuff
			## END DIADOCHI_COUNTRY_SETUP

			every_playable_country = {
				limit = {
					has_government = gov_diadochi
					has_origin = "origin_khan_successor"
					NOT = { is_same_empire = prev }
				}
				if = {
					limit = { NOT = { has_communications = prev } }
					establish_communications_no_message = prev
				}
				add_trust = { amount = -100 who = prev }
				add_intel = { amount = 100 who = prev }
				add_opinion_modifier = { modifier = opinion_traitor_to_empire who = prev }
				set_variable = { which = num_sapient_pops value = trigger:num_sapient_pops }
				save_event_target_as = planet_owner_2
				## Prevent extreme balcanization
				# Potential system
				# if = { # First simple level
				while = { count = 4
					limit = {
						any_system_within_border = {
							has_owner = yes
							is_owned_by = prev
							exists = space_owner
							exists = starbase
							starbase = { is_owned_by = prevprev }
							# any_neighbor_system = { is_owned_by = prevprevprev }
							# any_country_neighbor_to_system = { is_same_empire = prevprevprev }
							NOR = {
								is_capital_system = yes
								space_owner = { is_same_empire = prevprevprev }
								has_star_flag = switched_system
								any_neighbor_system = { has_owner = yes is_owned_by = prevprev }
							}
							any_country_neighbor_to_system = {
								has_government = gov_diadochi has_origin = "origin_khan_successor"
								any_system_within_border = {
									has_owner = yes
									is_owned_by = prev
									exists = space_owner
									exists = starbase
									starbase = { is_owned_by = prevprev }
									NOR = {
										is_capital_system = yes
										space_owner = { is_same_empire = prevprevprev }
										has_star_flag = switched_system
									}
									any_country_neighbor_to_system = { is_same_empire = event_target:planet_owner_2 } # prevprevprevprev
									OR = {
										count_neighbor_system = { limit = { has_owner = yes is_owned_by = prevprev } count = 0 }
										AND = {
											count_neighbor_system = { count = 1 limit = { has_owner = yes is_owned_by = prevprev } }
											count_neighbor_system = { count >= 1 limit = { has_owner = yes is_owned_by = event_target:planet_owner_2 } } # prevprevprevprev
										}
									}
								}
							}
						}
					}
					# log="Diadochi system switch"
					 # Note: caching is quite funky at a time like this when many borders are changing hands. The starbase ownership is checked to be extra sure, since it is not cached (unlike system ownership - though that probably would have worked too)
					random_system_within_border = {
						limit = {
							has_owner = yes
							is_owned_by = prev
							exists = space_owner
							exists = starbase
							starbase = { is_owned_by = prevprev }
							# any_neighbor_system = { is_owned_by = prevprevprev }
							# any_country_neighbor_to_system = { is_same_empire = prevprevprev }
							NOR = {
								is_capital_system = yes
								space_owner = { is_same_empire = prevprevprev }
								has_star_flag = switched_system
								any_neighbor_system = { has_owner = yes is_owned_by = prevprev }
							}
							any_country_neighbor_to_system = {
								has_government = gov_diadochi
								has_origin = "origin_khan_successor"
								any_system_within_border = {
									has_owner = yes
									is_owned_by = prev
									exists = space_owner
									exists = starbase
									starbase = { is_owned_by = prevprev }
									NOR = {
										is_capital_system = yes
										space_owner = { is_same_empire = prevprevprev }
										has_star_flag = switched_system
									}
									any_country_neighbor_to_system = { is_same_empire = event_target:planet_owner_2 } # prevprevprevprev
									OR = {
										count_neighbor_system = { limit = { has_owner = yes is_owned_by = prevprev } count = 0 }
										AND = {
											count_neighbor_system = { count = 1 limit = { has_owner = yes is_owned_by = prevprev } }
											count_neighbor_system = { count >= 1 limit = { has_owner = yes is_owned_by = event_target:planet_owner_2 } } # prevprevprevprev
										}
									}
								}
							}
						}
						random_country_neighbor_to_system = {
							limit = {
								has_government = gov_diadochi
								has_origin = "origin_khan_successor"
								any_system_within_border = {
									has_owner = yes
									is_owned_by = prev
									exists = space_owner
									exists = starbase
									starbase = { is_owned_by = prevprev }
									NOR = {
										is_capital_system = yes
										space_owner = { is_same_empire = prevprevprev }
										has_star_flag = switched_system
									}
									any_country_neighbor_to_system = { is_same_empire = event_target:planet_owner_2 } # prevprevprevprev
									OR = {
										count_neighbor_system = { limit = { has_owner = yes is_owned_by = prevprev } count = 0 }
										AND = {
											count_neighbor_system = { count = 1 limit = { has_owner = yes is_owned_by = prevprev } }
											count_neighbor_system = { count >= 1 limit = { has_owner = yes is_owned_by = event_target:planet_owner_2 } } # prevprevprevprev
										}
									}
								}
							}
							random_system_within_border = {
								limit = {
									has_owner = yes
									is_owned_by = prev
									exists = space_owner
									exists = starbase
									starbase = { is_owned_by = prevprev }
									NOR = {
										is_capital_system = yes
										space_owner = { is_same_empire = prevprevprev }
										has_star_flag = switched_system
									}
									any_country_neighbor_to_system = { is_same_empire = event_target:planet_owner_2 } # prevprevprevprev
									OR = {
										count_neighbor_system = { limit = { has_owner = yes is_owned_by = prevprev } count = 0 }
										AND = {
											count_neighbor_system = { count = 1 limit = { has_owner = yes is_owned_by = prevprev } }
											count_neighbor_system = { count >= 1 limit = { has_owner = yes is_owned_by = event_target:planet_owner_2 } } # prevprevprevprev
										}
									}
								}
								# commit_system_to = { EMPIRE = prevprevprev }
								# prevprev = { commit_system_to = { EMPIRE = prevprevprev } }
								commit_system_to = { EMPIRE = event_target:planet_owner_2 }
								prevprev = { commit_system_to = { EMPIRE = event_target:planet_owner_1 } }
							}
						}
					}
				}
				if = { # Second level without former Diadochi
					limit = {
						any_system_within_border = {
							exists = starbase
							starbase = { is_owned_by = prevprev }
							NOR = {
								is_capital_system = yes
								has_star_flag = switched_system
								any_neighbor_system = { is_owned_by = prevprev }
								any_country_neighbor_to_system = { has_government = gov_diadochi has_origin = "origin_khan_successor" } # any_neighbor_system = { has_owner = yes owner = { has_government = gov_diadochi has_origin = "origin_khan_successor" } }
							}
							closest_system = {
								min_steps = 1
								max_steps = 5
								use_bypasses = yes # To much performance?
								limit = {
									has_owner = yes
									is_capital_system = no
									exists = owner
									owner = {
										has_government = gov_diadochi
										has_origin = "origin_khan_successor"
										NOT = { is_same_empire = prevprevprev}
									}
								}
							}
						}
					}
					random_system_within_border = {
						limit = {
							exists = starbase
							starbase = { is_owned_by = prevprev }
							NOR = {
								is_capital_system = yes
								has_star_flag = switched_system
								any_neighbor_system = { is_owned_by = prevprev }
								any_country_neighbor_to_system = { has_government = gov_diadochi has_origin = "origin_khan_successor" } # any_neighbor_system = { has_owner = yes owner = { has_government = gov_diadochi has_origin = "origin_khan_successor" } }
								closest_system = {
									min_steps = 2
									max_steps = 4
									use_bypasses = yes # To much performance?
									limit = {
										has_owner = yes
										is_capital_system = no
										exists = owner
										owner = { has_government = gov_diadochi has_origin = "origin_khan_successor" }
									}
									is_owned_by = prevprevprev
								}
							}
						}
						closest_system = {
							min_steps = 2
							max_steps = 4
							use_bypasses = yes # To much performance?
							limit = {
								has_owner = yes
								is_capital_system = no
								exists = space_owner
								space_owner = {
									has_government = gov_diadochi has_origin = "origin_khan_successor"
									NOT = { is_same_empire = prevprevprev }
								}
							}
							space_owner = {
								save_event_target_as = planet_owner
								prevprev = { commit_system_to = { EMPIRE = event_target:planet_owner } }
							}
						}
					}
				}
				# else = { ordered_system_within_border = { position = x order_by = x }
				while = { count = 4
					limit = {
						capital_scope.solar_system = {
							closest_system = {
								min_steps = 1
								max_steps = 66
								use_bypasses = yes # To much performance?
								limit = {
									has_owner = yes
									NOR = {
										is_capital_system = yes
										is_owned_by = prevprev
										has_star_flag = switched_system
									}
									exists = owner
									owner = {
										NOT = { is_same_empire = prevprevprev }
										is_neighbor_of = prevprevprev
										has_government = gov_diadochi
										has_origin = "origin_khan_successor"
										prev = {
											count_neighbor_system = { count < 1 limit = { has_owner = yes is_owned_by = prevprev } }
										}
										OR = { # Take the same from the other country (only if more pops)
											capital_scope.solar_system = {
												closest_system = {
													min_steps = 1
													max_steps = 66
													use_bypasses = yes # To much performance?
													limit = {
														has_owner = yes
														is_owned_by = prevprevprevprev.owner
														NOR = {
															is_capital_system = yes
															has_star_flag = switched_system
															is_owned_by = prev.owner
															is_owned_by = prevprev.owner
														}
														count_neighbor_system = { count < 2 limit = { has_owner = yes is_owned_by = prevprevprev } }
													}
												}
											}
										}
									}
								}
							}
						}
					}
					capital_scope.solar_system = {
						closest_system = {
							min_steps = 1
							max_steps = 66
							use_bypasses = yes # To much performance?
							limit = {
								has_owner = yes
								NOR = {
									is_owned_by = prevprev
									is_capital_system = yes
									has_star_flag = switched_system
								}
								exists = owner
								owner = {
									NOT = { is_same_empire = event_target:planet_owner_2 } # prevprevprev
									is_neighbor_of = prevprevprev
									has_government = gov_diadochi
									has_origin = "origin_khan_successor"
									prev = {
										count_neighbor_system = { count < 1 limit = { has_owner = yes is_owned_by = prevprev } }
									}
								}
							}
							owner = {
								save_event_target_as = planet_owner
								if = {
									limit = { NOT = { is_variable_set = num_sapient_pops } }
									set_variable = { which = num_sapient_pops value = trigger:num_sapient_pops }
								}
								capital_scope.solar_system = {
									closest_system = {
										min_steps = 1
										max_steps = 66
										use_bypasses = yes # To much performance?
										limit = {
											has_owner = yes
											NOR = {
												is_owned_by = event_target:planet_owner # is_owned_by = prev.owner
												is_capital_system = yes
												has_star_flag = switched_system
											}
											is_owned_by = event_target:planet_owner_2 # prevprevprevprev
											count_neighbor_system = { count < 2 limit = { has_owner = yes is_owned_by = event_target:planet_owner_2 } } # prevprevprev.owner
										}
										# commit_system_to = { EMPIRE = prevprevprevprev.prev }
										# prevprev = { commit_system_to = { EMPIRE = prevprevprevprev.prev.owner } }
										if = { # Take the same from the other country (only if more pops)
											limit = { event_target:planet_owner_2 = { check_variable_arithmetic = { which = num_sapient_pops add = 100 value > event_target:planet_owner.num_sapient_pops } } }
											commit_system_to = { EMPIRE = event_target:planet_owner }
										}
										if = { # Take the same from the other country (only if more pops)
											limit = { event_target:planet_owner = { check_variable_arithmetic = { which = num_sapient_pops add = 100 value > event_target:planet_owner_2.num_sapient_pops } } }
											prevprevprev = { commit_system_to = { EMPIRE = event_target:planet_owner_2 } }
										}
									}
								}
							}
						}
					}
				}
				# Set claim to each other
				every_system_within_border = {
					if = {
						limit = { is_surveyed = { who = prev status = no } }
						set_surveyed = { surveyed = yes surveyor = prev }
					}
					add_claims = { who = prevprev num_of_claims = 10 show_notification = no }
				}
				# set_closed_borders = { who = prev status = yes forced = 5 }
				# prev = { set_closed_borders = { who = prev status = yes forced = 5 } }
			}
			# Survey Rest of Horde's Space
			root = {
				every_planet_within_border = {
					set_surveyed = { surveyed = yes surveyor = prev }
				}
			}
		}
		country_event = { id = khan.610 } # Init more stuff: SET_DIADOCHI_LEADERS_AND_FLEET (First Diadochi)
		set_update_modifiers_batch = end
	}
	after = {
		every_playable_country = {
			limit = {
				has_origin = "origin_khan_successor"
				has_government = gov_diadochi
				# has_country_flag = diadochi
				is_variable_set = num_sapient_pops
			}
			clear_variable = num_sapient_pops
		}
	}
}

country_event = { # Make most populous planet of most populous sector the capital.
	id = marauder_borders.3000
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		ordered_owned_sector = {
			order_by = trigger:num_pops
			position = 0
			ordered_owned_planet = {
				order_by = trigger:num_sapient_pops
				position = 0
				set_capital = yes
			}
		}
	}
}
