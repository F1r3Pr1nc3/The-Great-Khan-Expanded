##############################################
##############################################
#####			Marauder Events				#####
#####		Khan (Horde Crisis) Events		#####
#####		Vanilla by Henrik Thyrwall		#####
#####		Replaced by Crisis Manager		#####
#####		Refactored by FirePrince		#####
##############################################
##############################################
namespace = marauder

## Vanilla fixes >3.2
## Fleets getting stuck.
# marauder.31 .33 .101 .103 .150 .21
# Adding marauder.27 .28 .29
# Check all events: has_country_flag = marauder_x (x = 1 - 3)
#
###		On Actions Short Docu		###
# on_leader_fired = marauder.70
# on_planet_bombarded = marauder.103
# on_monthly_pulse = marauder.113	# Raiders Driven Off (HIDDEN)
# on_yearly_pulse =
# 	marauder.100	# Raid Available
# 	marauder.85		# Mercenaries Available
# 	marauder.160	# Raiding End Failsafe
# 	marauder.699	# Neighbor Events - .707

# on_ship_destroyed_victim = marauder.525 # Horde Triggered Through Destruction of Stations.
# on_starbase_destroyed on_starbase_disabled = marauder.527 # Increase counter

# marauder.551	# Submit
	# marauder.553	# Init satrapy base
		# marauder.560 days = 400 random = 400	# Marauder Auxiliary Reinforcements

# marauder.520	## Reinforcement cycle

###		Khan Dead Events		###
## Future of the Horde marauder.600
	# on_ship_destroyed_victim	marauder.505 Defeated in Combat but NOT die.
		# Only Return of the Great Khan!?! marauder.523 marauder.507
# DEPRECATED on_ship_destroyed_victim	marauder.509 Defeated in Combat and die.
	# on_monthly_pulse			marauder.511. - marauder.512 Dies for Other Reasons
	# On timer start			marauder.514 Dies of Old Ages.

# on_leader_death			marauder.711/.712
# marauder.505
# action.90 creates new starbase_outpost

# Added pirate.65/.66 for pirate stations.

###################
###- Constants -###
###################

### Critical (Lifespan of Khan, debug code)
@CmtConstKhanLifespan_1a =	1		### Minimun Lifespan / day
@CmtConstKhanLifespan_1b =	0.025	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_1c =	35		### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_1d =	5		### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_1e =	8		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_1f =	4		### Time-Lag of Post-Death Process (random = 1f)

### Fleeting (Lifespan of Khan)
@CmtConstKhanLifespan_2a =	4320	### Minimun Lifespan / day
@CmtConstKhanLifespan_2b =	0.75	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_2c =	7200	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_2d =	2880	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_2e =	90		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_2f =	60		### Time-Lag of Post-Death Process (random = 1f)

### Standard (Lifespan of Khan)
@CmtConstKhanLifespan_3a =	7200	### Minimun Lifespan / day
@CmtConstKhanLifespan_3b =	1.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_3c =	10800	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_3d =	5000	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_3e =	200		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_3f =	100		### Time-Lag of Post-Death Process (random = 1f)

### Enduring (Lifespan of Khan)
@CmtConstKhanLifespan_4a =	10800	### Minimun Lifespan / day
@CmtConstKhanLifespan_4b =	3.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_4c =	16200	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_4d =	5400	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_4e =	270		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_4f =	180		### Time-Lag of Post-Death Process (random = 1f)

### Venerable (Lifespan of Khan)
@CmtConstKhanLifespan_5a =	18000	### Minimun Lifespan / day
@CmtConstKhanLifespan_5b =	5.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_5c =	27000	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_5d =	9000	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_5e =	360		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_5f =	360		### Time-Lag of Post-Death Process (random = 1f)

### Immortality (Lifespan of Khan): Directly Written in Event/Effect
@CmtConstKhanLifespan_6e =	360		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_6f =	360		### Time-Lag of Post-Death Process (random = 1f)

### Marauders Destroyed (HIDDEN) on_ship_destroyed_victim
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
# fromfromfrom = ship 2
country_event = {
	id = marauder.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = dormant_marauders
		count_owned_fleet = {
			limit = { is_ship_size = marauder_void_dwelling }
			count = 0
		}
		OR = {
			AND = { # Last ship is Void Dwelling.
				fromfrom = { is_ship_size = marauder_void_dwelling }
				num_starbases = 0
			}
			AND = { # Last ship is Starbase
				fromfrom = { is_ship_size = starbase_marauder }
				num_starbases < 2 # Last one still counts as alive when this fires.
			}
			count_owned_fleet = {
				limit = { is_ship_size = starbase_marauder }
				count = 0
			}
		}
	}

	immediate = {
		from = { save_event_target_as = marauder_killer }
		owner_species = { save_event_target_as = marauder_species }
		fromfromfrom.solar_system = { save_event_target_as = marauder_system }
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = { id = marauder.5 }			# Notify
		}
		random_relation = {
			limit = {
				merg_is_default_empire = yes
				has_policy_flag = refugees_allowed
				has_communications = root
			}
			country_event = { id = marauder.9 days = 10 random = 10 } # Refugees
		}

		# Vengeance if Mercenaries hired
		if = {
			limit = {
				from = { is_regular_empire = yes }
				OR = {
					has_country_flag = merc_fleet_1_hired
					has_country_flag = merc_fleet_2_hired
					has_country_flag = merc_fleet_3_hired
				}
			}
			from = {
				country_event = { id = marauder.6 days = 100 random = 50 }
				if = {
					limit = {
						exists = fromfrom
						exists = fromfrom.solar_system
					}
					fromfrom.solar_system = {
						save_event_target_as = attacked_system
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 1)
			if = {
				limit = { has_country_flag = marauder_1 }
				every_playable_country = {
					limit = { any_controlled_fleet = { CmtTriggerHiredMarauderFleet1 = yes } }
					set_country_flag = CmtFlagHiringMarauder1
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = {
					limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_1 }
						}
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 2)
			else_if = {
				limit = { has_country_flag = marauder_2 }
				every_playable_country = {
					limit = { any_controlled_fleet = { CmtTriggerHiredMarauderFleet2 = yes } }
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = {
					limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_2 }
						}
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 3)
			else_if = {
				limit = { has_country_flag = marauder_3 }
				every_playable_country = {
					limit = { any_controlled_fleet = { CmtTriggerHiredMarauderFleet3 = yes } }
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = {
					limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_3 }
						}
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			set_country_type = ruined_marauders			# Kill diplomacy
			# Only to be sure, superfluous?
			if = {
				limit = { NOT = { is_hostile = from } }
				set_faction_hostility = {
					target = from
					set_hostile = yes
				}
			}
		}
		else = {
			every_owned_megastructure = { set_ruined_megastructure = yes }
			set_country_type = pirate # destroy_country = yes
		}
	}
}

# Marauder Vengeance
country_event = {
	id = marauder.8
	title = "marauder.6.name"
	desc = "marauder.8.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	location = event_target:attacked_system
	is_triggered_only = yes
	option = { name = DISCONCERTING }
	after = {
		hidden_effect = {
			if = {
				limit = { exists = event_target:CmtTargetMarauderRallyPoint }
				clear_global_event_target = CmtTargetMarauderRallyPoint
			}
		}
	}
}

## Marauder Infighting On Action (on_yearly_pulse)
# Reenabled by FirePrince - Commented out in Vanilla: Works in game, but causes asserts when fleets from the same country attack each other.
# Almost the same event exists for feral_prethoryn_infighting crisis.123
event = {
	id = marauder.11
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		years_passed > 80
		num_marauder_empires_to_spawn > 0
		NOR = {
			has_global_flag = marauder_infighting_ongoing
			has_global_flag = marauder_crisis_ongoing
		}
		# any_country = { is_country_type = dormant_marauders }
		OR = {
			exists = event_target:marauder_country_1
			AND = {
				num_marauder_empires_to_spawn > 1
				exists = event_target:marauder_country_2
			}
			AND = {
				num_marauder_empires_to_spawn > 2
				exists = event_target:marauder_country_3
			}
		}
	}
	immediate = {
		random = {
			chance = 50
			random_country = {
				limit = { is_country_type = dormant_marauders }
				country_event = { id = marauder.12 days = 12 random = 6 }
			}
		}
	}
}

# Marauder Infighting
country_event = {
	id = marauder.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_global_flag = marauder_infighting_ongoing
		random_planet_within_border = {
			limit = { is_star = no }
			save_event_target_as = marauder_infighting_target
			create_fleet = {
				effect = {
					set_owner = root
					# Dynamic strenght
					if = {
						limit = { mid_game_years_passed > 40 }
						create_dyn_marauder_fleet = { OUTRIDER = 34 LANCER = 22 CHAMPION = 16 }
					}
					else_if = {
						limit = { years_passed > 120 }
						create_dyn_marauder_fleet = { OUTRIDER = 22 LANCER = 14 CHAMPION = 8 }
					}
					else = {
						create_dyn_marauder_fleet = { OUTRIDER = 12 LANCER = 8 CHAMPION = 4 }
					}
					set_location = {
						target = prev
						distance = 80
						angle = 0
					}
					set_fleet_flag = infighting_marauders
					save_event_target_as = infighting_target_1
				}
			}
			if = {
				limit = { NOT = { exists = event_target:marauder_infighting } }
				# Make opponent species more diverse and random.
				random_country = {
					limit = {
						CmtTriggerIsMarauder = yes
						exists = species
					}
					species = { save_event_target_as = marauder_species }
				}
				create_country = {
					# name = random
					# type = marauder_raiders # Not hostile
					type = ruined_marauders					# dormant_marauders
					species = event_target:marauder_species					# root
					name_list = random
					flag = {
						# icon = { category = "pirate" file = "flag_pirate_13.dds" }
						background = { category = "backgrounds" file = "00_solid.dds" }
						colors = { "black" "black" "null" "null" }
					}
					origin = "origin_void_dwellers"
					effect = {
						save_global_event_target_as = marauder_infighting
						set_country_flag = marauder_vengeance_begun
						randomize_flag_symbol = "pirate"
						set_graphical_culture = madd_01
						make_moderately_hostile = yes
					}
				}
			}
			# Mainly copied from pirate.150
			solar_system = {
				random_neighbor_system = {
					if = { # Prioritise unoccupied systems
						limit = {
							# any_neighbor_system = {
							closest_system = {
								limit = {
									is_valid_crystal_splitter_system = yes
									num_planets_in_system > 1
									event_target:infighting_target_1 = { can_access_system = prev }
								}
								min_steps = 2
								max_steps = 5
							}
						}
						closest_system = {
							limit = {
								is_valid_crystal_splitter_system = yes
								num_planets_in_system > 1
								event_target:infighting_target_1 = { can_access_system = prev }
							}
							min_steps = 2
							max_steps = 5
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = marauder_infighting_target
							}
						}
					}
					else = {
						# Pop up in a semi-convenient, empire-owned system, if possible
						# limit = {
						# any_neighbor_system = {
						closest_system = {
							limit = {
								exists = space_owner
								num_planets_in_system > 1
								NOR = {
									is_pirate_system = yes
									has_star_flag = hostile_system
									has_star_flag = guardian
									has_star_flag = enclave
									is_capital_system = yes
									is_owned_by = root
								}
								has_system_trade_value > 65
								event_target:infighting_target_1 = { can_access_system = prev }
								distance = {
									source = space_owner.capital_scope.solar_system
									type = hyperlane
									use_bypasses = no
									min_jumps = 1
									max_jumps = 5
								}
							}
							min_steps = 1
							max_steps = 5
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = marauder_infighting_target
							}
						}
					}
					create_fleet = {
						# name = random
						effect = {
							set_owner = event_target:marauder_infighting							# last_created_country
							# Dynamic strenght
							if = {
								limit = { mid_game_years_passed > 40 }
								create_dyn_marauder_fleet = { OUTRIDER = 34 LANCER = 22 CHAMPION = 16 }
							}
							else_if = {
								limit = { years_passed > 120 }
								create_dyn_marauder_fleet = { OUTRIDER = 22 LANCER = 14 CHAMPION = 8 }
							}
							else = {
								create_dyn_marauder_fleet = { OUTRIDER = 12 LANCER = 8 CHAMPION = 4 }
							}
							set_location = {
								target = event_target:marauder_infighting_target
								distance = 80
								angle = 180
							}
						}
					}
					last_created_fleet = {
						save_event_target_as = infighting_target_2
						set_fleet_flag = infighting_marauders
						queue_actions = {
							wait = {
								duration = 60
								# random = 20
							}
							move_to = event_target:infighting_target_1
						}
						auto_follow_fleet = {
							target = event_target:infighting_target_1
							attack_fleet = yes
						}
						event_target:infighting_target_1 = {
							auto_follow_fleet = {
								target = prev
								attack_fleet = yes
							}
						}
					}
				}
			}
		}
		establish_communications_no_message = event_target:marauder_infighting
		# event_target:infighting_target_1 = {
		# 	every_country = {
		# 		limit = {
		# 			OR = {
		# 				is_country_type = nomad
		# 				is_country_type = enclave
		# 				is_country_type = dormant_marauders
		# 			}
		# 		}
		# 		set_faction_hostility = {
		# 			target = prev
		# 			set_hostile = no
		# 			set_neutral = no
		# 			set_friendly = yes
		# 		}
		# 	}
		# }
		set_faction_hostility = {
			target = event_target:marauder_infighting
			set_hostile = no
			set_neutral = yes
			set_friendly = no
		}
		every_playable_country = { establish_communications_no_message = event_target:marauder_infighting }
	}
}

# Marauder Infighting Over (on_fleet_destroyed_victim)
# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
country_event = {
	id = marauder.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_infighting_ongoing
		OR = {
			is_country_type = dormant_marauders
			is_country_type = ruined_marauders
		}
		OR = {
			fromfrom = { has_fleet_flag = infighting_marauders }
			fromfromfrom = { has_fleet_flag = infighting_marauders }
		}
	}
	immediate = {
		remove_global_flag = marauder_infighting_ongoing
		random_planet_within_border = {
			limit = { has_planet_flag = raid_source }
			save_event_target_as = return_point
		}
		# Also by marauder.14
		if = {
			limit = { exists = event_target:marauder_infighting }
			if = { limit = { is_same_empire = event_target:marauder_infighting }
				destroy_country = yes
			}
			if = {
				limit = {
					from = { is_same_empire = event_target:marauder_infighting }
				}
				set_country_type = dormant_marauders
			}
			clear_global_event_target = marauder_infighting
		}
		if = {
			limit = {
				fromfromfrom = { has_fleet_flag = infighting_marauders }
			}
			fromfromfrom = { save_event_target_as = infighting_marauders }
		}
		else_if = {
			limit = {
				exists = event_target:infighting_target_1
				event_target:infighting_target_1 = {
					NOT = { is_same_value = fromfrom }
				}
			}
			event_target:infighting_target_1 = { save_event_target_as = infighting_marauders }
		}
		else_if = {
			limit = {
				exists = event_target:infighting_target_2
				event_target:infighting_target_2 = {
					NOT = { is_same_value = fromfrom }
				}
			}
			event_target:infighting_target_2 = { save_event_target_as = infighting_marauders }
		}
		else_if = {
			limit = { from = { is_country_type = dormant_marauders } }
			random_owned_fleet = {
				limit = { has_fleet_flag = infighting_marauders }
				save_event_target_as = infighting_marauders
			}
		}
		if = {
			limit = { exists = event_target:infighting_marauders }
			event_target:infighting_marauders = {
				if = {
					limit = { NOT = { exists = event_target:return_point } }
					solar_system = {
						random_system_planet = {
							limit = { is_star = no }
							save_event_target_as = return_point
						}
					}
				}
				queue_actions = {
					wait = 5
					find_closest_planet = {
						trigger = {
							id = "marauder_infighting.t1[infighting_marauders.GetName]"
							solar_system = {
								prevprev = { can_access_system = prev }
								has_owner = yes
								NOR = {
									is_same_value = root.solar_system
									is_owned_by = event_target:infighting_marauders
									is_owned_by = from
								}
							}
							is_star = no # is_a_planet = yes
						}
						found_planet = {
							move_to = this
							wait = 5
							orbit_planet = this
						}
					}
					move_to = event_target:return_point
					wait = 5
					find_closest_planet = {
						trigger = {
							id = "marauder_infighting.t2[infighting_marauders.GetName]"
							is_same_value = event_target:return_point
						}
						found_planet = {
							move_to = this
							orbit_planet = this
						}
					}
					effect = {
						id = "marauder_infighting.e2[infighting_marauders.GetName]"
						destroy_fleet = this
					}
				}
				auto_move_to_planet = {
					target = event_target:return_point
					clear_auto_move_on_arrival = yes
					destroy_on_arrival = yes
				}
			}
		}
	}
}

# Rebuild marauder starbase
system_event = {
	id = marauder.17
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOR = {
			exists = starbase
			has_star_flag = marauder_starbase_destroyed
		}
		has_star_flag = marauder_system
	}
	immediate = {
		if = {
			limit = {
				any_fleet_in_system = {
					exists = owner
					owner = { is_country_type = dormant_marauders }
				}
			}
			random_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_country_type = dormant_marauders }
				}
				prev = {
					create_starbase = {
						size = "starbase_marauder"
						owner = prev.owner
					}
				}
			}
			set_timed_star_flag = { flag = marauder_starbase_destroyed months = 3 }
		}
	}
}

# Marauder Main Menu (Initial)
# From = current_marauder_diplomacy
country_event = {
	id = marauder.20
	title = "marauder_diplo_header"
	# Marauder 1
	desc = {
		text = marauder.20.1.desc_01
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_02
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_03
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_04
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_05
		trigger = {
			has_valid_civic = civic_warrior_culture
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
		}
	}
	desc = {
		text = marauder.20.1.desc_06
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			has_modifier = marauder_1_tribute
		}
	}
	desc = {
		text = marauder.20.1.desc_07
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			has_modifier = marauder_1_tribute
		}
	}
	# Marauder 2
	desc = {
		text = marauder.20.2.desc_01
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	desc = {
		text = marauder.20.2.desc_02
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	desc = {
		text = marauder.20.2.desc_03
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	desc = {
		text = marauder.20.2.desc_04
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	# Marauder 3
	desc = {
		text = marauder.20.3.desc_01
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	desc = {
		text = marauder.20.3.desc_02
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	desc = {
		text = marauder.20.3.desc_03
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	desc = {
		text = marauder.20.3.desc_04
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	trigger = {
		exists = from
		from = { is_country_type = dormant_marauders }
		NOR = {
			# has_country_flag = marauder_diplomacy_engaged
			has_relation_flag = { who = from flag = current_target }
			has_relation_flag = { who = from flag = current_hired_target }
		}
	}
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		from = {
			owner_species = { save_event_target_as = marauder_species }
			save_event_target_as = current_marauder_diplomacy
			country_event = { id = marauder.28 days = 8 }
		}
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Ask them to raid someone.
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				NOR = {
					has_country_flag = raid_ongoing
					has_country_flag = raid_cooldown
				}
			}
		}
		custom_tooltip = encourage_raid
		allow = {
			custom_tooltip = {
				fail_text = marauder.20.need_rivals
				any_relation = {
					root = { is_rival = prev }
				}
			}
		}
		hidden_effect = {
			country_event = { id = marauder.31 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Already raiding someone (Marauder 1)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_ongoing
				has_country_flag = marauder_1
			}
		}
		response_text = marauder.20.busy.b.1.response
		is_dialog_only = yes
	}
	# Already raiding someone (Marauder 2)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_ongoing
				has_country_flag = marauder_2
			}
		}
		response_text = marauder.20.busy.b.2.response
		is_dialog_only = yes
	}
	# Already raiding someone (Marauder 3)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_ongoing
				has_country_flag = marauder_3
			}
		}
		response_text = marauder.20.busy.b.3.response
		is_dialog_only = yes
	}
	# Cooldown from raid (Marauder 1)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_cooldown
				has_country_flag = marauder_1
			}
		}
		response_text = marauder.20.cooldown.b.1.response
		is_dialog_only = yes
	}
	# Cooldown from raid (Marauder 2)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_cooldown
				has_country_flag = marauder_2
			}
		}
		response_text = marauder.20.cooldown.b.2.response
		is_dialog_only = yes
	}
	# Cooldown from raid (Marauder 3)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_cooldown
				has_country_flag = marauder_3
			}
		}
		response_text = marauder.20.cooldown.b.3.response
		is_dialog_only = yes
	}
	# Hire Leader
	option = {
		name = marauder.20.g
		custom_tooltip = hire_mercenary_leader
		hidden_effect = {
			country_event = { id = marauder.40 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Mercenary Fleet
	option = {
		name = marauder.20.d
		trigger = {
			OR = {
				event_target:current_marauder_diplomacy = {
					has_country_flag = marauder_1
					has_country_flag = mercenaries_available_1
				}
				event_target:current_marauder_diplomacy = {
					has_country_flag = marauder_2
					has_country_flag = mercenaries_available_2
				}
				event_target:current_marauder_diplomacy = {
					has_country_flag = marauder_3
					has_country_flag = mercenaries_available_3
				}
			}
			NOT = {
				event_target:current_marauder_diplomacy = {
					has_country_flag = merc_fleet_1_hired
					has_country_flag = merc_fleet_2_hired
					has_country_flag = merc_fleet_3_hired
				}
			}
		}
		custom_tooltip = hire_mercenaries
		hidden_effect = {
			country_event = { id = marauder.34 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Marauder 2 special
	option = {
		name = marauder.20.f
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_country_flag = inquired_about_shrieking }
		}
		hidden_effect = { set_country_flag = inquired_about_shrieking }
		response_text = marauder.20.f.response
		is_dialog_only = yes
	}
	# Terminate communications
	option = {
		name = marauder.20.e
		default_hide_option = yes
	}
}

# Marauder Main Menu
# From = current_marauder_diplomacy
country_event = {
	id = marauder.21
	title = "marauder_diplo_header"
	# Marauder 1
	desc = {
		text = marauder.20.1.desc_01
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_02
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_03
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_04
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { has_modifier = marauder_1_tribute }
		}
	}
	desc = {
		text = marauder.20.1.desc_05
		trigger = {
			has_valid_civic = civic_warrior_culture
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
		}
	}
	desc = {
		text = marauder.20.1.desc_06
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			has_modifier = marauder_1_tribute
		}
	}
	desc = {
		text = marauder.20.1.desc_07
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			has_modifier = marauder_1_tribute
		}
	}
	# Marauder 2
	desc = {
		text = marauder.20.2.desc_01
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	desc = {
		text = marauder.20.2.desc_02
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	desc = {
		text = marauder.20.2.desc_03
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	desc = {
		text = marauder.20.2.desc_04
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = { has_modifier = marauder_2_tribute }
		}
	}
	# Marauder 3
	desc = {
		text = marauder.20.3.desc_01
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	desc = {
		text = marauder.20.3.desc_02
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	desc = {
		text = marauder.20.3.desc_03
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	desc = {
		text = marauder.20.3.desc_04
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = { has_modifier = marauder_3_tribute }
		}
	}
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = { NOT = { exists = event_target:current_marauder_diplomacy } }
			from = {
				if = {
					limit = { is_country_type = dormant_marauders }
					save_event_target_as = current_marauder_diplomacy
				}
				else_if = {
					limit = { from = { is_country_type = dormant_marauders } }
					from = { save_event_target_as = current_marauder_diplomacy }
				}
			}
		}
		event_target:current_marauder_diplomacy = {
			get_marauder_species = yes
			country_event = { id = marauder.28 days = 8 }
		}
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Ask them to raid someone.
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				NOR = {
					has_country_flag = raid_ongoing
					has_country_flag = raid_cooldown
				}
			}
		}
		custom_tooltip = encourage_raid
		allow = {
			custom_tooltip = {
				fail_text = marauder.20.need_rivals
				any_relation = {
					root = { is_rival = prev }
				}
			}
		}
		hidden_effect = {
			country_event = { id = marauder.31 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Already raiding someone (Marauder 1)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_ongoing
				has_country_flag = marauder_1
			}
		}
		response_text = marauder.20.busy.b.1.response
		is_dialog_only = yes
	}
	# Already raiding someone (Marauder 2)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_ongoing
				has_country_flag = marauder_2
			}
		}
		response_text = marauder.20.busy.b.2.response
		is_dialog_only = yes
	}
	# Already raiding someone (Marauder 3)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_ongoing
				has_country_flag = marauder_3
			}
		}
		response_text = marauder.20.busy.b.3.response
		is_dialog_only = yes
	}
	# Cooldown from raid (Marauder 1)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_cooldown
				has_country_flag = marauder_1
			}
		}
		response_text = marauder.20.cooldown.b.1.response
		is_dialog_only = yes
	}
	# Cooldown from raid (Marauder 2)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_cooldown
				has_country_flag = marauder_2
			}
		}
		response_text = marauder.20.cooldown.b.2.response
		is_dialog_only = yes
	}
	# Cooldown from raid (Marauder 3)
	option = {
		name = marauder.20.b
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = raid_cooldown
				has_country_flag = marauder_3
			}
		}
		response_text = marauder.20.cooldown.b.3.response
		is_dialog_only = yes
	}
	# Hire Leader
	option = {
		name = marauder.20.g
		custom_tooltip = hire_mercenary_leader
		hidden_effect = {
			country_event = { id = marauder.40 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Mercenary Fleet
	option = {
		name = marauder.20.d
		trigger = {
			OR = {
				event_target:current_marauder_diplomacy = {
					has_country_flag = marauder_1
					has_country_flag = mercenaries_available_1
				}
				event_target:current_marauder_diplomacy = {
					has_country_flag = marauder_2
					has_country_flag = mercenaries_available_2
				}
				event_target:current_marauder_diplomacy = {
					has_country_flag = marauder_3
					has_country_flag = mercenaries_available_3
				}
			}
			NOT = {
				event_target:current_marauder_diplomacy = {
					has_country_flag = merc_fleet_1_hired
					has_country_flag = merc_fleet_2_hired
					has_country_flag = merc_fleet_3_hired
				}
			}
		}
		custom_tooltip = hire_mercenaries
		hidden_effect = {
			country_event = { id = marauder.34 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Terminate communications
	option = {
		name = marauder.20.e
		default_hide_option = yes
	}
}

## Jump fleet to raid target.
# From = marauder_target
fleet_event = {
	id = marauder.27
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		closest_system = {
			min_steps = 2
			use_bypasses = yes
			limit = {
				any_system_colony = {
					is_owned_by = from
					num_pops > 1
				}
			}
			random_system_colony = {
				limit = {
					is_owned_by = from
					num_pops > 1
				}
				save_event_target_as = raid_planet
			}
		}

		if = {
			limit = { exists = event_target:raid_planet }
			set_location = {
				target = event_target:raid_planet
				distance = 45
				angle = random
			}
			auto_move_to_planet = {
				target = event_target:raid_planet
				clear_auto_move_on_arrival = no
			}
		}
	}
}

## raiding_marauder stuck check & fix
# Root = dormant_marauder = current_marauder_diplomacy
# From = marauder_target
country_event = {
	id = marauder.28
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_country_flag = raid_ongoing
		exists = from
	}
	immediate = {
		# Find marauder_raiding_country (child)
		if = {
			limit = {
				# NOT = { has_country_flag = raid_cooldown }
				any_country = {
					is_country_type = marauder_raiders
					has_country_flag = raid_ongoing
					any_owned_fleet = {
						has_fleet_flag = hired_raiding_fleet
						is_fleet_idle = yes
					}
					# any_playable_country = {
					# 	is_ai = no
					# 	has_communications = root
					# }
					root = { has_country_flag = parent_of@prev }
				}
			}
			# save_event_target_as = marauder_country
			every_country = {
				limit = {
					is_country_type = marauder_raiders
					has_country_flag = raid_ongoing
					any_owned_fleet = {
						has_fleet_flag = hired_raiding_fleet
						is_fleet_idle = yes
					}
					root = { has_country_flag = parent_of@prev }
				}
				# Find event_target:marauder_target
				random_playable_country = {
					limit = {
						# OR = { only passive raid flags
						# 	has_country_flag = under_marauder_attack
						# 	has_country_flag = target_of_hired_ai_raid
						# }
						OR = {
							has_relation_flag = { who = root flag = current_hired_target }
							has_relation_flag = { who = root flag = current_target }
							has_country_flag = raid_target_of@root
						}
					}
					save_event_target_as = marauder_target
				}
				if = {
					limit = { exists = event_target:marauder_target }
					log = "Found new Raiding Marauders target \\[This.GetName]"
					random_owned_fleet = {
						limit = {
							has_fleet_flag = hired_raiding_fleet
							is_fleet_idle = yes
							closest_system = {
								min_steps = 2
								use_bypasses = yes
								limit = {
									any_system_colony = {
										is_owned_by = event_target:marauder_target
										num_pops > 1
									}
									# prev = { can_access_system = prev }
								}
							}
						}
						log = "Raiding Marauders stuck at \\[This.System.GetName]"
						# Find new raid target
						closest_system = {
							min_steps = 2
							use_bypasses = yes
							limit = {
								any_system_colony = {
									is_owned_by = event_target:marauder_target
									num_pops > 1
								}
								# prev = { can_access_system = prev }
							}
							random_system_colony = {
								limit = {
									is_owned_by = event_target:marauder_target
									num_pops > 1
								}
								save_event_target_as = raid_planet
							}
						}
						if = {
							limit = {
								exists = event_target:raid_planet
								can_access_system = event_target:raid_planet.solar_system
							}
							clear_orders = yes
							remove_auto_move_target = yes
							clear_fleet_actions = this
							auto_move_to_planet = {
								target = event_target:raid_planet
								clear_auto_move_on_arrival = no
							}
							log ="Take new raid target \\[This.System.GetName]"
						}
						else = {
							fleet_event = { id = marauder.29 scopes = { from = event_target:marauder_target } }
						}
					}
				}
				else = { log = "No raiding target found for \\[This.GetName]" }
			}
		}
	}
}

# Seeks a viable target if the actual target is not accesible (fallback)
# From = country marauder_raid_target
fleet_event = {
	id = marauder.29
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# exists = event_target:raid_planet
		exists = from
	}
	immediate = {
		# log="Try fallback routing"
		# First try to find alternate path (new raid target)
		closest_system = {
			min_steps = 1
			use_bypasses = yes
			limit = {
				any_system_colony = {
					is_owned_by = from
					num_pops > 1
				}
				prev = { can_access_system = prev }
			}
			random_system_colony = {
				limit = {
					is_owned_by = from
					num_pops > 1
				}
				save_event_target_as = attacked_planet
			}
		}
		if = {
			limit = { exists = event_target:attacked_planet }
			clear_orders = yes
			remove_auto_move_target = yes
			clear_fleet_actions = this
			auto_move_to_planet = {
				target = event_target:attacked_planet
				clear_auto_move_on_arrival = no
			}
			# log ="Take new raid target \\[This.System.GetName]"
			break = yes
		}

		# TODO # Get (max) distance (export works but not import so search must be step for step)
		# export_trigger_value_to_variable = {
		# 	trigger = distance
		# 	parameters = {
		# 		source = event_target:raid_planet
		# 		min_distance > 5
		# 		type = hyperlane
		# 		bypass_empire = root.owner
		# 		min_jumps = 1
		# 	}
		# 	variable = raid_target_distance
		# }
		# log="raid_target_distance \\[Root.raid_target_distance]"

		closest_system = {
			min_steps = 1
			# max_steps = 40
			use_bypasses = yes
			limit = {
				has_owner = yes
				is_owned_by = from
				exists = starbase
				starbase = {
					has_starbase_size > starbase_outpost
					fleet = { is_disabled = no }					# Not working for starbase?
				}
				NOR = {
					any_system_colony = {
						is_owned_by = from
						num_pops > 0
					}
				}
				root = { can_access_system = prev }
			}
			save_event_target_as = target_system
		}

		if = {
			limit = {
				NAND = {
					exists = event_target:target_system
					can_access_system = event_target:target_system
				}
			}
			# Find bottleneck system between.
			closest_system = {
				min_steps = 1
				# max_steps = 40
				use_bypasses = yes
				limit = {
					exists = owner
					owner = {
						NOR = {
							is_fallen_empire = yes
							is_same_empire = root.owner
						}
						is_hostile = root.owner
					}
					exists = starbase
					starbase = {
						has_starbase_size > starbase_outpost
						fleet = { is_disabled = no }						# Not working for starbase?
					}
					NOR = {
						is_owned_by = root.owner
						has_star_flag = guardian
						has_star_flag = extradimensional_origin_system
					}
					# distance_compare = { MAX = "[root.raid_target_distance]" }
					# distance = {
					# 	source = event_target:raid_planet
					# 	min_distance = 5
					# 	max_distance = root.raid_target_distance
					# 	type = hyperlane
					# 	bypass_empire = root.owner
					# 	# min_jumps = 1
					# }
					root = { can_access_system = prev }
				}
				save_event_target_as = target_system
			}
		}
		owner = {
			if = {
				limit = {
					exists = event_target:target_system
					event_target:target_system = {
						NOT = { is_owned_by = from }
						space_owner = { is_country_type_with_subjects = yes }
					}
					is_hostile = event_target:target_system.space_owner
					opinion = {
						who = event_target:target_system.space_owner
						value > -150
					}
				}
				set_faction_hostility = {
					target = event_target:target_system.space_owner
					set_neutral = yes
				}
			}
		}

		if = {
			limit = {
				exists = event_target:target_system
				can_access_system = event_target:target_system
			}
			# clear_orders = yes
			# remove_auto_move_target = yes
			# clear_fleet_actions = this
			event_target:target_system = {
				random_system_planet = {
					weights = {
						base = 1
						modifier = {
							add = 30
							has_owner = yes
							is_owned_by = from
							is_colony = yes
						}
						modifier = { add = 3 has_owner = yes }
					}
					root = {
						auto_move_to_planet = {
							target = prev
							clear_auto_move_on_arrival = no
						}
						fleet_event = { id = marauder.29 days = 100 random = 25 scopes = { from = from } }
					}
					# log ="\\[Root.Owner.GetName] take new raid target \\[This.GetName]"
				}
			}
		}
		else = {
			fleet_event = { id = marauder.27 days = 100 random = 25 scopes = { from = from } }
			# log="Fallback jump marauder fleet \\[This.GetName]"
		}
	}
}

# Raiding Target
# From = current_marauder_diplomacy
country_event = {
	id = marauder.31
	title = "marauder_diplo_header"
	desc = {
		trigger = {
			hidden:event_target:current_marauder_diplomacy = {
				switch = { trigger = has_country_flag
					marauder_1 = { text = marauder.31.1.desc }
					marauder_2 = { text = marauder.31.2.desc }
					marauder_3 = { text = marauder.31.3.desc }
				}
			}
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = {
		# exists = event_target:current_marauder_diplomacy
		exists = from
		from = { any_owned_fleet = { is_mobile = yes } }
	}
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		event_target:current_marauder_diplomacy = { owner_species = { save_event_target_as = marauder_species } }
		random_rival_country = {
			save_event_target_as = raid_target_1
			root = {
				random_rival_country = {
					limit = { NOT = { is_same_empire = event_target:raid_target_1 } }
					save_event_target_as = raid_target_2
					root = {
						random_rival_country = {
							limit = {
								NOR = {
									is_same_empire = event_target:raid_target_1
									is_same_empire = event_target:raid_target_2
								}
							}
							save_event_target_as = raid_target_3
							root = {
								random_rival_country = {
									limit = {
										NOR = {
											is_same_empire = event_target:raid_target_1
											is_same_empire = event_target:raid_target_2
											is_same_empire = event_target:raid_target_3
										}
									}
									save_event_target_as = raid_target_4
								}
							}
						}
					}
				}
			}
		}
		# Concept from Spaceborne Civs Expanded by Tovius
		# can target player crisis once they reach level 2
		random_playable_country = {
			limit = {
				has_ascension_perk = ap_become_the_crisis
				OR = {
					# has_crisis_level = crisis_level_2
					has_crisis_level = crisis_level_3
					has_crisis_level = crisis_level_4
					has_crisis_level = crisis_level_5
				}
				NOR = {
					AND = { exists = event_target:raid_target_1 is_same_empire = event_target:raid_target_1 }
					AND = { exists = event_target:raid_target_2 is_same_empire = event_target:raid_target_2 }
					AND = { exists = event_target:raid_target_3 is_same_empire = event_target:raid_target_3 }
					AND = { exists = event_target:raid_target_4 is_same_empire = event_target:raid_target_4 }
					is_same_empire = root
				}
			}
			save_event_target_as = raid_target_5
		}

		# Evil empire gets some extra options
		if = {
			limit = {
				OR = {
					has_ascension_perk = ap_become_the_crisis
					is_homicidal = yes
					has_ethic = ethic_fanatic_militarist
					has_ethic = ethic_fanatic_xenophobe
					has_ethic = ethic_fanatic_authoritarian
				}
				is_galactic_custodian = no
				is_galactic_emperor = no
			}
			if = {
				limit = {
					is_galactic_community_formed = yes
					OR = {
						is_galactic_community_member = no
						galactic_community_rank >= 4
					}
				}
				# custodian or galactic emperor
				if = {
					limit = {
						OR = {
							has_galactic_emperor = yes
							is_galactic_council_established = yes
						}
					}
					random_playable_country = {
						limit = {
							OR = {
								is_galactic_custodian = yes
								is_galactic_emperor = yes
							}
							NOR = {
								AND = { exists = event_target:raid_target_1 is_same_empire = event_target:raid_target_1 }
								AND = { exists = event_target:raid_target_2 is_same_empire = event_target:raid_target_2 }
								AND = { exists = event_target:raid_target_3 is_same_empire = event_target:raid_target_3 }
								AND = { exists = event_target:raid_target_4 is_same_empire = event_target:raid_target_4 }
								AND = { exists = event_target:raid_target_5 is_same_empire = event_target:raid_target_5 }
								is_same_empire = root
							}
						}
						save_event_target_as = raid_target_6
					}
				}
				# ranking member of galactic community
				random_playable_country = {
					limit = {
						is_galactic_community_member = yes
						galactic_community_rank <= 3
						NOR = {
							AND = { exists = event_target:raid_target_1 is_same_empire = event_target:raid_target_1 }
							AND = { exists = event_target:raid_target_2 is_same_empire = event_target:raid_target_2 }
							AND = { exists = event_target:raid_target_3 is_same_empire = event_target:raid_target_3 }
							AND = { exists = event_target:raid_target_4 is_same_empire = event_target:raid_target_4 }
							AND = { exists = event_target:raid_target_5 is_same_empire = event_target:raid_target_5 }
							AND = { exists = event_target:raid_target_6 is_same_empire = event_target:raid_target_6 }
						}
					}
					save_event_target_as = raid_target_7
					random_playable_country = {
						limit = {
							is_galactic_community_member = yes
							galactic_community_rank <= 3
							NOR = {
								AND = { exists = event_target:raid_target_1 is_same_empire = event_target:raid_target_1 }
								AND = { exists = event_target:raid_target_2 is_same_empire = event_target:raid_target_2 }
								AND = { exists = event_target:raid_target_3 is_same_empire = event_target:raid_target_3 }
								AND = { exists = event_target:raid_target_4 is_same_empire = event_target:raid_target_4 }
								AND = { exists = event_target:raid_target_5 is_same_empire = event_target:raid_target_5 }
								AND = { exists = event_target:raid_target_6 is_same_empire = event_target:raid_target_6 }
								AND = { exists = event_target:raid_target_7 is_same_empire = event_target:raid_target_7 }
							}
						}
						save_event_target_as = raid_target_8
					}
				}
			}
		}
		# random target, for the lulz
		random_playable_country = {
			limit = {
				OR = {
					is_hostile_to = root
					has_opposing_ethics = { COUNTRY1 = root COUNTRY2 = this }
				}
				NOR = {
					AND = { exists = event_target:raid_target_1 is_same_empire = event_target:raid_target_1 }
					AND = { exists = event_target:raid_target_2 is_same_empire = event_target:raid_target_2 }
					AND = { exists = event_target:raid_target_3 is_same_empire = event_target:raid_target_3 }
					AND = { exists = event_target:raid_target_4 is_same_empire = event_target:raid_target_4 }
					AND = { exists = event_target:raid_target_5 is_same_empire = event_target:raid_target_5 }
					AND = { exists = event_target:raid_target_6 is_same_empire = event_target:raid_target_6 }
					AND = { exists = event_target:raid_target_7 is_same_empire = event_target:raid_target_7 }
					AND = { exists = event_target:raid_target_8 is_same_empire = event_target:raid_target_8 }
					is_same_empire = root
				}
			}
			save_event_target_as = raid_target_9
		}
		# Test accessibility
		# event_target:current_marauder_diplomacy = {
		# 	random_owned_fleet = {
		# 		limit = { is_mobile = yes }
		# 		save_event_target_as = random_marauder_fleet
		# 	}
		# }
	}
	after = {
		hidden_effect = {
			if = {
				limit = { exists = event_target:preliminary_target }
				if = {
					limit = { event_target:preliminary_target = { is_fallen_empire = yes } }
					country_event = { id = marauder.35 scopes = { from = event_target:current_marauder_diplomacy } }
				}
				else = {
					country_event = { id = marauder.32 scopes = { from = event_target:current_marauder_diplomacy } }
				}
			}
			remove_country_flag = marauder_diplomacy_engaged
		}
	}
	option = {
		name = marauder.31.a
		trigger = { exists = event_target:raid_target_1 }
		# allow = { # Test accessibility
		# 	exists = event_target:random_marauder_fleet
		# 	event_target:raid_target_1 = {
		# 		any_system_within_border = {
		# 			any_system_planet = {
		# 				has_owner = yes
		# 				is_colony = yes
		# 			}
		# 			event_target:random_marauder_fleet = { can_access_system = prev }
		# 		}
		# 	}
		# }
		hidden_effect = {
			event_target:raid_target_1 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.b
		trigger = { exists = event_target:raid_target_2 }
		hidden_effect = {
			event_target:raid_target_2 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.c
		trigger = { exists = event_target:raid_target_3 }
		hidden_effect = {
			event_target:raid_target_3 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.d
		trigger = { exists = event_target:raid_target_4 }
		hidden_effect = {
			event_target:raid_target_4 = { save_event_target_as = preliminary_target }
		}
	}

	option = {
		name = marauder.31.k
		trigger = { exists = event_target:raid_target_5 }
		hidden_effect = {
			event_target:raid_target_5 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.g
		trigger = { exists = event_target:raid_target_6 }
		hidden_effect = {
			event_target:raid_target_6 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.h
		trigger = { exists = event_target:raid_target_7 }
		hidden_effect = {
			event_target:raid_target_7 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.i
		trigger = { exists = event_target:raid_target_8 }
		hidden_effect = {
			event_target:raid_target_8 = { save_event_target_as = preliminary_target }
		}
	}
	option = {
		name = marauder.31.j
		trigger = { exists = event_target:raid_target_9 }
		hidden_effect = {
			event_target:raid_target_9 = { save_event_target_as = preliminary_target }
		}
	}

	option = {
		name = marauder.31.e
		trigger = { NOT = { has_active_event = { marauder.21 } } }
		hidden_effect = {
			if = {
				limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.31.f
		default_hide_option = yes
	}
}

# Preliminary Raiding Target
# From = current_marauder_diplomacy
country_event = {
	id = marauder.32
	title = "marauder_diplo_header"
	desc = {
		trigger = {
			hidden:event_target:current_marauder_diplomacy = {
				switch = { trigger = has_country_flag
					marauder_1 = { text = marauder.32.1.desc }
					marauder_2 = { text = marauder.32.2.desc }
					marauder_3 = { text = marauder.32.3.desc }
				}
			}
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		## Dynamic raid costs TODO needs update each effect.
		event_target:current_marauder_diplomacy = {
			owner_species = { save_event_target_as = marauder_species }
			set_variable = { which = raidcost value = 1 }
			if = {
				limit = { has_global_flag = pirate_waves_active }
				set_pirates_difficulty = yes
				set_variable = { which = raidcost value = 1.5 }
				change_variable = { which = raidcost value = pirates_factor }
				multiply_variable = { which = raidcost value = 0.5 } # Take only 50% weight
				multiply_variable = { which = raidcost value = pirates_factor } # As it is only half for marauders.
				# set_variable = { which = raidallow value = @raidallow }
				# multiply_variable = { which = raidallow value = pirates_factor }
				# multiply_variable = { which = raidallow value = 1.5 } # As it is only half for marauders.
				# log="raidallow \\[This.raidallow]"
				# switch = { # Price depending on difficulty?
				# 	trigger = has_country_flag
				# 	pirate_waves_very_easy = {
				# 		multiply_variable = { which = pirates_factor value = 0.5 }
				# 	}
				# 	pirate_waves_easy = {
				# 		multiply_variable = { which = pirates_factor value = 0.75 }
				# 	}
				# 	pirate_waves_hard = {
				# 		multiply_variable = { which = pirates_factor value = 1.25 }
				# 	}
				# 	pirate_waves_insane = {
				# 		multiply_variable = { which = pirates_factor value = 1.5 }
				# 	}
				# }
				round_variable_to_closest = { which = raidcost value = 0.01 }
				# round_variable = raidcost
			}
			else = {
				set_variable = { which = raidcost value = 1 }
			}
		}
	}
	after = {
		hidden_effect = {
			remove_country_flag = marauder_diplomacy_engaged
			event_target:current_marauder_diplomacy = {
				if = {
					limit = { is_variable_set = raidcost }
					log="Dyn. raidcost \\[This.raidcost] and difficulty \\[This.pirate_waves_difficulty]"
					clear_variable = raidcost
				}
			}
		}
	}
	option = {
		name = marauder.32.a
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = marauder_1
				is_variable_set = raidcost
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @raidallow mult = event_target:current_marauder_diplomacy.raidcost }
		}
		add_resource = { energy = @raidcost mult = event_target:current_marauder_diplomacy.raidcost }
		response_text = marauder.32.1.a.response
		custom_tooltip = hire_raid
		hidden_effect = {
			event_target:current_marauder_diplomacy = { save_event_target_as = raiding_marauder }
			event_target:preliminary_target = {
				country_event = { id = marauder.33 scopes = { fromfrom = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.32.a
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = marauder_2
				is_variable_set = raidcost
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @raidallow mult = event_target:current_marauder_diplomacy.raidcost }
		}
		add_resource = { energy = @raidcost mult = event_target:current_marauder_diplomacy.raidcost }
		response_text = marauder.32.2.a.response
		custom_tooltip = hire_raid
		hidden_effect = {
			event_target:current_marauder_diplomacy = { save_event_target_as = raiding_marauder }
			event_target:preliminary_target = {
				country_event = { id = marauder.33 scopes = { fromfrom = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.32.a
		trigger = {
			event_target:current_marauder_diplomacy = {
				has_country_flag = marauder_3
				is_variable_set = raidcost
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @raidallow mult = event_target:current_marauder_diplomacy.raidcost }
		}
		add_resource = { energy = @raidcost mult = event_target:current_marauder_diplomacy.raidcost }
		response_text = marauder.32.3.a.response
		custom_tooltip = hire_raid
		hidden_effect = {
			event_target:current_marauder_diplomacy = { save_event_target_as = raiding_marauder }
			event_target:preliminary_target = {
				country_event = { id = marauder.33 scopes = { fromfrom = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.31.e
		hidden_effect = {
			if = {
				limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.31.f
		default_hide_option = yes
	}
}

# Raid commences
# Vanilla fix omit Marauders getting stuck (Refactored by FirePrince)
# Root = marauder_target
# From = Hired marauder_employer
# fromfrom = current_marauder_diplomacy = raiding_marauder
country_event = {
	id = marauder.33
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = from
		exists = fromfrom # event_target:raiding_marauder
	}
	immediate = {
		save_event_target_as = marauder_target
		if = {
			limit = { NOT = { exists = event_target:raiding_marauder } }
			fromfrom = { save_event_target_as = raiding_marauder }
		}
		from = {
			set_country_flag = hired@event_target:raiding_marauder
			save_event_target_as = marauder_employer
			# from = { save_event_target_as = current_marauder_diplomacy }
			set_relation_flag = { who = event_target:raiding_marauder flag = hired_fleet }
		}

		set_relation_flag = { who = event_target:raiding_marauder flag = current_hired_target }
		event_target:raiding_marauder = {
			get_marauder_raid_source = yes
			set_country_flag = raid_ongoing
			owner_species = { save_event_target_as = marauder_species }
		}
		create_country = {
			name = event_target:raiding_marauder
			type = marauder_raiders
			species = event_target:marauder_species
			flag = event_target:raiding_marauder
			effect = {
				save_event_target_as = marauder_raiding_country
				event_target:raiding_marauder = {
					switch = { trigger = has_country_flag
						marauder_1 = { prev = { set_country_flag = marauder_1 } }
						marauder_2 = { prev = { set_country_flag = marauder_2 } }
						marauder_3 = { prev = { set_country_flag = marauder_3 } }
					}
				}
				set_country_flag = raid_ongoing
				set_faction_hostility = { set_neutral = yes }
				make_moderately_hostile = yes
			}
		}
		event_target:marauder_raiding_country = {
			every_country = { limit = { has_communications = event_target:raiding_marauder } establish_communications_no_message = prev }
			create_marauder_merc_admiral = yes
			event_target:raiding_marauder = {
				set_country_flag = parent_of@prev
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}
				if = {
					limit = { has_global_flag = pirate_waves_active }
					set_pirates_difficulty = yes
				}
				create_fleet = {
					name = "NAME_Raiding_Fleet"
					effect = {
						set_owner = prev					# For ship names
						create_marauder_raiders = yes		# Needs prev for script vars
						set_location = event_target:raid_source
						set_fleet_stance = aggressive
						set_fleet_bombardment_stance = indiscriminate
						set_aggro_range_measure_from = self
						set_aggro_range = 150
						set_fleet_flag = hired_raiding_fleet
						set_fleet_flag = raiding_fleet
					}
				}
			}
			set_faction_hostility = {
				target = root
				set_hostile = yes
				set_neutral = no
				set_friendly = no
			}
			last_created_fleet = {
				set_owner = prev	# Real owner
				assign_leader = last_created_leader
				closest_system = {
					limit = {
						has_owner = yes
						is_owned_by = root
						any_system_colony = {
							is_owned_by = root
							num_pops > 0
						}
						# prev = { can_access_system = prev }
					}
					random_system_colony = {
						limit = {
							is_owned_by = root
							num_pops > 0
						}
						save_event_target_as = raid_planet
					}
				}
				if = {
					limit = {
						exists = event_target:raid_planet
						can_access_system = event_target:raid_planet.solar_system
					}
					auto_move_to_planet = { target = event_target:raid_planet clear_auto_move_on_arrival = no }
				}
				else = {
					fleet_event = { id = marauder.29 scopes = { from = root } }
				}
			}
		}
		if = {
			limit = { has_communications = event_target:raiding_marauder }
			country_event = { id = marauder.120 }
		}
		else = {
			country_event = { id = marauder.123 }
		}
	}
}

# Hire Mercenaries
# Vanilla Fixed by FirePrince: do not spawn fleets instantly
# From = current_marauder_diplomacy
country_event = {
	id = marauder.34
	title = "marauder_diplo_header"
	desc = {
		trigger = {
			hidden:event_target:current_marauder_diplomacy = {
				switch = { trigger = has_country_flag
					marauder_1 = { text = marauder.34.1.desc }
					marauder_2 = { text = marauder.34.2.desc }
					marauder_3 = { text = marauder.34.3.desc }
				}
			}
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		event_target:current_marauder_diplomacy = { owner_species = { save_event_target_as = marauder_species } }
		## Dynamic hiring costs TODO needs update each effect.
		# event_target:current_marauder_diplomacy = {
		# 	set_pirates_difficulty = yes
		# 	set_variable = { which = largemerccost value = @largemerccost }
		# 	set_variable = { which = mediummerccost value = @mediummerccost }
		# 	set_variable = { which = smallmerccost value = @smallmerccost }
		#	multiply_variable = { which = pirates_factor value = 1.5 } # As it is only half for marauders.
		# 	# switch = { # Price depending on difficulty?
		# 	# 	trigger = has_country_flag
		# 	# 	pirate_waves_very_easy = {
		# 	# 		multiply_variable = { which = pirates_factor value = 0.5 }
		# 	# 	}
		# 	# 	pirate_waves_easy = {
		# 	# 		multiply_variable = { which = pirates_factor value = 0.75 }
		# 	# 	}
		# 	# 	pirate_waves_hard = {
		# 	# 		multiply_variable = { which = pirates_factor value = 1.25 }
		# 	# 	}
		# 	# 	pirate_waves_insane = {
		# 	# 		multiply_variable = { which = pirates_factor value = 1.5 }
		# 	# 	}
		# 	# }
		# 	multiply_variable = { which = largemerccost value = pirates_factor }
		# 	multiply_variable = { which = mediummerccost value = pirates_factor }
		# 	multiply_variable = { which = smallmerccost value = pirates_factor }
		# }
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Hire Armada of the Voidborn.
	option = {
		name = marauder.34.1.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_1_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Star Rider Flotilla
	option = {
		name = marauder.34.1.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired } }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired } }
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_1_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire First Storm Wing
	option = {
		name = marauder.34.1.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired } }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired } }
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_1_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire 234th Dwamak-Bashers
	option = {
		name = marauder.34.2.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_2_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Unhinged Screamer Flotilla
	option = {
		name = marauder.34.2.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_2_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Frenzied Volunteer Squadron
	option = {
		name = marauder.34.2.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_2_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Her Chosen Champions
	option = {
		name = marauder.34.3.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_3_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Order of Eternal Night.
	option = {
		name = marauder.34.3.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_3_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Twilight Congregation
	option = {
		name = marauder.34.3.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_3_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	option = {
		name = marauder.34.d
		hidden_effect = {
			if = {
				limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.34.e
		default_hide_option = yes
	}
}

# Preliminary Raiding Target (Fallen Empire)
# From = current_marauder_diplomacy
country_event = {
	id = marauder.35
	title = "marauder_diplo_header"
	desc = {
		trigger = {
			hidden:event_target:current_marauder_diplomacy = {
				switch = { trigger = has_country_flag
					marauder_1 = { text = marauder.35.1.desc }
					marauder_2 = { text = marauder.35.2.desc }
					marauder_3 = { text = marauder.35.3.desc }
				}
			}
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		event_target:current_marauder_diplomacy = { owner_species = { save_event_target_as = marauder_species } }
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.31.e
		hidden_effect = {
			if = {
				limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.31.f
		default_hide_option = yes
	}
}

# Mercenary Fleet Hired
# From = current_marauder_diplomacy
country_event = {
	id = marauder.37
	title = "marauder_diplo_header"
	desc = {
		trigger = {
			success_text = { text = marauder.37.1.a.desc event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 } any_relation = { is_fallen_empire = yes } }
			success_text = { text = marauder.37.1.b.desc event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 } NOT = { any_relation = { is_fallen_empire = yes } } }
			success_text = { text = marauder.37.2.a.desc event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 } }
			success_text = { text = marauder.37.3.a.desc event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 } }
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		random_relation = {
			limit = { is_fallen_empire = yes }
			save_event_target_as = random_fallen_empire
		}
		# Create global Rally Point event_targets.
		event_target:current_marauder_diplomacy = {
			get_marauder_species = yes
			switch = { trigger = has_country_flag
				marauder_1 = {
					save_global_event_target_as = marauder_country_1
					if = {
						limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint1 } }
						country_event = { id = marauder.499 days = -1 }
					}
				}
				marauder_2 = {
					save_global_event_target_as = marauder_country_2
					if = {
						limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint2 } }
						country_event = { id = marauder.499 days = -1 }
					}
				}
				marauder_3 = {
					save_global_event_target_as = marauder_country_3
					if = {
						limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint3 } }
						country_event = { id = marauder.499 days = -1 }
					}
				}
			}
		}

		if = {
			limit = {
				OR = {
					is_hostile = event_target:current_marauder_diplomacy
					event_target:current_marauder_diplomacy = { is_hostile = prev }
				}
			}
			country_event = { id = marauder.38 days = 20 scopes = { from = event_target:current_marauder_diplomacy } }
		}
		else = {
			country_event = { id = marauder.38 scopes = { from = event_target:current_marauder_diplomacy } }			# Use mia
		}
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.37.a
		hidden_effect = {
			if = {
				limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.37.b
		default_hide_option = yes
	}
}

# Scope = Hiring country (Refactored by FirePrince)
# From = current_marauder_diplomacy
country_event = {
	id = marauder.38
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		if = {
			limit = { exists = event_target:current_marauder_diplomacy }
			# Create global Rally Point event_targets.
			event_target:current_marauder_diplomacy = {
				get_marauder_species = yes
				switch = { trigger = has_country_flag
					marauder_1 = {
						save_global_event_target_as = marauder_country_1
						if = {
							limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint1 } }
							country_event = { id = marauder.499 days = -1 }
						}
					}
					marauder_2 = {
						save_global_event_target_as = marauder_country_2
						if = {
							limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint2 } }
							country_event = { id = marauder.499 days = -1 }
						}
					}
					marauder_3 = {
						save_global_event_target_as = marauder_country_3
						if = {
							limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint3 } }
							country_event = { id = marauder.499 days = -1 }
						}
					}
				}
			}
		}
		else = { log_error = "Missing current_marauder_diplomacy" }
		switch = { trigger = has_country_flag
			# Hire Armada of the Voidborn.
			merc_fleet_1_1_hired = {
				remove_country_flag = merc_fleet_1_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanArmadaVoidborn = yes
						last_created_fleet = { set_fleet_flag = armada_of_the_voidborn }
					}
				}
			}
			# Hire Star Rider Flotilla
			merc_fleet_2_1_hired = {
				remove_country_flag = merc_fleet_2_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanStarRiderFlotilla = yes
						last_created_fleet = { set_fleet_flag = star_rider_flotilla }
					}
				}
			}
			# Hire First Storm Wing
			merc_fleet_3_1_hired = {
				remove_country_flag = merc_fleet_3_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanFirstStormWing = yes
						last_created_fleet = { set_fleet_flag = first_storm_wing }
					}
				}
			}
			# Hire 234th Dwamak-Bashers
			merc_fleet_1_2_hired = {
				remove_country_flag = merc_fleet_1_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanDwamakBashers = yes
						last_created_fleet = { set_fleet_flag = dwamak_bashers }
					}
				}
			}
			# Hire Unhinged Screamer Flotilla
			merc_fleet_2_2_hired = {
				remove_country_flag = merc_fleet_2_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanUnhingedScreamerFlotilla = yes
						last_created_fleet = { set_fleet_flag = unhinged_screamer_flotilla }
					}
				}
			}
			# Hire Frenzied Volunteer Squadron
			merc_fleet_3_2_hired = {
				remove_country_flag = merc_fleet_3_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanFrenziedVolunteerSquadron = yes
						last_created_fleet = { set_fleet_flag = frenzied_volunteer_squadron }
					}
				}
			}
			# Hire Her Chosen Champions
			merc_fleet_1_3_hired = {
				remove_country_flag = merc_fleet_1_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanHerChosenChampions = yes
						last_created_fleet = { set_fleet_flag = her_chosen_champions }
					}
				}
			}
			# Hire Order of Eternal Night.
			merc_fleet_2_3_hired = {
				remove_country_flag = merc_fleet_2_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanOrderEternalNight = yes
						last_created_fleet = { set_fleet_flag = order_of_eternal_night }
					}
				}
			}
			# Hire Twilight Congregation
			merc_fleet_3_3_hired = {
				remove_country_flag = merc_fleet_3_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanTwilightCongregation = yes
						last_created_fleet = { set_fleet_flag = twilight_congregation }
					}
				}
			}
		}
		last_created_fleet = {
			save_event_target_as = hired_merc_fleet # Vanilla nowhere used??
			set_owner = root
			if = {
				limit = {
					OR = {
						root = { is_hostile = event_target:current_marauder_diplomacy }
						event_target:current_marauder_diplomacy = { is_hostile = root }
					}
				}
				set_location = {
					target = root.capital_scope
					distance = 25
					angle = random
				}
			}
			if = {
				limit = {
					exists = root.capital_star.starbase
					root.capital_star.starbase = { is_owned_by = root }
				}
				set_home_base = root.capital_star.starbase
				set_mia = mia_return_home
			}
			else = { set_location = root.capital_scope }
			fleet_event = { id = marauder.50 days = 1800 }
		}
	}
}

# Hire Leader
# From = current_marauder_diplomacy
# only for scope fallback
country_event = {
	id = marauder.40
	title = "marauder_diplo_header"
	desc = {
		trigger = {
			hidden:event_target:current_marauder_diplomacy = {
				switch = { trigger = has_country_flag
					marauder_1 = { text = marauder.40.1.desc }
					marauder_2 = { text = marauder.40.2.desc }
					marauder_3 = { text = marauder.40.3.desc }
				}
			}
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = { NOT = { exists = event_target:current_marauder_diplomacy } }
			from = {
				if = {
					limit = { is_country_type = dormant_marauders }
					save_event_target_as = current_marauder_diplomacy
				}
				else_if = {
					limit = { from = { is_country_type = dormant_marauders } }
					from = { save_event_target_as = current_marauder_diplomacy }
				}
			}
		}
		if = {
			limit = { NOT = { exists = event_target:marauder_species } }
			event_target:current_marauder_diplomacy = { get_marauder_species = yes }
		}
	}
	after = {
		hidden_effect = {
			if = {
				limit = { has_country_flag = marauder_diplomacy_engaged }
				event_target:current_marauder_diplomacy = {
					switch = { trigger = has_country_flag
						marauder_1 = { last_created_leader = { set_leader_flag = hired_merc_leader_1 set_leader_flag = marauder_merc_leader } }
						marauder_2 = { last_created_leader = { set_leader_flag = hired_merc_leader_2 set_leader_flag = marauder_merc_leader } }
						marauder_3 = { last_created_leader = { set_leader_flag = hired_merc_leader_3 set_leader_flag = marauder_merc_leader } }
					}
				}
				remove_country_flag = marauder_diplomacy_engaged
			}
		}
	}
	### Marauder 1
	# Hire Admiral
	option = {
		name = marauder.40.1.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @leaderallow }
		}
		add_resource = { energy = @leadercost }
		custom_tooltip = hire_admiral_merc
		hidden_effect = {
			event_target:current_marauder_diplomacy = {
				create_marauder_merc_admiral = yes
				last_created_leader = { set_owner = root }
			}
		}
		response_text = marauder.40.a.response
		is_dialog_only = yes
	}
	# Hire General
	option = {
		name = marauder.40.2.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @leaderallow }
		}
		add_resource = { energy = @leadercost }
		custom_tooltip = hire_general_merc
		hidden_effect = {
			event_target:current_marauder_diplomacy = {
				create_marauder_merc_general = yes
				last_created_leader = { set_owner = root }
			}
		}
		response_text = marauder.40.a.response
		is_dialog_only = yes
	}
	### Marauder 2
	# Hire Admiral
	option = {
		name = marauder.40.1.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @leaderallow }
		}
		add_resource = { energy = @leadercost }
		custom_tooltip = hire_admiral_merc
		hidden_effect = {
			event_target:current_marauder_diplomacy = {
				create_marauder_merc_admiral = yes
				last_created_leader = { set_owner = root }
			}
		}
		response_text = marauder.40.b.response
		is_dialog_only = yes
	}
	# Hire General
	option = {
		name = marauder.40.2.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @leaderallow }
		}
		add_resource = { energy = @leadercost }
		custom_tooltip = hire_general_merc
		hidden_effect = {
			event_target:current_marauder_diplomacy = {
				create_marauder_merc_general = yes
				last_created_leader = { set_owner = root }
			}
		}
		response_text = marauder.40.b.response
		is_dialog_only = yes
	}
	### Marauder 3
	# Hire Admiral
	option = {
		name = marauder.40.1.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @leaderallow }
		}
		add_resource = { energy = @leadercost }
		custom_tooltip = hire_admiral_merc
		hidden_effect = {
			event_target:current_marauder_diplomacy = {
				create_marauder_merc_admiral = yes
				last_created_leader = { set_owner = root }
			}
		}
		response_text = marauder.40.c.response
		is_dialog_only = yes
	}
	# Hire General
	option = {
		name = marauder.40.2.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value >= @leaderallow }
		}
		add_resource = { energy = @leadercost }
		custom_tooltip = hire_general_merc
		hidden_effect = {
			event_target:current_marauder_diplomacy = {
				create_marauder_merc_general = yes
				last_created_leader = { set_owner = root }
			}
		}
		response_text = marauder.40.c.response
		is_dialog_only = yes
	}
	option = {
		name = marauder.31.e
		hidden_effect = {
			remove_country_flag = marauder_diplomacy_engaged
			if = {
				limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.31.f
		default_hide_option = yes
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
}

### Mercenaries Leave (Home Systems Destroyed)
# This = Hiring country
# From = Destroyed Marauders
country_event = {
	id = marauder.76
	title = "marauder.76.name"
	desc = "marauder.76.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	location = this
	is_triggered_only = yes
	immediate = {
		# Marauder 1
		if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder1
				# from = { has_country_flag = marauder_1 } not always exists
			}
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet1 = yes }
				if = {
					limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = {
						limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}
				}
				else = {
					if = {
						limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder1
			break = yes
		}
		# Marauder 2
		else_if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder2
				# from = { has_country_flag = marauder_2 } not always exists
			}
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet2 = yes }
				if = {
					limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = {
						limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}
				}
				else = {
					if = {
						limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder2
			break = yes
		}
		# Marauder 3
		else_if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder3
				# from = { has_country_flag = marauder_3 } not always exists
			}
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet3 = yes }
				if = {
					limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = {
						limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}
				}
				else = {
					if = {
						limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder3
		}
	}
	option = { name = marauder.76.a }
}

### Mercenaries Leave (join the Great Khan)
# Refund opportunity (Refactored by FirePrince)
# Scope = Recruiter
country_event = {
	id = marauder.77
	title = "marauder.77.name"
	desc = "marauder.77.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	is_triggered_only = yes
	immediate = {
		set_variable = { which = merccost value = 0 }
		# Marauder 1
		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder1 }
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet1 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					armada_of_the_voidborn = { prev = { change_variable = { which = merccost value = @largemerccost } } }
					star_rider_flotilla = { prev = { change_variable = { which = merccost value = @mediummerccost } } }
					first_storm_wing = { prev = { change_variable = { which = merccost value = @smallmerccost } } }
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_1 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder1
			if = { # All Marauders unified
				limit = {
					event_target:CmtGlobalVar = {
						check_variable = { which = CmtVarKhanMultiple value < 5 }
					}
				}
				break = yes
			}
		}
		# Marauder 2
		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder2 }
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet2 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					dwamak_bashers				= { prev = { change_variable = { which = merccost value = @largemerccost } } }
					unhinged_screamer_flotilla	= { prev = { change_variable = { which = merccost value = @mediummerccost } } }
					frenzied_volunteer_squadron	= { prev = { change_variable = { which = merccost value = @smallmerccost } } }
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_2 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder2
			if = { # All Marauders unified
				limit = {
					event_target:CmtGlobalVar = {
						check_variable = { which = CmtVarKhanMultiple value < 5 }
					}
				}
				break = yes
			}
		}
		# Marauder 3
		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder3 }
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet3 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					her_chosen_champions = { prev = { change_variable = { which = merccost value = @largemerccost } } }
					order_of_eternal_night = { prev = { change_variable = { which = merccost value = @mediummerccost } } }
					twilight_congregation = { prev = { change_variable = { which = merccost value = @smallmerccost } } }
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_3 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder3
		}
	}
	after = {
		# Refund of Mercenary Pay 1/2
		random = {
			chance = 50
			multiply_variable = { which = merccost value = 0.005 } # divide_variable = { which = merccost value = 200 }
			add_resource = { energy = -100 mult = merccost }
		}
		hidden_effect = { clear_variable = merccost }
	}
	option = { name = marauder.76.a }
}

#######################
###- Reinforcements -###
#######################

### Mercenaries Join Great Khan (HIDDEN)
country_event = {
	id = marauder.78
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# To be sure (as they get cleared for unknown reason)
		if = {
			limit = { NOT = { exists = event_target:marauder_country_1 } }
			random_country = { limit = { has_country_flag = marauder_1 }
				save_global_event_target_as = marauder_country_1
			}
		}
		if = {
			limit = { NOT = { exists = event_target:marauder_country_2 } }
			random_country = {
				limit = { has_country_flag = marauder_2 }
				save_global_event_target_as = marauder_country_2
			}
		}
		if = {
			limit = { NOT = { exists = event_target:marauder_country_3 } }
			random_country = {
				limit = { has_country_flag = marauder_3 }
				save_global_event_target_as = marauder_country_3
			}
		}
		if = {
			limit = { NOT = { exists = event_target:marauder_species } }
			owner_main_species = { save_event_target_as = marauder_species }
		}

		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				OR = {
					NOT = { has_global_flag = great_khan_wins }
					AND = {
						num_marauder_empires_to_spawn > 2
						exists = event_target:CmtTargetMarauderRallyPoint1
						exists = event_target:CmtTargetMarauderRallyPoint2
						exists = event_target:CmtTargetMarauderRallyPoint3
					}
					AND = {
						num_marauder_empires_to_spawn > 1
						exists = event_target:CmtTargetMarauderRallyPoint1
						exists = event_target:CmtTargetMarauderRallyPoint2
					}
					AND = {
						num_marauder_empires_to_spawn > 0
						exists = event_target:CmtTargetMarauderRallyPoint1
					}
				}
			}
			every_planet_within_border = {
				limit = { has_planet_flag = CmtFlagMarauderExpRallyPoint }
				prev = { get_marauder_species = { PLANET = prev } }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint1 is_same_value = event_target:CmtTargetMarauderRallyPoint1 }
					CmtEffectCreateAdmiralty_KhanMercenaries1 = yes
				}
				else_if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint2 is_same_value = event_target:CmtTargetMarauderRallyPoint2 }
					CmtEffectCreateAdmiralty_KhanMercenaries2 = yes
				}
				else_if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint3 is_same_value = event_target:CmtTargetMarauderRallyPoint3 }
					CmtEffectCreateAdmiralty_KhanMercenaries3 = yes
				}
			}
		}
		else = {
			switch = { trigger = has_country_flag
				marauder_1 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries1 = yes } }
				marauder_2 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries2 = yes } }
				marauder_3 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries3 = yes } }
			}
		}

		event_target:marauder_rally_point = {
			solar_system = { system_event = { id = khan.301 } } # Create Citadel
		}
	}

	# after = {
	# 	hidden_effect = {
	# 		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
	# 			clear_global_event_target = CmtTargetMarauderRallyPoint1
	# 		}
	# 		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
	# 			clear_global_event_target = CmtTargetMarauderRallyPoint2
	# 		}
	# 		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
	# 			clear_global_event_target = CmtTargetMarauderRallyPoint3
	# 		}
	# 	}
	# }
}

### Start Marauder pirate01 -> madd_01 Gfxculture Override
event = {
	id = marauder.99
	hide_window = yes
	is_triggered_only = yes
	# potential = {
	immediate = {
		# every_country = {
		# 	limit = {
		# 		CmtTriggerIsMarauder = yes
		# 		NOT = { graphical_culture = madd_01 }
		# 	}
		# 	set_graphical_culture = madd_01
		# 	## If is_designable Error: referring to a non-existent ship design
		# 	# if = { limit = { has_existing_ship_design = "NAME_Outrider" }
		# 	# 	log= "has_existing_ship_design NAME_Outrider"
		# 	# }
		# 	# if = { limit = { has_existing_ship_design = "marauder_corvette" }
		# 	# 	log= "has_existing_ship_design marauder_corvette"
		# 	# }
		# 	# add_global_ship_design = "NAME_Outrider"
		# 	# create_ship_design = { design = "NAME_Outrider" }
		# 	# add_ship_design = last_created_design
		# 	# # add_global_ship_design = "NAME_Lancer"
		# 	# create_ship_design = { design = "NAME_Lancer" }
		# 	# add_ship_design = last_created_design
		# 	# # add_global_ship_design = "NAME_Void_Champion"
		# 	# create_ship_design = { design = "NAME_Void_Champion" }
		# 	# add_ship_design = last_created_design
		# 	# # add_global_ship_design = "NAME_Ancestral_Glory"
		# 	# create_ship_design = { design = "NAME_Ancestral_Glory" }
		# 	# add_ship_design = last_created_design
		# }

		## TEST raiding_marauder stuck fix
		every_country = { # Find raiding_marauder (parent)
			limit = {
				is_country_type = dormant_marauders
				has_country_flag = raid_ongoing
			}
			country_event = { id = marauder.28 days = 8 }
		}
		# every_galaxy_fleet = {
		# 	limit = { NOT = { exists = owner } }
		# 	delete_fleet = this
		# }
		# Removed on 3.6.*
		# if = {
		# 	limit = {
		# 		has_global_flag = marauder_crisis_started
		# 		NOT = { has_global_flag = marauder_crisis_ongoing }
		# 		# OR = {
		# 		# 	mid_game_years_passed > 5
		# 		# 	has_global_flag = horde_triggered
		# 		# }
		# 	}
		# 	random_playable_country = {
		# 		limit = {
		# 			has_country_flag = new_khanate_flag
		# 			num_owned_planets < 3
		# 			any_owned_planet = { # Fix (Vanilla) splitted system can lead to unserveyable: https://forum.paradoxplaza.com/forum/threads/stellaris-great-khan-event-renders-system-unserveyable.1548356/
		# 				# OR = { NAND = { exists = space_owner space_owner = { is_same_empire = prevprev } }
		# 				solar_system = {
		# 					NAND = {
		# 						exists = space_owner
		# 						space_owner = { is_same_empire = prevprevprev }
		# 					}
		# 					any_system_colony = {
		# 						has_owner = yes
		# 						NOR = {
		# 							is_planet = prevprev
		# 							is_colonizable = yes
		# 							is_owned_by = prevprevprev
		# 						}
		# 					}
		# 				}
		# 			}
		# 		}
		# 		save_global_event_target_as = raider_khanate
		# 		country_event = { id = marauder.604 days = 1 } # Reverts to old ways.
		# 	}
		# }
	}
}

# Marauder Raid Announced
# Vanilla fix omit Marauders getting stuck (by FirePrince)
# Root = marauder_target
country_event = {
	id = marauder.101
	title = "marauder_diplo_header_4"
	desc = {
		text = marauder.101.1.desc
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_1 }
		}
	}
	desc = {
		text = marauder.101.2.desc
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_2 }
		}
	}
	desc = {
		text = marauder.101.3.desc
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_3 }
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:raiding_marauder
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = {
		exists = event_target:raiding_marauder
		event_target:raiding_marauder = {
			is_country_type = dormant_marauders
			any_relation = { is_same_value = root }
			NOT = {
				any_owned_fleet = { has_fleet_flag = raiding_fleet }
			}
		}
		NOT = { has_country_flag = recently_raided_or_threatened }
	}
	immediate = {
		# Determine tribute level
		if = {
			limit = { has_monthly_income = { resource = minerals value <= 50 } }
			set_country_flag = marauder_tribute_1@event_target:raiding_marauder
		}
		if = {
			limit = { has_monthly_income = { resource = minerals value >= 50 }
				has_monthly_income = { resource = minerals value <= 100 }
			}
			set_country_flag = marauder_tribute_2@event_target:raiding_marauder
		}
		if = {
			limit = { has_monthly_income = { resource = minerals value > 100 }
				has_monthly_income = { resource = minerals value <= 150 }
			}
			set_country_flag = marauder_tribute_3@event_target:raiding_marauder
		}
		if = {
			limit = { has_monthly_income = { resource = minerals value > 150 }
				has_monthly_income = { resource = minerals value <= 200 }
			}
			set_country_flag = marauder_tribute_4@event_target:raiding_marauder
		}
		if = {
			limit = { has_monthly_income = { resource = minerals value > 200 }
				has_monthly_income = { resource = minerals value <= 250 }
			}
			set_country_flag = marauder_tribute_5@event_target:raiding_marauder
		}
		if = {
			limit = { has_monthly_income = { resource = minerals value > 250 } }
			set_country_flag = marauder_tribute_6@event_target:raiding_marauder
		}
		set_timed_country_flag = { flag = recently_raided_or_threatened years = 5 }
		set_country_flag = raid_target_of@event_target:raiding_marauder
		set_country_flag = under_marauder_attack
		set_relation_flag = { who = event_target:raiding_marauder flag = current_target }
		save_event_target_as = marauder_target
		event_target:raiding_marauder = {
			get_marauder_raid_source = yes
			set_country_flag = raid_ongoing
			owner_species = { save_event_target_as = marauder_species }
		}
		create_country = {
			name = event_target:raiding_marauder
			type = marauder_raiders
			species = event_target:marauder_species
			flag = event_target:raiding_marauder
			effect = {
				save_event_target_as = marauder_raiding_country
				event_target:raiding_marauder = {
					switch = { trigger = has_country_flag
						marauder_1 = { prev = { set_country_flag = marauder_1 } }
						marauder_2 = { prev = { set_country_flag = marauder_2 } }
						marauder_3 = { prev = { set_country_flag = marauder_3 } }
					}
				}
				set_country_flag = raid_ongoing
				make_moderately_hostile = yes
			}
		}
		event_target:marauder_raiding_country = {
			every_country = { limit = { has_communications = event_target:raiding_marauder } establish_communications_no_message = prev }
			create_marauder_merc_admiral = yes
			event_target:raiding_marauder = {
				set_country_flag = parent_of@event_target:marauder_raiding_country
				set_faction_hostility = {
					target = event_target:marauder_raiding_country
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}
				## Compat. Realistic Pirates
				if = {
					limit = { has_global_flag = pirate_waves_active }
					set_pirates_difficulty = yes
				}
				create_fleet = {
					name = "NAME_Raiding_Fleet"
					effect = {
						set_owner = prev					# For ship names
						create_marauder_raiders = yes		# Needs prev for script vars
						set_location = event_target:raid_source
						set_fleet_stance = aggressive
						set_fleet_bombardment_stance = indiscriminate
						set_aggro_range_measure_from = self
						set_aggro_range = 150
						set_fleet_flag = raiding_fleet
					}
				}
			}
			set_faction_hostility = {
				target = root
				set_hostile = yes
				set_neutral = no
				set_friendly = no
			}
			last_created_fleet = {
				set_owner = prev	# Real owner
				assign_leader = last_created_leader
				closest_system = {
					limit = {
						has_owner = yes
						is_owned_by = root
						any_system_colony = { is_owned_by = root num_pops > 0 }
						# prev = { can_access_system = prev }
					}
					random_system_colony = {
						limit = { is_owned_by = root num_pops > 0 }
						save_event_target_as = raid_planet
					}
				}
				if = {
					limit = {
						exists = event_target:raid_planet
						can_access_system = event_target:raid_planet.solar_system
					}
					auto_move_to_planet = { target = event_target:raid_planet clear_auto_move_on_arrival = no }
				}
				else = { fleet_event = { id = marauder.29 } }
			}
		}
	}
	after = {
		hidden_effect = {
			if = {
				limit = {
					event_target:raiding_marauder = {
						has_country_flag = raid_cooldown
						NOT = { has_country_flag = raid_ongoing }
						exists = event_target:marauder_raiding_country
					}
				}
				remove_country_flag = raid_target_of@event_target:raiding_marauder
				remove_country_flag = under_marauder_attack
				remove_country_flag = marauder_tribute_1@event_target:raiding_marauder
				remove_country_flag = marauder_tribute_2@event_target:raiding_marauder
				remove_country_flag = marauder_tribute_3@event_target:raiding_marauder
				remove_country_flag = marauder_tribute_4@event_target:raiding_marauder
				remove_country_flag = marauder_tribute_5@event_target:raiding_marauder
				remove_country_flag = marauder_tribute_6@event_target:raiding_marauder
				remove_relation_flag = { who = event_target:raiding_marauder flag = current_target }
				remove_relation_flag = { who = event_target:raiding_marauder flag = current_hired_target }
				event_target:marauder_raiding_country = {
					event_target:raiding_marauder = { remove_country_flag = parent_of@prev }
					random_owned_fleet = {
						limit = { has_fleet_flag = raiding_fleet }
						delete_fleet = this
					}
					destroy_country = yes
				}
			}
		}
	}
	### Marauder 1
	option = {
		# Offer Energy tribute
		name = marauder.101.a
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_1 }
		}
		response_text = marauder.101.1.a.response
		allow = { determine_energy_tribute = yes }
		tribute_cost_energy = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Offer Mineral tribute
		name = marauder.101.b
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_1 }
		}
		response_text = marauder.101.1.a.response
		allow = { determine_mineral_tribute = yes }
		tribute_cost_minerals = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Offer Food tribute
		name = marauder.101.c
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_1 }
		}
		response_text = marauder.101.1.a.response
		allow = { determine_food_tribute = yes }
		tribute_cost_food = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Refuse
		name = marauder.101.d
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_1 }
		}
		response_text = marauder.101.1.b.response
		default_hide_option = yes
	}
	### Marauder 2
	option = {
		# Offer Energy tribute
		name = marauder.101.a
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_2 }
		}
		response_text = marauder.101.2.a.response
		allow = { determine_energy_tribute = yes }
		tribute_cost_energy = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Offer Mineral tribute
		name = marauder.101.b
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_2 }
		}
		response_text = marauder.101.2.a.response
		allow = { determine_mineral_tribute = yes }
		tribute_cost_minerals = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Offer Food tribute
		name = marauder.101.c
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_2 }
		}
		response_text = marauder.101.2.a.response
		allow = { determine_food_tribute = yes }
		tribute_cost_food = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Refuse
		name = marauder.101.d
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_2 }
		}
		response_text = marauder.101.2.b.response
		default_hide_option = yes
	}
	### Marauder 3
	option = {
		# Offer Energy tribute
		name = marauder.101.a
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_3 }
		}
		response_text = marauder.101.3.a.response
		allow = { determine_energy_tribute = yes }
		tribute_cost_energy = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Offer Mineral tribute
		name = marauder.101.b
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_3 }
		}
		response_text = marauder.101.3.a.response
		allow = { determine_mineral_tribute = yes }
		tribute_cost_minerals = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Offer Food tribute
		name = marauder.101.c
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_3 }
		}
		response_text = marauder.101.3.a.response
		allow = { determine_food_tribute = yes }
		tribute_cost_food = yes
		hidden_effect = {
			event_target:raiding_marauder = {
				remove_country_flag = raid_ongoing
				set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
			}
		}
	}
	option = {
		# Refuse
		name = marauder.101.d
		trigger = {
			event_target:raiding_marauder = { has_country_flag = marauder_3 }
		}
		response_text = marauder.101.3.b.response
		default_hide_option = yes
	}
}

# Raiders Hit Planet (HIDDEN - on_planet_bombarded)
# Vanilla Fixes: Fleets getting stuck (due FTL Inhibitors and planet owner change)
# From = Bombarder
planet_event = {
	id = marauder.103
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
	}
	trigger = {
		planet_devastation > 15
		exists = from
		from = { is_country_type = marauder_raiders }
		exists = owner
		owner = { is_default_or_fallen = yes }
		NOT = { has_planet_flag = planet_raided }
		any_country = {
			is_country_type = dormant_marauders
			has_country_flag = parent_of@from
		}
	}
	immediate = {
		from = {
			random_owned_fleet = {
				limit = {
					has_fleet_flag = raiding_fleet
					root = { any_fleet_in_orbit = { is_same_value = prevprev } }
				}
				save_event_target_as = raiding_fleet
				log="Save Marauder Raid Fleet on \\[Root.GetName]"
			}
		}
		if = {
			limit = {
				any_country = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@from
				}
			}
			random_country = {
				limit = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@from
				}
				save_event_target_as = marauder_country
				log="Save Marauder Country on \\[Root.GetName]"
			}
		}
		else = {
			log="Marauder Raiders on \\[Root.GetName] lost they origin system."
			from = { save_event_target_as = marauder_country }
		}

		### Check Target valid (Vanilla Fix)
		if = {
			limit = {
				OR = {
					owner = { NOT = { has_country_flag = under_marauder_attack } }
					# owner = { NOT = { is_hostile = from } }
					# owner = { has_relation_flag = { who = event_target:marauder_country flag = hired_fleet } }
					AND = {
						is_occupied_flag = yes
						exists = controller
						NOT = { is_controlled_by = owner }
						controller = {
							is_default_or_fallen = yes
							NOT = { has_country_flag = under_marauder_attack }
							# OR = {
							# 	has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
							# 	NOT = { is_hostile = from }
							# }
						}
					}
				}
			}
			# log="Invalid Marauder Raid Target \\[This.GetName]"
			## Break Attack immediately
			event_target:raiding_fleet = {
				remove_auto_move_target = yes
				clear_orders = yes
				clear_fleet_actions = this
				every_owned_ship = { set_disabled = yes }
				set_event_locked = yes
			}
			## Refresh Agreement
			if = {
				limit = {
					owner = {
						# from = { is_hostile = prev }
						is_hostile = from
						has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
					}
				}
				owner = { save_event_target_as = marauder_employer }
			}
			else_if = {
				limit = {
					is_occupied_flag = yes
					exists = controller
					NOT = { is_controlled_by = owner }
					controller = {
						is_default_or_fallen = yes
						OR = {
							has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
							is_friendly_to = from
						}
					}
				}
				controller = { save_event_target_as = marauder_employer }
			}
			# Set friendly
			if = {
				limit = {
					exists = event_target:marauder_employer
					from = { is_hostile = event_target:marauder_employer }
					has_global_flag = gf_great_khan_active
				}
				from = {
					country_event = { id = khan.308 scopes = { from = event_target:marauder_employer } }
				}
			}

			### Search New Target
			if = {
				limit = {
					OR = {
						owner = {
							NOR = {
								has_country_flag = under_marauder_attack
								has_country_flag = raid_target_of@event_target:marauder_country
								has_relation_flag = { who = event_target:marauder_country flag = current_hired_target }
							}
						}
						AND = {
							is_occupied_flag = yes
							exists = controller
							NOT = { is_controlled_by = owner }
							controller = {
								is_default_or_fallen = yes
								NOT = { has_country_flag = under_marauder_attack }
								OR = {
									is_friendly_to = from
									is_neutral_to = from
								}
							}
						}
					}
				}
				# log="Save New Marauder Raid Target Victim"
				random_country = {
					limit = {
						is_default_or_fallen = yes
						has_country_flag = under_marauder_attack
						has_country_flag = raid_target_of@event_target:marauder_country
						has_relation_flag = { who = event_target:marauder_country flag = current_hired_target }
					}
					save_event_target_as = raid_victim
				}
			}
			else_if = {
				limit = {
					is_occupied_flag = no
					NOT = { exists = event_target:raid_victim }
					OR = {
						NOT = { exists = event_target:marauder_employer }
						owner = {
							NOT = { is_same_empire = event_target:marauder_employer }
							has_country_flag = under_marauder_attack
						}
					}
				}
				# log="Save fallback Marauder1 Raid Target Victim"
				owner = { save_event_target_as = raid_victim }
			}
			if = { # Raid anyway
				limit = {
					is_occupied_flag = yes
					NOT = { exists = event_target:raid_victim }
					owner = {
						NOT = { has_country_flag = under_marauder_attack }
						OR = {
							is_friendly_to = from
							is_neutral_to = from
						}
					}
					OR = {
						NOT = { exists = event_target:marauder_employer }
						controller = {
							has_country_flag = under_marauder_attack
							NOT = { is_same_empire = event_target:marauder_employer }
						}
					}
				}
				# log="Save fallback Marauder2 Raid Target Victim"
				controller = { save_event_target_as = raid_victim }
				# Free planet
				if = {
					limit = { num_armies < 1 }
					set_controller = owner
					if = {
						limit = {
							solar_system = { exists = starbase }
							solar_system.starbase = { is_owned_by = root.controller }
						}
						solar_system.starbase = { set_owner = root.owner }
					}
				}
			}

			if = {
				limit = {
					exists = event_target:raid_victim
					exists = event_target:raiding_fleet
				}
				# log="Search New Marauder Raid Target Planet"
				solar_system = {
					closest_system = {
						limit = {
							any_system_colony = {
								is_owned_by = event_target:raid_victim
								is_occupied_flag = no
								NOT = { has_planet_flag = planet_raided }
								num_pops > 1
							}
							# event_target:raiding_fleet = { can_access_system = prev }
						}
						random_system_colony = {
							limit = {
								is_owned_by = event_target:raid_victim
								is_colony = yes
								is_occupied_flag = no
								NOT = { has_planet_flag = planet_raided }
								num_pops > 1
							}
							save_event_target_as = raid_planet
						}
						event_target:raiding_fleet = {
							# log="Found New Marauder Raid Target: \\[raid_planet.GetName]"
							set_event_locked = no
							# queue_actions = { wait = 2 }
							if = {
								limit = {
									exists = event_target:raid_planet
									can_access_system = event_target:raid_planet.solar_system
								}
								auto_move_to_planet = {
									target = event_target:raid_planet
									clear_auto_move_on_arrival = no
								}
							}
							else = {
								fleet_event = { id = marauder.29 scopes = { from = event_target:raid_victim } }
							}
						}
					}
				}
				# Nothing found, return home
				if = {
					limit = {
						exists = event_target:raiding_fleet
						NOT = { exists = event_target:raid_planet }
					}
					# log="No new Marauder Raid Target found, return home"
					event_target:raiding_fleet = {
						set_event_locked = no
						fleet_event = { id = marauder.110 days = 7 scopes = { from = event_target:raid_victim } }
					}
				}
				set_timed_planet_flag = { flag = planet_raided days = 9 }
				break = yes				# Target not valid anymore
			}
		}

		set_timed_planet_flag = { flag = planet_raided months = 20 }
		event_target:raiding_fleet = { # Return home
			set_event_locked = no
			fleet_event = { id = marauder.110 days = 20 scopes = { from = event_target:raid_victim } }
		}

		owner = { save_event_target_as = raid_victim }

		if = {
			limit = { owner = { is_gestalt = no } }
			random_list = {
				50 = {
					planet_event = { id = marauder.104 } # taking resources
				}
				50 = {
					modifier = { factor = 0 num_pops = 1 }
					planet_event = { id = marauder.105 } # taking Pops
				}
			}
		}
		else_if = {
			limit = {
				owner = {
					is_machine_empire = yes
					NOT = { has_valid_civic = civic_machine_servitor }
				}
			}
			planet_event = { id = marauder.106 }
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			planet_event = { id = marauder.107 }
		}
		else_if = {
			limit = { owner = { is_hive_empire = yes } }
			planet_event = { id = marauder.108 }
		}
	}
}

# Raiders Hit Planet (enslaving Pops)
planet_event = {
	id = marauder.105
	title = "marauder.104.name"
	desc = "marauder.105.desc"
	picture = GFX_evt_surrender
	show_sound = event_planetary_riot
	location = root
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = {
		is_colony = yes
		exists = owner
	}
	immediate = {
		if = {
			limit = { NOT = { exists = event_target:marauder_country } }
			if = {
				limit = {
					any_country = {
						is_country_type = dormant_marauders
						has_country_flag = parent_of@fromfrom
					}
				}
				random_country = {
					limit = {
						is_country_type = dormant_marauders
						has_country_flag = parent_of@fromfrom
					}
					save_event_target_as = marauder_country
				}
			}
			else_if = {
				limit = {
					any_country = { has_country_flag = parent_of@fromfrom }
				}
				random_country = {
					limit = { has_country_flag = parent_of@fromfrom }
					save_event_target_as = marauder_country
				}
			}
			else_if = {
				limit = {
					exists = fromfrom
					fromfrom = { is_scope_type = country }
				}
				fromfrom = { save_event_target_as = marauder_country }
			}
		}

		if = {
			limit = {
				num_species > 1
				NOT = { exists = event_target:marauder_species }
			}
			if = {
				limit = { exists = event_target:marauder_country }
				event_target:marauder_country.owner_species = { save_event_target_as = marauder_species }
			}
			else_if = {
				limit = { exists = fromfrom exists = fromfrom.species }
				fromfrom.species = { save_event_target_as = marauder_species }
			}
			# log="Marauder From.species exists \\[marauder_species.GetName]"
		} # else = { log="No Marauder Species fromfrom \\[fromfrom.GetName]" }

		owner = {
			set_variable = { which = destruction_amount value = 3 }
			if = {
				limit = { exists = event_target:marauder_country }
				switch = { trigger = has_country_flag
					marauder_tribute_1@event_target:marauder_country = { set_variable = { which = destruction_amount value = 1 } }
					marauder_tribute_2@event_target:marauder_country = { set_variable = { which = destruction_amount value = 2 } }
					marauder_tribute_3@event_target:marauder_country = { set_variable = { which = destruction_amount value = 3 } }
					marauder_tribute_4@event_target:marauder_country = { set_variable = { which = destruction_amount value = 4 } }
					marauder_tribute_5@event_target:marauder_country = { set_variable = { which = destruction_amount value = 5 } }
					marauder_tribute_6@event_target:marauder_country = { set_variable = { which = destruction_amount value = 6 } }
					# default = { set_variable = { which = destruction_amount value = 3 } }
				}
			}
		}
		while = {
			count = owner.destruction_amount
			limit = { num_pops > 1 }
			random_owned_pop = {
				limit = {
					is_robot_pop = no
					is_sapient = yes
				}
				weights = {
					base = 3
					modifier = { add = 2 OR = { is_pop_category = slave is_pop_category = purge } }
					modifier = { add = 2 is_unemployed = yes }
					modifier = { add = 3 exists = event_target:marauder_species NOT = { is_same_species = event_target:marauder_species } }
					modifier = { add = 1 NOT = { ideal_planet_class = prev } }
					# modifier = { add = 1 prev = { count_owned_pop = { limit = { is_same_species = prevprev } count > 5 } } }
					# modifier = { add = 2 species_can_be_necrophaged = no }
				}
				# unemploy_pop = yes
				kill_pop = yes
			}
		}
	}
	option = { name = marauder.105.a }
	after = {
		hidden_effect = {
			owner = { clear_variable = destruction_amount }
		}
	}
}

# Raiders Hit Planet (Servitor Machines)
planet_event = {
	id = marauder.107
	title = "marauder.104.name"
	desc = "marauder.107.desc"
	picture = GFX_evt_burning_settlement
	show_sound = event_planetary_riot
	location = root
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { NOT = { exists = event_target:marauder_country } }
			random_country = {
				limit = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@fromfrom
				}
				save_event_target_as = marauder_country
			}
		}
		owner = {
			set_variable = { which = destruction_amount value = 5 }
			if = {
				limit = { exists = event_target:marauder_country }
				switch = { trigger = has_country_flag
					marauder_tribute_1@event_target:marauder_country = { set_variable = { which = destruction_amount value = 3 } }
					marauder_tribute_2@event_target:marauder_country = { set_variable = { which = destruction_amount value = 4 } }
					marauder_tribute_3@event_target:marauder_country = { set_variable = { which = destruction_amount value = 5 } }
					marauder_tribute_4@event_target:marauder_country = { set_variable = { which = destruction_amount value = 6 } }
					marauder_tribute_5@event_target:marauder_country = { set_variable = { which = destruction_amount value = 7 } }
					marauder_tribute_6@event_target:marauder_country = { set_variable = { which = destruction_amount value = 8 } }
					# default = { set_variable = { which = destruction_amount value = 5 } }
				}
			}
		}
	}
	option = {
		name = marauder.107.a
		while = {
			count = owner.destruction_amount
			limit = { num_pops > 1 }
			random_owned_pop = {
				limit = {
					is_robot_pop = no
					is_sapient = yes
				}
				weights = {
					base = 3
					modifier = { add = 1 OR = { is_pop_category = slave is_pop_category = purge } }
					modifier = { add = 1 is_unemployed = yes }
					# modifier = { add = -2 is_same_species = fromfrom }
				}
				# unemploy_pop = yes
				kill_pop = yes
			}
		}
	}
	after = { hidden_effect = { owner = { clear_variable = destruction_amount } } }
}

# AI hires Raiders (on_monthly_pulse)
# Vanilla fix omit Marauders getting stuck (by FirePrince)
event = {
	id = marauder.150
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		years_passed >= 50
		any_playable_country = {
			is_ai = yes
			is_homicidal = no
			any_rival_country = {
				NOR = {
					has_country_flag = under_marauder_attack
					has_country_flag = target_of_hired_ai_raid
				}
			}
			resource_stockpile_compare = { resource = energy value >= 5000 }
			any_relation = {
				is_country_type = dormant_marauders
				has_communications = prev
				NOR = {
					has_country_flag = raid_ongoing
					has_country_flag = raid_cooldown
				}
			}
		}
	}
	immediate = {
		# Define hired_marauders for use in weights.
		random_playable_country = {
			limit = {
				is_ai = yes
				is_homicidal = no
				any_rival_country = {
					NOR = {
						has_country_flag = under_marauder_attack
						has_country_flag = target_of_hired_ai_raid
					}
				}
				resource_stockpile_compare = { resource = energy value >= 5000 }
				any_relation = {
					is_country_type = dormant_marauders
					has_communications = prev
					NOR = {
						has_country_flag = raid_ongoing
						has_country_flag = raid_cooldown
					}
				}
			}
			save_event_target_as = hired_marauders
		}
		random_list = {
			3 = {
				modifier = {
					factor = 0
					event_target:hired_marauders = {
						OR = {
							has_ai_personality = honorbound_warriors
							has_ai_personality = xenophobic_isolationists
						}
					}
				}
				modifier = {
					factor = 0.6
					event_target:hired_marauders = { has_ai_personality = peaceful_traders }
				}
				# Moved out of random_list
				# random_playable_country = {
				#	limit = {
				#		is_ai = yes
				#		is_homicidal = no
				#		any_relation = {
				#			prev = { is_rival = prev }
				#		}
				#		resource_stockpile_compare = { resource = energy value >= 5000 }
				#	}
				#	save_event_target_as = hired_marauders
				event_target:hired_marauders = {
					# add_resource = { energy = @raidcost } later per var
					random_rival_country = {
						limit = {
							NOR = {
								has_country_flag = under_marauder_attack
								has_country_flag = target_of_hired_ai_raid
							}
						}
						save_event_target_as = marauder_target
						set_timed_country_flag = { flag = target_of_hired_ai_raid years = 20 }
					}
					random_relation = {
						limit = {
							is_country_type = dormant_marauders
							NOR = {
								has_country_flag = raid_ongoing
								has_country_flag = raid_cooldown
							}
						}
						save_event_target_as = raiding_marauder
					}
				}
				event_target:raiding_marauder = {
					get_marauder_raid_source = yes
					set_country_flag = raid_ongoing
					owner_species = { save_event_target_as = marauder_species }
				}
				create_country = {
					name = event_target:raiding_marauder
					type = marauder_raiders
					species = event_target:marauder_species
					flag = event_target:raiding_marauder
					effect = {
						save_event_target_as = marauder_raiding_country
						make_moderately_hostile = yes
						event_target:raiding_marauder = {
							switch = { trigger = has_country_flag
								marauder_1 = { prev = { set_country_flag = marauder_1 } }
								marauder_2 = { prev = { set_country_flag = marauder_2 } }
								marauder_3 = { prev = { set_country_flag = marauder_3 } }
							}
							establish_communications_no_message = prev
						}
						set_country_flag = raid_ongoing
						set_faction_hostility = {
							target = event_target:raiding_marauder
							set_hostile = no
							set_neutral = no
							set_friendly = yes
						}
					}
				}
				event_target:marauder_raiding_country = {
					every_country = { limit = { has_communications = event_target:raiding_marauder } establish_communications_no_message = prev }
					create_marauder_merc_admiral = yes
					event_target:raiding_marauder = {
						set_country_flag = parent_of@prev
						set_faction_hostility = {
							target = prev
							set_hostile = no
							set_neutral = no
							set_friendly = yes
						}
						## Dynamic raid costs TODO needs update each effect.
						if = {
							limit = { has_global_flag = pirate_waves_active }
							set_pirates_difficulty = yes
							set_variable = { which = raidcost value = 1.5 }
							change_variable = { which = raidcost value = pirates_factor }
							multiply_variable = { which = raidcost value = 0.5 } # Take only 50% weight
							multiply_variable = { which = raidcost value = pirates_factor } # As it is only half for marauders.
							# Price depending on difficulty?
							switch = { trigger = has_country_flag
								pirate_waves_very_easy	= { multiply_variable = { which = raidcost value = 0.5 } }
								pirate_waves_easy		= { multiply_variable = { which = raidcost value = 0.75 } }
								pirate_waves_hard		= { multiply_variable = { which = raidcost value = 1.25 } }
								pirate_waves_very_hard	= { multiply_variable = { which = raidcost value = 1.5 } }
								pirate_waves_insane		= { multiply_variable = { which = raidcost value = 2 } }
							}
							round_variable_to_closest = { which = raidcost value = 0.01 }
							# round_variable = raidcost
						}
						else = {
							set_variable = { which = raidcost value = 1 }
						}
						create_fleet = {
							name = "NAME_Raiding_Fleet"
							effect = {
								set_owner = prev						# For ship names
								create_marauder_raiders = yes			# Needs prev for script vars
								set_location = event_target:raid_source
								set_fleet_stance = aggressive
								set_fleet_bombardment_stance = indiscriminate
								set_aggro_range_measure_from = self
								set_aggro_range = 150
								set_fleet_flag = hired_raiding_fleet
								set_fleet_flag = raiding_fleet
								set_event_locked = yes
							}
						}
					}
					set_faction_hostility = {
						target = event_target:marauder_target
						set_hostile = yes
						set_neutral = no
						set_friendly = no
					}
					last_created_fleet = {
						set_owner = prev	# Real owner
						# assign_leader = last_created_leader		# FIXME sometimes fail!?
						set_leader = last_created_leader
						closest_system = {
							use_bypasses = yes
							limit = {
								has_owner = yes
								is_owned_by = event_target:marauder_target
								any_system_colony = {
									is_owned_by = event_target:marauder_target
									num_pops > 0
								}
								# prev = { can_access_system = prev }
							}
							random_system_colony = {
								limit = {
									is_owned_by = event_target:marauder_target
									num_pops > 0
								}
								save_event_target_as = raid_planet
							}
						}
						set_event_locked = no
						if = {
							limit = {
								exists = event_target:raid_planet
								can_access_system = event_target:raid_planet.solar_system
							}
							auto_move_to_planet = { target = event_target:raid_planet clear_auto_move_on_arrival = no }
						}
						else = {
							fleet_event = { id = marauder.29 scopes = { from = event_target:marauder_target } }
						}
					}
					event_target:raiding_marauder = {
						event_target:hired_marauders = {
							add_resource = { energy = @raidcost mult = prev.raidcost }
						}
						log="raidcost \\[This.raidcost]"
						clear_variable = raidcost
					}
				}
				event_target:marauder_target = {
					set_country_flag = raid_target_of@event_target:raiding_marauder
					set_country_flag = under_marauder_attack
					set_relation_flag = { who = event_target:raiding_marauder flag = current_hired_target }
					if = {
						limit = { has_communications = event_target:raiding_marauder }
						country_event = { id = marauder.120 days = 1 random = 30 }
					}
					else = {
						country_event = { id = marauder.123 days = 1 random = 30 }
					}
				}
			}
			110 = { }
		}
	}
}

# (The Great Khan Expanded)
# Helper event only - Create global Rally Point event_targets.
country_event = {
	id = marauder.499
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		### Rally Point of Fleets 1/3: Set Event Targets; Set Owner Species to Target
		if = {
			limit = { exists = event_target:marauder_country_1 }
			event_target:marauder_country_1 = {
				if = {
					limit = { any_system_within_border = { has_star_flag = marauder_capital_1 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_1 }
						if = {
							limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint1
							}
						}
						else = {	## Backup Code: raid_source NOT Found in Capital System
							random_system_planet = {
								limit = { is_star = no }
								weights = {
									base = 1
									modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint1
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint1 - 1 Processed"
						}
					}
				}
				else = {	## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_star = no }
						weights = {
							base = 1
							# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint1
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint1 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_1
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_1
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
		if = {
			limit = { exists = event_target:marauder_country_2 }
			event_target:marauder_country_2 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder2 }
				if = {
					limit = { any_system_within_border = { has_star_flag = marauder_capital_2 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_2 }
						if = {
							limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint2
							}
						}
						else = {	## Backup Code: raid_source NOT found in Capital System
							random_system_planet = {
								limit = { is_star = no }
								weights = {
									base = 1
									modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint2
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint2 - 1 Processed"
						}
					}
				}
				else = {
					## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_star = no }
						weights = {
							base = 1
							# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint2
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint2 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_2
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_2
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
		if = {
			limit = { exists = event_target:marauder_country_3 }
			event_target:marauder_country_3 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder3 }
				if = {
					limit = { any_system_within_border = { has_star_flag = marauder_capital_3 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_3 }
						if = {
							limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint3
							}
						}
						else = {	## Backup Code: raid_source NOT Found in Capital System
							random_system_planet = {
								limit = { is_star = no }
								weights = {
									base = 1
									modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint3
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint3 - 1 Processed"
						}
					}
				}
				else = {	## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_star = no }
						weights = {
							base = 1
							# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint3
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint3 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_3
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_3
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
	}
}

#####################################
### Main Effect of Khan Awakening ###
#####################################
################
# CRISIS BEGINS (MTTH 1 year)
################
country_event = {
	id = marauder.500
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			num_marauder_empires_to_spawn > 0
			has_global_flag = horde_triggered
			has_global_flag = pirate_waves_active
			event_target:global_event_country = { has_country_flag = outer_bulwark_inactive }
		}
		# is_crises_allowed = yes
		NOR = {
			has_global_flag = great_khan_wins
			has_global_flag = war_in_heaven_started
			CmtTriggerNowInKhanCrisis = yes
			crisis_happened_and_defeated = yes
		}
		CmtTriggerHasPotentialKhanAwaking = yes
	}
	# trigger = {
	# 	OR = {
	# 		AND = {
	# 			mid_game_years_passed > 1
	# 			end_game_years_passed < 0
	# 		}
	# 		has_global_flag = horde_triggered
	# 	}
	# 	is_country_type = dormant_marauders
	# 	NOT = { has_global_flag = marauder_crisis_started }
	# 	OR = {
	# 		AND = {
	# 			has_country_flag = marauder_1
	# 			any_system_within_border = { has_star_flag = marauder_capital_1 }
	# 		}
	# 		AND = {
	# 			has_country_flag = marauder_2
	# 			any_system_within_border = { has_star_flag = marauder_capital_2 }
	# 		}
	# 		AND = {
	# 			has_country_flag = marauder_3
	# 			any_system_within_border = { has_star_flag = marauder_capital_3 }
	# 		}
	# 	}
	# }
	immediate = {
		if = {
			limit = {
				OR = {
					exists = event_target:raider_khanate
					has_global_flag = marauder_crisis_started
				}
			}
			clear_global_event_target = raider_khanate
			every_playable_country = {
				limit = { has_country_flag = rebelling_satrapy }
				remove_country_flag = rebelling_satrapy
			}
		}
		if = {
			limit = { has_country_flag = marauder600_happened }
			remove_country_flag = marauder600_happened
		}
		if = {
			limit = { has_country_flag = khan_dead_event_fine }
			remove_country_flag = khan_dead_event_fine
		}
		if = {
			limit = { has_country_flag = great_khan_defeated_once }
			remove_country_flag = great_khan_defeated_once
		}
		if = {
			limit = { has_global_flag = great_khan_dead }
			remove_global_flag = great_khan_dead
			remove_global_flag = great_khan_announcement
		}
		if = {
			limit = { exists = event_target:marauder_rally_point }
			clear_global_event_target = marauder_rally_point
		}

		set_global_flag = marauder_crisis_started
		set_global_flag = marauder_crisis_ongoing
		save_global_event_target_as = raider_khanate

		if = {
			limit = { NOT = { exists = event_target:marauder_country_1 } }
			random_country = { limit = { has_country_flag = marauder_1 }
				save_global_event_target_as = marauder_country_1
			}
		}
		if = {
			limit = { num_marauder_empires_to_spawn > 1 NOT = { exists = event_target:marauder_country_2 } }
			random_country = {
				limit = { has_country_flag = marauder_2 }
				save_global_event_target_as = marauder_country_2
			}
		}
		if = {
			limit = { num_marauder_empires_to_spawn > 2 NOT = { exists = event_target:marauder_country_3 } }
			random_country = {
				limit = { has_country_flag = marauder_3 }
				save_global_event_target_as = marauder_country_3
			}
		}

		# Create global Rally Point event_targets (must be called before unification).
		country_event = { id = marauder.499 days = -1 } # TODO may effect?

		### Rally Point of Fleets 2/3: Set Event Targets, Flags
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
			event_target:CmtTargetMarauderRallyPoint1 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
			event_target:CmtTargetMarauderRallyPoint2 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
			event_target:CmtTargetMarauderRallyPoint3 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}

		### Unify All Marauders if Great Khan.
		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } } }
			save_event_target_as = new_khanate
			every_country = {
				limit = {
					is_country_type = dormant_marauders
					NOT = { is_same_empire = root }
				}
				establish_communications_no_message = root
				set_faction_hostility = {
					target = root
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}
				switch = { trigger = has_country_flag
					marauder_1 = { save_global_event_target_as = marauder_country_1 }
					marauder_2 = { save_global_event_target_as = marauder_country_2 }
					marauder_3 = { save_global_event_target_as = marauder_country_3 }
				}
				country_event = { id = marauder.609 days = -1 } # Fully handover
				# destroy_country = yes needed for species
			}
		}

		### Rally Point of Fleets 3/3: Backup Code
		if = {
			limit = { NOT = { exists = event_target:marauder_rally_point } }
			random_planet_within_border = {
				limit = { is_star = no }
				weights = { base = 1 modifier = { add = 2 is_a_planet = yes } } # possible inconsisent due other mods
				save_global_event_target_as = marauder_rally_point
				set_planet_flag = marauder_rally_point
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				log = "Backup Code for marauder_rally_point Processed on \\[This.GetName] at \\[This.System.GetName]"
			}
		}

		# Take Pirates/Mercenaries too (especially stations)
		every_system_within_border = {
			every_fleet_in_system = {
				limit = {
					exists = owner
					owner = {
						NOT = { is_same_empire = root }
						is_pirate = yes
					}
				}
				set_owner = root
			}
		}

		### Only for 2nd awakening.
		if = {
			limit = { has_origin = "origin_khan_successor" }
			if = {
				limit = { has_federation = yes }
				leave_alliance = {
					override_requirements = yes
					apply_opinion_penalty = yes
				}
			}
			if = {
				limit = { is_galactic_community_member = yes }
				remove_from_galactic_community = yes
			}
			if = {
				limit = { is_subject = yes }
				set_subject_of = { who = none }
			}
			else_if = {
				limit = { is_overlord = yes }
				every_subject = {
					limit = {
						is_default_or_fallen = yes
						NOT = { is_at_war_with = overlord }
					}
					set_subject_of = { who = root preset = preset_satrapy }
				}
			}
		}
		else = {
			species = {
				modify_species = { add_trait = trait_conformists }
			}
		}

		### Save old values
		store_country_backup_data = {
			flag = yes
			room = yes
			name = yes
			ethics = yes
			government = yes
		}

		### Modify Country
		change_country_flag = {
			icon = { category = "pirate" file = "flag_pirate_11.dds" }
			background = { category = "backgrounds" file = "00_solid.dds" }
			colors = { "red" "red" "null" "null" }
		}

		if = {
			limit = { is_militarist = no }
			# limit = { is_pacifist = yes }
			shift_ethic = ethic_militarist
			# shift_ethic = "ethic_fanatic_militarist"
		}
		if = {
			limit = { has_ethic = ethic_xenophobe }
			country_remove_ethic = ethic_xenophobe
		}
		if = {
			limit = { is_spiritualist = no }
			shift_ethic = ethic_spiritualist
		}
		if = {
			limit = { is_egalitarian = yes }
			if = {
				limit = { has_ethic = ethic_egalitarian }
				country_remove_ethic = ethic_egalitarian
			}
			else = { country_remove_ethic = ethic_fanatic_egalitarian }
			# shift_ethic = ethic_fanatic_spiritualist
			country_add_ethic = ethic_authoritarian
			# shift_ethic = ethic_fanatic_authoritarian
		}

		if = {
			limit = { NOT = { has_authority = auth_dictatorial } }
			if = {
				limit = { is_authoritarian = no }
				shift_ethic = ethic_fanatic_authoritarian
			}
			change_government = {
				authority = auth_dictatorial
				cooldown = no
				remove_invalid_civics = yes
			}
		}

		if = {
			limit = { is_ai = no host_has_dlc = Apocalypse }
			# if = { ### NSC SUPPORT
			# 	limit = { has_global_flag = has_nsc_active }
			# 	if = {
			# 		limit = {
			# 			NOT = {
			# 				# merg_is_default_empire = yes
			# 				any_playable_country = { is_same_empire = root }
			# 			}
			# 		}
			# 		set_country_type = default
			# 	}
			# 	set_origin = "origin_nsc_freebooter"
			# 	if = { limit = { is_megacorp = yes }
			# 		force_add_civic = nsc_freebooter_civic_freebooter_trait_change_corp
			# 	}
			# 	else = { force_add_civic = nsc_freebooter_civic_freebooter_trait_change }
			# 	# force_add_civic = nsc_freebooter_civic_great_khans_vision later
			# } else = {
			force_add_civic = civic_slaver_guilds
			force_add_civic = civic_barbaric_despoilers
		}
		else = {
			set_country_type = awakened_marauders
			set_graphical_culture = madd_01
			# force_add_civic = civic_warrior_culture
			# force_add_civic = civic_slaver_guilds
			force_add_civic = civic_barbaric_despoilers
			force_add_civic = civic_fanatic_purifiers
		}

		force_add_civic = civic_great_khans_vision
		force_add_civic = civic_shared_burden

		add_resource = {
			energy	=	20000
			alloys	=	12000
			minerals =	8000
			unity	=	200000
		}
		# Only to be sure
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_autocannons_1 }
		give_tech_no_error_effect = { MESSAGE = no TECH = tech_autocannons_2 }

		set_ai_personality = hegemonic_imperialists
		create_ship_design = { design = "NAME_Pirate_Transport" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Clan_Builder" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Outrider" }
		add_ship_design = last_created_design
		# If not dormant origin
		if = {
			limit = { NOT = { has_existing_ship_design = starbase_marauder } }
			create_ship_design = { design = "NAME_Marauder_Starbase" }
			add_ship_design = last_created_design
		}
		if = {
			limit = { NOT = { has_tradition = tr_harmony_adopt } }
			add_tradition = tr_harmony_adopt
			add_tradition = tr_harmony_the_greater_good
			add_tradition = tr_harmony_mind_and_body
			add_tradition = tr_harmony_kinship
			add_tradition = tr_harmony_utopian_dream
			add_tradition = tr_harmony_harmonious_directives
			add_tradition = tr_harmony_finish
		}

		### Ruler Khan
		create_leader = {
			name = random
			class = admiral
			gender = male
			species = owner_main_species
			skill = 10
			event_leader = yes
			can_manually_change_location = no
			can_see_in_list = no
			leader_age_min = 21
			leader_age_max = 34 			# Traits can add to age so start it low
			# traits = {
			# 	# trait = subclass_admiral_strategist
			# 	# trait = leader_trait_fleet_organizer
			# 	# trait = leader_trait_eager
			# }
			randomize_traits = no
			traits = {
				trait = leader_trait_ruler_great_khan
				trait = leader_trait_chosen
				trait = leader_trait_master_gunner
				trait = subclass_admiral_tactician
				trait = leader_trait_gunship_specialization_3
				trait = leader_trait_wrecker_3
				trait = leader_trait_reckless_2
				trait = leader_trait_artillerist_3
				trait = leader_trait_demolisher_3
			}
		}

		if = { ## Compat. Khorgis Khan: Scourge of the Stars
			limit = { is_species_class = GC_CORGI }
			set_name = "NAME_KHORGI_KHAN"
			room_name_override = "khorgis_khan_1_room" # should work with 3.8
			last_created_leader = { set_name = "NAME_Khorgis_Khan" }
		}
		# else = {
		# 	set_name = random
			# room_name_override = "ethic_spaceship_room" # should work with 3.8
		# }

		last_created_leader = {
			root = { assign_leader = prev }

			# if = { ### NSC SUPPORT
			# 	limit = { has_global_flag = has_nsc_active }
			# 	add_trait_no_notify = nsc_freebooter_leader_trait_ruler_great_khan
			# } else = {
			# add_trait_no_notify = leader_trait_ruler_great_khan
			# add_trait_no_notify = leader_trait_chosen
			# add_trait_no_notify = subclass_admiral_strategist # councilor yes
			# Only really applicable destiny unfortunately
			add_trait_no_notify = leader_trait_armorer
			add_trait_no_notify = leader_trait_gale_speed_3
			add_trait_no_notify = leader_trait_border_guard_3
			add_trait_no_notify = leader_trait_crew_trainer_3
			add_skill = 2
			if = {
				limit = { NOT = { has_trait = leader_trait_fleet_organizer } }
				add_trait_no_notify = leader_trait_fleet_organizer
			}
			set_leader_flag = great_khan
			save_global_event_target_as = great_khan_ruler
			recruitable = no
		}

		### Lifespan, Remaining Live of Khan.
		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_1a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_1a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_1c random = @CmtConstKhanLifespan_1d }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_2a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_2a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_2c random = @CmtConstKhanLifespan_2d }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_4a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_4a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_4c random = @CmtConstKhanLifespan_4d }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_5a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_5a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_5c random = @CmtConstKhanLifespan_5d }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			set_global_flag = khan_no_die
			set_country_flag = CmtFlagKhanNoDieCountry
		}
		else = {
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_3a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_3a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_3c random = @CmtConstKhanLifespan_3d }
		}
		# Legacy CmtEffectTransferKhanRemainingLive = yes
		event_target:CmtGlobalVar = {
			if = {
				limit = { check_variable = { which = CmtVarKhanResurgence value < -0.5 } }
				root = { set_variable = { which = CmtVarKhanRemainingLive value = -1 } }
			}
			else = {
				root = { set_variable = { which = CmtVarKhanRemainingLive value = prev.CmtVarKhanResurgence } }
			}
		}

		### Admiral Khan
		if = {
			limit = { is_ai = yes }
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 10
				event_leader = yes
				can_manually_change_location = no
				can_see_in_list = no
				randomize_traits = no
				# traits are cleared only (vanilla bug?)
				# traits = {
				# 	0 = leader_trait_great_khan
				# 	0 = leader_trait_chosen
				# }
			}
		}
		# else_if = { ### NSC SUPPORT
		# 	limit = { has_global_flag = has_nsc_active }
		# 	clone_leader = {
		# 		target = ruler
		# 		class = admiral
		# 		traits = { trait = nsc_freebooter_admiral_trait_great_khan }
		# 		skill = 7
		# 	}
		# }
		else = {
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 6
				event_leader = yes
				can_manually_change_location = no
				can_see_in_list = yes
				randomize_traits = no
				# traits are cleared only (vanilla bug?)
				# traits = {
				# 	0 = leader_trait_great_khan
				# 	0 = leader_trait_chosen
				# }
			}
		}
		last_created_leader = {
			remove_trait = leader_trait_ruler_great_khan
			set_leader_flag = great_khan
			set_leader_flag = legendary_leader
			save_global_event_target_as = great_khan
			recruitable = no
			add_trait_no_notify = leader_trait_great_khan
			add_trait_no_notify = leader_trait_chosen
			add_trait_no_notify = subclass_admiral_aggressor # councilor no
			add_trait_no_notify = subclass_admiral_strategist
			add_trait_no_notify = leader_trait_armada_logistician_3
			if = {
				limit = { owner = { has_country_flag = marauder_1 } }
				add_trait_no_notify = leader_trait_master_gunner
			}
			if = {
				limit = { owner = { has_country_flag = marauder_2 } }
				add_trait_no_notify = leader_trait_demolisher_destiny
			}
			if = {
				limit = { owner = { has_country_flag = marauder_3 } }
				add_trait_no_notify = leader_trait_destiny_engineer
			}
			random_list = {
				1 = { add_trait_no_notify = leader_trait_annihilator_3 add_trait_no_notify = leader_trait_artillerist_3 add_trait_no_notify = leader_trait_demolisher_3 }
				1 = { add_trait_no_notify = leader_trait_wrecker_3 add_trait_no_notify = leader_trait_artillerist_3 add_trait_no_notify = leader_trait_demolisher_3 }
				1 = { add_trait_no_notify = leader_trait_wrecker_3 add_trait_no_notify = leader_trait_annihilator_3 add_trait_no_notify = leader_trait_demolisher_3 }
				1 = { add_trait_no_notify = leader_trait_wrecker_3 add_trait_no_notify = leader_trait_annihilator_3 add_trait_no_notify = leader_trait_artillerist_3 }
			}
			if = {
				limit = { has_paragon_dlc = yes }
				add_trait_no_notify = trait_ruler_logistic_understanding_2
			}
			else_if = {
				limit = { NOT = { has_trait = leader_trait_fleet_logistician } }
				add_trait_no_notify = leader_trait_fleet_logistician
			}
			if = {
				limit = { NOT = { has_trait = leader_trait_fleet_organizer } }
				add_trait_no_notify = leader_trait_fleet_organizer
			}
		}
		owner_species = { save_event_target_as = marauder_species }

		### Create Fleets
		event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_Khan1stFleet = yes }
		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } } }
			every_planet_within_border = {
				limit = { has_planet_flag = CmtFlagMarauderExpRallyPoint }
				CmtEffectCreateAdmiralty_KhanStarterPack = yes
			}
		}
		else = {
			event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanStarterPack = yes }
		}

		### Compat. replace hack for CM.
		event_target:great_khan.fleet = {
			create_ship = {
				design = "NAME_JuukTidir"
				graphical_culture = "npf_01_dirty"
				prefix = no
				# upgradable = no
			}
			random_owned_ship = {
				limit = { is_ship_size = marauder_galleon }
				delete_ship = this
			}
		}

		## Reinforcement cycle
		country_event = { id = marauder.520 days = 210 }
		set_variable = { which = CmtVarKhanReinforcementCounter value = 10 }
		set_country_flag = use_default_ships

		if = {
			limit = { is_ai = yes }
			## Mercenaries Join
			country_event = { id = marauder.78 days = 20 }
			### Should not attack: the Khan is not that bad!
			make_moderately_hostile = yes
			# Addition to make_moderately_hostile
			every_country = {
				limit = {
					merg_is_fallen_empire = yes
					OR = {
						is_hostile = prev
						prev = { is_hostile = prev }
					}
				}
				establish_communications_no_message = prev
				root = {
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = yes
						set_friendly = no
					}
				}
			}
		}
		else = {
			# Should not attack Enclaves
			every_country = {
				limit = {
					OR = {
						is_country_type = enclave
						is_country_type = enclave_mercenary
					}
				}
				root = {
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = no
						set_friendly = yes
					}
				}
			}
		}

		### Notifications
		if = {
			limit = { has_country_flag = CmtFlagKhanVengeanceCountry }
			every_playable_country = {
				establish_communications_no_message = root
				country_event = { id = marauder.526 }
				observer_event = { id = observer.18 }
			}
		}
		else = {
			every_playable_country = {
				establish_communications_no_message = root
				country_event = { id = marauder.501 }
				observer_event = { id = observer.13 }
			}
		}

		### Mercenaries Defect
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_1
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint1.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint1.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder1 = yes }
				set_country_flag = CmtFlagHiringMarauder1
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_2
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint2.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint2.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder2 = yes }
				set_country_flag = CmtFlagHiringMarauder2
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_3
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint3.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint3.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder3 = yes }
				set_country_flag = CmtFlagHiringMarauder3
			}
		}
		every_playable_country = {
			limit = {
				OR = {
					has_country_flag = CmtFlagHiringMarauder1
					has_country_flag = CmtFlagHiringMarauder2
					has_country_flag = CmtFlagHiringMarauder3
				}
			}
			country_event = { id = marauder.77 days = 20 }
		}

		if = {
			limit = { exists = event_target:ratling_country }
			event_target:ratling_country = {
				set_variable = { which = "planets_lost_to_marauder" value = 15 }
				prev = {
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = yes
					}
				}
			}
		}
		set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }

		# random_neighbor_country = {
		# 	limit = {
		# 		merg_is_default_empire = yes
		# 		NOR = {
		# 			is_at_war_with = prev # Is needed for some kind of alliance.
		# 			is_same_empire = prev
		# 		}
		# 	}
		# 	# set_faction_hostility = {
		# 	# 	target = root
		# 	# 	set_hostile = yes
		# 	# }
		# 	root = {
		# 		declare_war = {
		# 			target = prev
		# 			name = "NAME_Expansion"
		# 			attacker_war_goal = "wg_great_expansion"
		# 		}
		# 		# set_faction_hostility = {
		# 		# 	target = prev
		# 		# 	set_hostile = yes
		# 		# }
		# 		add_opinion_modifier = {
		# 			modifier = opinion_first_contact_war
		# 			who = prev
		# 		}
		# 	}
		# 	if = {
		# 		limit = { has_origin = "origin_khan_successor" }
		# 		change_variable = { which = "planets_lost_to_marauder" value = 3 }
		# 	}
		# }
		# country_event = { id = khan.529 days = 360 } # Drums of War init
	}
}

############################
### Standard War Process ###
############################

### Horde Conquers Planet
# This = country, leader attacker
# From = country, planet owner
# fromfrom = planet
country_event = {
	id = marauder.503
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		exists = from
		OR = {
			CmtTriggerIsKhanCountry = yes
			AND = { # Khan Subject
				is_subject_of_khan = yes
				is_ai = yes
				NOT = { has_country_flag = rebellion_cooldown }
				exists = from
				from = {
					is_subject_of_khan = no
					NOT = { is_country_type = awakened_marauders }
				}
			}
		}
		from = { merg_is_default_empire = yes }
	}

	immediate = {
		from = {
			change_variable = { which = "planets_lost_to_marauder" value = 1 }
			if = {
				limit = { prev = { can_copy_random_tech_from = { who = prev } } }
				prev = { copy_random_tech_from = { who = prev } }
			}
			if = {
				limit = { from.solar_system = { is_capital_system = yes } }
				change_variable = { which = "planets_lost_to_marauder" value = 1 }
				if = {
					limit = { prev = { can_copy_random_tech_from = { who = prev } } }
					prev = { copy_random_tech_from = { who = prev } }
				}
				if = {
					limit = { from = { is_capital = yes } }
					change_variable = { which = "planets_lost_to_marauder" value = 3 }
					if = {
						limit = { prev = { can_copy_random_tech_from = { who = prev } } }
						prev = { copy_random_tech_from = { who = prev } }
					}
				}
			}

			set_country_flag = former_owner@root.fromfrom

			from = {
				save_event_target_as = conquered_planet
				prev = {
					if = {
						limit = { NOT = { has_active_event = { marauder.504 } } }
						country_event = { id = marauder.504 days = 1 } # Notify + Hack
					}
				}

				### Create Defense Armies (for some job reasons common armies get deleted)
				set_variable = { which = CmtVarTemp value = trigger:num_pops }
				multiply_variable = { which = CmtVarTemp value = 0.25 } # ~25%
				ceiling_variable = CmtVarTemp

				while = {
					count = CmtVarTemp # 6
					limit = { num_pops > 4 }
					random_owned_pop = {
						limit = {
							is_robot_pop = no
							is_sapient = yes
							NOT = { is_same_species = root.species }
						}
						weights = {
							base = 5
							# modifier = { add = 1 OR = { is_pop_category = slave is_pop_category = purge } }
							modifier = { add = 1 is_unemployed = yes }
							modifier = { add = 1 NOT = { ideal_planet_class = prev } }
							modifier = { add = 3 species = { species_can_be_necrophaged = no } }
							modifier = { add = 2
								OR = { pop_has_trait = trait_lithoid is_species_class = PLANT is_species_class = FUN }
							}
							modifier = { factor = 2
								OR = {
									pop_has_trait = "trait_pc_habitat_preference"
									pop_has_trait = "trait_extremely_adaptive"
									pop_has_trait = "trait_rapid_breeders"
									pop_has_trait = "trait_nomadic"
								}
							}
							# modifier = { add = 1 prev = { count_owned_pop = { limit = { is_same_species = prevprev.species } count < 4 } } }
						}
						# unemploy_pop = yes
						kill_pop = yes
					}
				}

				if = { limit = { num_pops > 20 } # additional
					prev = { change_variable = { which = "planets_lost_to_marauder" value = 1 } }
				}

				### Create Marauder Pops
				planet_event = { id = marauder.105 }			# (Slaves)
				if = {
					limit = { root = { is_country_type = awakened_marauders } }
					set_owner = root		# Root not subjects
				}
				set_controller = root

				set_variable = { which = CmtVarTemp value = 3 }
				if = {
					limit = { free_housing < 2 }
					change_variable = { which = CmtVarTemp value = 3 }
				}
				else_if = {
					limit = { free_housing < 6 free_housing > 1 }
					change_variable = { which = CmtVarTemp value = 7 }
				}
				else_if = {
					limit = { free_housing > 5 }
					change_variable = { which = CmtVarTemp value = 11 }
				}

				set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
				multiply_variable = { which = CmtVarTemp4 value = 0.25 }
				every_owned_pop = {
					limit = {
						is_robot_pop = no
						NOT = { is_same_species = root.species }
						is_enslaved = no
					}
					unemploy_pop = yes
				}

				if = {
					limit = { habitability = { who = root.owner_species value >= 0.5 } }
					root.owner_species = { save_event_target_as = marauder_species }
				}
				else = {
					root = {
						random_owned_species = {
							limit = {
								prevprev = { habitability = { who = prev value >= 0.6 } }
								species_can_be_necrophaged = yes
							}
							save_event_target_as = marauder_species
						}
					}
					multiply_variable = { which = CmtVarTemp4 value = 0.333 }
				}

				if = {
					limit = {
						exists = event_target:marauder_country_1
						habitability = { who = event_target:marauder_country_1.owner_species value >= 0.4 }
					}
					while = {
						limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
						create_pop = { species = event_target:marauder_country_1.owner_species }
						change_variable = { which = CmtVarTemp4 value = -1 }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
				multiply_variable = { which = CmtVarTemp4 value = 0.333 }
				if = {
					limit = {
						exists = event_target:marauder_country_2
						habitability = { who = event_target:marauder_country_2.owner_species value >= 0.4 }
					}
					while = {
						limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
						create_pop = { species = event_target:marauder_country_2.owner_species }
						change_variable = { which = CmtVarTemp4 value = -1 }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
				multiply_variable = { which = CmtVarTemp4 value = 0.5 }
				if = {
					limit = {
						exists = event_target:marauder_country_3
						habitability = { who = event_target:marauder_country_3.owner_species value >= 0.4 }
					}
					while = {
						limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
						create_pop = { species = event_target:marauder_country_3.owner_species }
						change_variable = { which = CmtVarTemp4 value = -1 }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				if = {
					limit = {
						exists = event_target:marauder_species
						event_target:marauder_species = {
							prev = { habitability = { who = prev value >= 0.5 } }
							species_can_be_necrophaged = yes
						}
					}
					while = { # rest
						limit = { check_variable = { which = CmtVarTemp value > 0.5 } }
						create_pop = { species = event_target:marauder_species }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}

				# Flip Starbase ownership or create a new one.
				solar_system = {
					if = {
						limit = {
							exists = starbase
							starbase.fleet = {
								NOR = {
									is_owned_by = root
									is_owned_by = event_target:raider_khanate
								}
							}
						}
						starbase = {
							set_owner = event_target:raider_khanate # Root not subjects
						}
						# FIXME: needs possible workaround? As starbase from horde gets not conquered? See Fix id = khan.304-305
					}
					else_if = {
						limit = {
							NOT = { exists = starbase }
							event_target:raider_khanate = { is_country_type = awakened_marauders }
						}
						event_target:raider_khanate = {
							# TODO Error log drops: invalid starbase design Void Home??
							if = {
								limit = { NOT = { has_existing_ship_design = starbase_marauder } }
								create_ship_design = { design = "NAME_Marauder_Starbase" }
								add_ship_design = last_created_design
							}
						}
						# TODO Error log drops: Failed to create a starbase at
						# create_marauder_starbase = yes
						create_starbase = {
							owner = event_target:raider_khanate # Root not subjects
							size = "starbase_marauder"
							# design = "NAME_Marauder_Starbase"
							# graphical_culture = "pirate_01"
						}
					}
				}

				### Create Defense Armies (for some job reasons common armies get deleted)
				set_variable = { which = CmtVarTemp value = trigger:num_pops }
				multiply_variable = { which = CmtVarTemp value = 0.2 }
				round_variable = CmtVarTemp
				if = {
					limit = { exists = event_target:marauder_country_1 }
					while = {
						count = 2
						create_army = {
							name = random
							owner = root
							species = event_target:marauder_country_1.owner_species
							type = "newgen_occupation_army"
							land_army = yes
						}
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				if = {
					limit = { exists = event_target:marauder_country_2 }
					while = {
						count = 2
						create_army = {
							name = random
							owner = root
							species = event_target:marauder_country_2.owner_species
							type = "newgen_occupation_army"
							land_army = yes
						}
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				if = {
					limit = { exists = event_target:marauder_country_3 }
					while = {
						count = 2
						create_army = {
							name = random
							owner = root
							species = event_target:marauder_country_3.owner_species
							type = "newgen_occupation_army"
							land_army = yes
						}
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				while = { # rest
					limit = { check_variable = { which = CmtVarTemp value > 0.5 } }
					create_army = {
						name = random
						owner = root
						species = root.species
						type = "newgen_occupation_army"
						land_army = yes
					}
					change_variable = { which = CmtVarTemp value = -1 }
				}

				clear_variable = CmtVarTemp
				clear_variable = CmtVarTemp4

				if = {
					limit = {
						NOR = {
							# has_building = building_colony_shelter
							has_building = building_capital
							has_building = building_major_capital
							has_building = building_system_capital
							has_building = building_imperial_capital
							# building_hive_major_capital
							# building_machine_major_capital
							has_building = building_resort_major_capital
							has_building = building_slave_major_capital
							# building_ancient_control_center
							# building_ancient_palace
						}
					}
					add_building = building_capital
				}
			}
		}
	}
}

# Horde Conquers Planet
country_event = {
	id = marauder.504
	title = "marauder.504.name"
	desc = "marauder.504.desc"
	picture = GFX_evt_ground_combat
	show_sound = event_ground_battle
	is_triggered_only = yes
	location = event_target:conquered_planet

	immediate = {
		hidden_effect = {
			event_target:conquered_planet = {
				set_owner = from
				while = {
					count = trigger:num_armies
					create_army = {
						name = random
						owner = from
						species = prev
						type = "newgen_occupation_army"
						land_army = yes
					}
				}
			}
		}
	}
	option = { name = marauder.504.a }
}

#######################
###- Death of Khan -###
#######################

### Khan defeated in Combat (on_ship_destroyed_victim) but NOT die.
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
country_event = {
	id = marauder.505
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		CmtTriggerIsKhanCountry = yes
		fromfrom = {
			OR = {
				AND = {
					exists = leader
					leader = { has_leader_flag = great_khan }
				}
				AND = {
					exists = fleet
					fleet = { has_fleet_flag = khan_fleet }
				}
				NOR = {
					exists = leader
					is_civilian = yes
					exists = event_target:great_khan
					prev = {
						# has_country_flag = khan_dead_event_fine
						any_owned_leader = {
							leader_class = admiral
							has_leader_flag = great_khan
						}
					}
				}
			}
			OR = {
				NOT = { exists = fleet }
				fleet = { num_ships < 1 }
				fleet = { # Ship exists but does not count on fleet?
					num_ships = 1
					any_owned_ship = { is_same_value = prevprev }
				}
			}
		}
	}
	immediate = {
		# set_global_flag not needed
		change_variable = { which = "CmtVarKhanRemainingLive" value = -1 } ## Not CmtGlobalVar

		if = {
			limit = { exists = from }
			from = {
				save_event_target_as = khan_destroyer
				change_variable = { which = "planets_lost_to_marauder" value = -5 }
			}
		}

		if = { # 505 but NOT die.
			limit = {
				check_variable = { which = "CmtVarKhanRemainingLive" value > -1.5 }	## Not CmtGlobalVar
				NAND = {
					has_country_flag = great_khan_defeated_once					# CmtFlagKhanDefeatCountry
					check_variable = { which = "CmtVarKhanRemainingLive" value < 0 } ## Not CmtGlobalVar
				}
			}
			set_country_flag = great_khan_defeated_once			# CmtFlagKhanDefeatCountry
			fromfrom = {
				solar_system = { save_event_target_as = khan_death_system }
				if = {
					limit = { exists = leader }
					leader = {
						save_event_target_as = great_khan
						exile_leader_as = exiled_khan
					}
				}
			}
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = marauder.506 }				# Notify
			}
			observer_event = { id = observer.14 }

			if = {
				limit = { has_global_flag = CmtFlagDebugMode }
				country_event = { id = marauder.523 days = 5 }
			}
			else = {
				event_target:global_event_country = {
					country_event = { id = marauder.523 days = 210 random = 160 }
				}
			}
			# Back to the fold
			every_controlled_fleet = {
				limit = {
					exists = solar_system
					# NOR = { is_ship_class = shipclass_starbase is_ship_class = shipclass_military_station is_ship_class = shipclass_transport }
					# is_civilian = no
					is_mobile = yes
					any_owned_ship = {
						OR = {
							is_ship_class = shipclass_military
							is_ship_class = shipclass_transport
						}
					}
					NOT = { is_within_borders_of = root.owner }
				}
				fleet_event = { id = khan.611 days = -1 }
			}
		}
		else = { # Khan dies (former .509)
			set_global_flag = great_khan_dead
			set_country_flag = khan_dead_event_fine
			set_country_flag = great_khan_defeated_once # Possible superfluous
			if = {
				limit = { exists = event_target:great_khan_ruler }
				event_target:great_khan_ruler = { kill_leader = { show_notification = no fire = yes } }
			}
			if = {
				limit = { exists = event_target:great_khan }
				event_target:great_khan = { kill_leader = { show_notification = no fire = yes } }
			}

			event_target:khan_destroyer = {
				# save_event_target_as = khan_destroyer
				set_country_flag = no_khan_do
				if = {
					limit = { merg_is_default_empire = yes } # is_ai = no
					country_event = { id = marauder.710 days = 7 } # Max days = 8
					if = {
						limit = { root = { has_relic = r_khans_throne } }
						root = { remove_relic = r_khans_throne }
					}
					if = {
						limit = { can_copy_random_tech_from = { who = root } }
						copy_random_tech_from = { who = root }
					}
					if = {
						limit = { root = { num_owned_relics > 0 } }
						steal_relic = { target = root relic = random }
					}
				}
			}
			fromfrom = { solar_system = { save_event_target_as = khan_death_system } }
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = marauder.510 }				# Notify
			}
			observer_event = { id = observer.16 }
			if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
			}
			else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
			}
			else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
			}
			else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
			}
			else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
			}
			else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
		}
	}
}

# Great Khan Defeated First Time.
country_event = {
	id = marauder.506
	title = "marauder.506.name"
	desc = "marauder.506.desc"
	picture = GFX_evt_sabotaged_ship
	show_sound = event_ship_explosion
	is_triggered_only = yes
	location = event_target:khan_death_system
	option = { name = marauder.506.a }
}

### Return of Khan
# This = raider_khanate
country_event = {
	id = marauder.507
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:raider_khanate
		OR = {
			# has_global_flag = great_khan_dead
			has_country_flag = great_khan_defeated_once
			has_country_flag = khan_dead_event_fine
		}
		NAND = {
			exists = event_target:great_khan
			exists = event_target:great_khan.fleet
		}
		NOR = {
			has_country_flag = khan_dead_age
			has_country_flag = khan_dead_poison
			has_country_flag = khan_dead_disease
			has_country_flag = khan_dead_assassin
			has_country_flag = khan_dead_concubine
		}
	}
	immediate = {
		if = { # To be sure (as we use this event as active fix)
			limit = {
				check_variable = { which = "CmtVarKhanRemainingLive" value < 0 }
				NOT = { has_country_flag = khan_dead_event_fine }
			}
			country_event = { id = marauder.712 } # Dead
		}
		else = {
			if = {
				limit = { exists = ruler }
				ruler.species = { save_event_target_as = marauder_species }
			}
			else = {
				owner_species = { save_event_target_as = marauder_species }
			}
			if = {
				limit = { has_global_flag = great_khan_dead }
				remove_global_flag = great_khan_dead
			}
			if = {
				limit = { has_country_flag = khan_dead_event_fine }
				remove_country_flag = khan_dead_event_fine
			}
			country_event = { id = khan.306 days = -1 }		# Check/Create fallback rally_point
			event_target:marauder_rally_point = {
				# CmtEffectCreateAdmiralty_Khan2ndFleetSet = yes
				prev = {
					CmtEffectCreateFleet_Khan2ndFleet = yes
					event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = CmtVarCombatFleetNumber_Khan } }
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.875 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -1 } }
						CmtEffectCreateFleet_KhanStandard = yes
						CmtEffectCreateFleet_KhanArmy = yes
						CmtEffectCreateFleet_KhanArmy = yes
					}
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.125 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } }
						random_list = {
							125	= { event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = 0 } } CmtEffectCreateFleet_KhanStandard = yes CmtEffectCreateFleet_KhanArmy = yes }
							75	= { event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } } CmtEffectCreateFleet_KhanArmy = yes }
							200	= { }
						}
					}
				}
			}

			if = {
				limit = { NOT = { exists = event_target:great_khan.fleet } }
				last_created_fleet = {
					assign_leader = event_target:great_khan
					set_fleet_flag = khan_fleet
				}
			}
			# Notify: needs event_target:khan_destroyer
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = marauder.508 }
			}
			observer_event = { id = observer.15 }

			### Compat. hack for CM
			event_target:great_khan.fleet = {
				create_ship = {
					# name = "NAME_Glorious_Might"
					design = "NAME_Glorious_Might"
					graphical_culture = "npf_01_dirty"
					prefix = no
					upgradable = yes
				}
			}
		}
	}
}

# Return of the Great Khan.
# Needs event_target:khan_destroyer
country_event = {
	id = marauder.508
	title = "greatkhan_diplo_header"
	desc = {
		trigger = { OR = { is_subject_of_khan = no has_country_flag = rebelling_satrapy } }
		text = "marauder.508.desc.1"
	}
	desc = {
		trigger = { NOR = { is_subject_of_khan = yes has_country_flag = rebelling_satrapy is_homicidal = yes } }
		text = "marauder.508.desc.2"
	}
	desc = {
		trigger = { is_homicidal = yes }
		text = "marauder.508.desc.3"
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:great_khan
		room = khorgis_khan_1_room
	}
	location = event_target:marauder_rally_point
	is_triggered_only = yes
	option = { name = marauder.508.a }
}

## DEPRECATED - now .505
### Khan Defeated in Combat and die.
country_event = {
	id = marauder.509
	hide_window = yes
	is_triggered_only = yes
	is_test_event = yes
	trigger = {
		always = no
		# has_global_flag = marauder_crisis_ongoing
		# exists = event_target:raider_khanate
		# CmtTriggerIsKhanCountry = yes
		# fromfrom = {
		# 	exists = leader
		# 	leader = { has_leader_flag = great_khan }
		# 	fleet = { num_ships < 1 }
		# }
		OR = {
			check_variable = { which = "CmtVarKhanRemainingLive" value < 0 }	## Not CmtGlobalVar
			AND = {
				has_country_flag = great_khan_defeated_once				# CmtFlagKhanDefeatCountry
				check_variable = { which = "CmtVarKhanRemainingLive" value < 1 }	## Not CmtGlobalVar
			}
		}
	}

	immediate = {
		set_global_flag = great_khan_dead
		country_event = { id = marauder.505 }
	}
}

# Great Khan Dies (Notify)
# This = player
# From = marauder.505
country_event = {
	id = marauder.510
	title = "marauder.510.name"
	desc = "marauder.510.desc"
	picture = GFX_evt_space_funeral
	show_sound = event_airlock
	is_triggered_only = yes
	location = event_target:khan_death_system
	# immediate = {}
	# after = {}
	### Become the Khan Crisis
	option = {
		name = great_khan_wins_response
		custom_tooltip = khan.710.a.tooltip
		trigger = {
			hidden_trigger = {
				exists = event_target:raider_khanate
				exists = event_target:khan_destroyer
				has_country_flag = no_khan_do
				host_has_dlc = Apocalypse
				is_ai = no
				is_same_empire = event_target:khan_destroyer
				event_target:raider_khanate = { is_ai = yes }
			}
			is_robot_empire = no
			# has_federation = no
			# is_galactic_emperor = no
			has_been_declared_crisis = no
			is_gestalt = no
		}
		allow = {
			OR = {
				is_militarist = yes
				is_authoritarian = yes
				has_ethic = "ethic_fanatic_spiritualist"
			}
		}
		# TODO if Multiplayer redundant to crisis.4099
		# every_playable_country = {
		# 	limit = { is_ai = no }
		# 	country_event = { id = khan. } # Notify about the new Khan.
		# }
		hidden_effect = {
			# save_event_target_as = new_khanate
			remove_global_flag = marauder_crisis_ongoing
			remove_global_flag = great_khan_wins
			set_global_flag = horde_triggered
			set_global_flag = khan_no_die # TODO immortal? otherwise needs set_player somewhere
			set_country_flag = CmtFlagKhanNoDieCountry
			country_event = { id = crisis.4099 days = 29 } # Declare Crisis
			# set_country_type = dormant_marauders # Hack for trigger?
			set_country_flag = new_khanate_flag
			set_origin = "origin_khan_successor"
			event_target:raider_khanate = {
				every_subject = {
					limit = { is_subject_of_khan = yes }
					set_subject_of = { who = none }
					country_event = { id = marauder.671 days = -1 } # Do it immediately as raider_khanate should exists.
				}
				# Inheritance old flag
				switch = { trigger = has_country_flag
					marauder_1 = { prev = { set_country_flag = marauder_1 save_global_event_target_as = marauder_country_1 } }
					marauder_2 = { prev = { set_country_flag = marauder_2 save_global_event_target_as = marauder_country_2 } }
					marauder_3 = { prev = { set_country_flag = marauder_3 save_global_event_target_as = marauder_country_3 } }
				}
				# if = { ### NSC SUPPORT
				# 	limit = {
				# 		has_global_flag = has_nsc_active
				# 		exists = capital_scope
				# 	}
				# 	capital_scope = { origin_nsc_freebooter_start_setup = yes }
				# }
				country_event = { id = marauder.600 } # The Future of the Horde
			}
			if = {
				limit = { NOT = { has_relic = r_khans_throne } } # (as we could decline?)
				add_relic = r_khans_throne
			}
			country_event = { id = marauder.500 days = 7 }
			every_war = { # End Wars
				limit = { is_war_participant = { who = root } }
				prev = { set_truce = { target = prev type = war } }
				remove_war_participant = root
			}
			if = { # End Subjugation
				limit = { is_subject = yes }
				overlord = {
					declare_war = {
						target = root
						name = { key = "NAME_Declared_Crisis_War" variable_string = "[This.MainDefender.GetAdj]" }
						attacker_war_goal = "wg_declared_crisis"
					}
				}
				set_subject_of = { who = none }
			}
		}
		ai_chance = { factor = 0 }
	}
	option = {
		name = marauder.510.a
		custom_tooltip = marauder.122.a		# "good job"
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:raider_khanate
					exists = event_target:khan_destroyer
					has_country_flag = no_khan_do
					is_robot_empire = no
					has_been_declared_crisis = no
					is_gestalt = no
				}
				add_resource = { influence = 100 }
			}
		}
		default_hide_option = yes
		ai_chance = { factor = 1 }
	}
}

### Sudden Death of Khan (on_monthly_pulse)
# Great Khan dies for other reasons.
event = {
	id = marauder.511
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		NOR = {
			has_global_flag = khan_no_die
			has_global_flag = great_khan_dead
		}
		exists = event_target:raider_khanate
		event_target:raider_khanate = {
			NOR = {
				has_country_flag = CmtFlagKhanNoDieCountry
				has_country_flag = khan_dead_event_fine
			}
		}
	}
	immediate = {
		if = {
			limit = {
				exists = event_target:great_khan
				NAND = {
					exists = event_target:great_khan.fleet
					event_target:great_khan.fleet = { num_ships > 0 }
				}
			}
			if = { # Put him on a fleet.
				limit = {
					event_target:raider_khanate = {
						any_owned_fleet = {
							exists = solar_system
							is_mobile = yes
							is_in_combat = no
							NOR = {
								exists = leader
								has_fleet_flag = satrapy_garrison_fleet
							}
							fleet_power > 20000
						}
					}
				}
				event_target:raider_khanate = {
					# Assign the strongest fleet
					ordered_owned_fleet = {
						limit = {
							exists = solar_system
							is_mobile = yes
							is_in_combat = no
							NOR = {
								exists = leader
								has_fleet_flag = satrapy_garrison_fleet
							}
							fleet_power > 20000
						}
						position = 0
						order_by = trigger:fleet_power
						assign_leader = event_target:great_khan
						set_fleet_flag = khan_fleet
					}
				}
			}
			else = {
				event_target:marauder_rally_point = {
					if = {
						limit = { exists = event_target:great_khan }
						CmtEffectCreateAdmiralty_Khan1stFleet = yes
					}
					else = { # Try take exiled - not always work.
						event_target:raider_khanate = { CmtEffectCreateFleet_Khan2ndFleet = yes }
					}
				}
			}
		}
		if = {
			limit = {
				NAND = {
					exists = event_target:great_khan
					exists = event_target:great_khan.fleet
					# exists = exiled_khan
				}
			}
			event_target:raider_khanate = { country_event = { id = marauder.512 } }
			# event_target:CmtGlobalVar = { set_variable = { which = CmtVarKhanLifespan value = 1 } }
		}
		else = {
			# every_country = { currently only one Khan
			# limit = {
			# 	CmtTriggerIsKhanCountry = yes
			# 	NOT = { has_country_flag = CmtFlagKhanNoDieCountry }
			# }
			event_target:CmtGlobalVar = {
				random_list = {
					2 = { modifier = { factor = 0 check_variable = { which = CmtVarKhanLifespan value = 6 } } event_target:raider_khanate = { country_event = { id = marauder.512 } } }
					98 = { modifier = { factor = @CmtConstKhanLifespan_1b check_variable = { which = CmtVarKhanLifespan value = 1 } } modifier = { factor = @CmtConstKhanLifespan_2b check_variable = { which = CmtVarKhanLifespan value = 2 } } modifier = { factor = @CmtConstKhanLifespan_3b check_variable = { which = CmtVarKhanLifespan value = 3 } } modifier = { factor = @CmtConstKhanLifespan_4b check_variable = { which = CmtVarKhanLifespan value = 4 } } modifier = { factor = @CmtConstKhanLifespan_5b check_variable = { which = CmtVarKhanLifespan value = 5 } } }
				}
			}
		}
	}
}

### Great Khan Dies for Other Reasons.
country_event = {
	id = marauder.512
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		random_list = {
			10 = { set_country_flag = khan_dead_poison }
			10 = { set_country_flag = khan_dead_disease }
			10 = { set_country_flag = khan_dead_assassin }
			10 = { set_country_flag = khan_dead_concubine }
		}

		if = {
			limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = { kill_leader = { show_notification = no fire = yes } }
		}
		if = {
			limit = { exists = event_target:great_khan }
			event_target:great_khan = { kill_leader = { show_notification = no fire = yes } }
		}

		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		observer_event = { id = observer.17 }
		if = {
			limit = { NOT = { has_relic = r_khans_throne } }
			add_relic = r_khans_throne
		}

		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		}
		else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

### Great Khan Dies (Notify)
country_event = {
	id = marauder.513
	title = "marauder.510.name"
	desc = {
		trigger = {
			hidden:from = {
				switch = { trigger = has_country_flag
					khan_dead_poison	= { text = marauder.513.a.desc }
					khan_dead_disease	= { text = marauder.513.b.desc }
					khan_dead_assassin	= { text = marauder.513.c.desc }
					khan_dead_concubine	= { text = marauder.513.d.desc }
					khan_dead_age		= { text = marauder.513.e.desc }
				}
			}
		}
	}
	picture = GFX_evt_space_funeral
	show_sound = event_life_support_fail
	is_triggered_only = yes
	option = { name = marauder.510.a }
}

### Great Khan Dies of Old Age.
country_event = {
	id = marauder.514
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		CmtTriggerIsKhanCountry = yes
		NOT = { has_country_flag = khan_dead_age }
	}
	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		set_country_flag = khan_dead_age

		if = {
			limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = {
				remove_leader_flag = great_khan				# Because possible loop trigger?
				kill_leader = { show_notification = no fire = yes }
			}
		}
		if = {
			limit = { exists = event_target:great_khan }
			event_target:great_khan = {
				remove_leader_flag = great_khan				# Because possible loop trigger?
				kill_leader = { show_notification = no fire = yes }
			}
		}
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		observer_event = { id = observer.17 }
		if = {
			limit = { NOT = { has_relic = r_khans_throne } }
			add_relic = r_khans_throne
		}
		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		}
		else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		}
		else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

# Marauder Planet Liberated (HIDDEN)
country_event = {
	id = marauder.515
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		from = { is_country_type = awakened_marauders }
	}
	immediate = {
		random_country = {
			limit = { has_country_flag = former_owner@fromfrom }
			save_event_target_as = planet_former_owner
		}
		fromfrom = {
			save_event_target_as = liberated_planet
			every_owned_pop = {
				limit = {
					pop_has_trait = "trait_pc_habitat_preference"
					OR = {
						is_same_species = root.from.owner_species
						AND = {
							num_marauder_empires_to_spawn > 0
							exists = event_target:marauder_country_1
							is_same_species = event_target:marauder_country_1.owner_species
						}
						AND = {
							num_marauder_empires_to_spawn > 1
							exists = event_target:marauder_country_2
							is_same_species = event_target:marauder_country_2.owner_species
						}
						AND = {
							num_marauder_empires_to_spawn > 2
							exists = event_target:marauder_country_3
							is_same_species = event_target:marauder_country_3.owner_species
						}
					}
				}
				random = { chance = 80 kill_pop = yes }
			}
		}
		if = { # Planet belonged to liberator
			limit = {
				exists = event_target:planet_former_owner
				event_target:planet_former_owner = { is_same_empire = root }
			}
			country_event = { id = marauder.516 }
		}
		else_if = { # Planet belonged to someone else.
			limit = { exists = event_target:planet_former_owner }
			country_event = { id = marauder.517 }
		}
		else = { # Planet's former owner no longer exists.
			if = { # Planet belonged to someone else.
				limit = {
					exists = event_target:liberated_planet.solar_system.starbase
					exists = event_target:liberated_planet.solar_system.starbase.owner
					event_target:liberated_planet.solar_system.starbase.owner = { NOT = { is_same_empire = root } }
				}
				event_target:liberated_planet.solar_system.starbase.owner = { save_event_target_as = planet_former_owner }
				country_event = { id = marauder.517 }
			}
			else = {
				country_event = { id = marauder.518 } # Liberated Dead Country's Planet
			}
		}
	}
}

# Liberated Someone Else's Planet
country_event = {
	id = marauder.517
	title = "marauder.516.name"
	desc = "marauder.517.desc"
	picture = GFX_evt_victorious_army
	show_sound = event_ground_battle
	is_triggered_only = yes
	option = { # Keep planet
		name = marauder.517.a
		custom_tooltip = marauder.517.a.tooltip
		event_target:planet_former_owner = {
			add_opinion_modifier = { who = root modifier = opinion_kept_marauder_planet }
		}
		event_target:liberated_planet = { set_owner = root }
		ai_chance = {
			factor = 1
			modifier = {
				factor = 20
				OR = {
					is_hostile_to = event_target:planet_former_owner
					opinion_level = { who = event_target:planet_former_owner level < poor }
					is_rival = event_target:planet_former_owner
					is_at_war_with = event_target:planet_former_owner
					event_target:planet_former_owner = { is_fallen_empire = yes }
				}
			}
		}
	}
	option = { # Return to former owner
		name = marauder.517.b
		custom_tooltip = marauder.517.b.tooltip
		event_target:liberated_planet = { set_owner = event_target:planet_former_owner }
		event_target:planet_former_owner = {
			add_opinion_modifier = { who = root modifier = opinion_returned_marauder_planet }
		}
		add_favors = {
			target = event_target:planet_former_owner
			value = 1
		}
		hidden_effect = {
			event_target:planet_former_owner = {
				country_event = { id = marauder.519 }
			}
			if = {
				limit = {
					has_global_flag = marauder_crisis_ongoing
					event_target:planet_former_owner = { is_subject_of_khan = yes }
				}
				event_target:liberated_planet = { set_controller = root }
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 0
				OR = {
					is_hostile_to = event_target:planet_former_owner
					opinion_level = { who = event_target:planet_former_owner level < poor }
					is_rival = event_target:planet_former_owner
					is_at_war_with = event_target:planet_former_owner
					event_target:planet_former_owner = { is_fallen_empire = yes }
				}
			}
		}
	}
}

### Marauder Reinforcement Cycle at Capital (Regular)
# Need a flag to determine if the Horde has a Machinesmith (Improved)
# This = Marauder
country_event = {
	id = marauder.520
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		# CmtTriggerIsKhanCountry = yes # Breaks self-calling loop
		# is_country_type = awakened_marauders
		is_same_empire = event_target:raider_khanate
		NOT = { has_global_flag = great_khan_wins }
		# NOT = { has_country_flag = has_machinesmith }
	}
	immediate = {
		country_event = { id = khan.306 days = -1 } # Check/Create fallback rally_point
		if = {
			limit = { exists = event_target:marauder_rally_point }
			### Khan Expanded
			if = {
				limit = { NOT = { has_country_flag = KhanReinforcement_Cycle } }
				if = {
					limit = { end_game_years_passed > -50 }
					country_event = { id = khan.299 } # End check
				}
				set_country_flag = KhanReinforcement_Cycle
				# Minor checks: no high frequent needed
				## Reinforce Khan himself
				if = {
					limit = {
						exists = event_target:great_khan
						exists = event_target:great_khan.fleet
					}
					event_target:great_khan.fleet = { save_event_target_as = khan_fleet }
				}
				else = {
					event_target:raider_khanate = {
						random_owned_fleet = {
							limit = { has_fleet_flag = khan_fleet }
							save_event_target_as = khan_fleet
						}
					}
				}
				if = { # Fallback 3.4 saves/mods
					limit = { NOT = { exists = event_target:khan_fleet } }
					event_target:raider_khanate = {
						random_owned_fleet = {
							limit = {
								exists = leader
								leader = { has_leader_flag = great_khan }
							}
							save_event_target_as = khan_fleet
							leader = { save_global_event_target_as = great_khan }
						}
					}
				}
				if = {
					limit = {
						exists = event_target:khan_fleet
						event_target:khan_fleet = {
							fleet_power < 38000
							exists = solar_system
						}
					}
					event_target:marauder_rally_point = {
						# Reinforce Khan himself
						create_fleet = {
							effect = {
								set_owner = root
								if = {
									limit = { event_target:khan_fleet = { OR = { fleet_power < 12000 count_owned_ship = { count = 1 } } } }
									create_dyn_marauder_fleet = { OUTRIDER = 20 LANCER = 10 CHAMPION = 6 GLORY = 1 }
								}
								else_if = {
									limit = { event_target:khan_fleet = { fleet_power < 24000 } }
									create_dyn_marauder_fleet = { OUTRIDER = 18 LANCER = 8 CHAMPION = 3 }
								}
								else = {
									create_dyn_marauder_fleet = { OUTRIDER = 14 LANCER = 6 CHAMPION = 1 VARIANT = "_4" }
								}
							}
						}
					}
					event_target:khan_fleet = {
						last_created_fleet = {
							set_name = "Chosen Reinforcement"
							set_location = { target = event_target:marauder_rally_point distance = 20 angle = random }
							set_aggro_range_measure_from = self
							set_owner = root
							if = {
								limit = {
									exists = prev.solar_system
									NOT = { can_access_system = prev.solar_system }
								}
								if = {
									limit = {
										exists = prev.solar_system.starbase
										exists = prev.solar_system.starbase.owner
										prev.solar_system.starbase = { is_owned_by = root }
									}
									set_home_base = prev.solar_system.starbase
									set_mia = mia_return_home
								}
								else = {
									prev.solar_system = {
										random_neighbor_system = {
											limit = {
												prevprevprev = { can_access_system = prevprev }
											}
											weights = {
												base = 1
												modifier = { add = 20 has_owner = no }
												modifier = { add = 10 NOT = { has_star_flag = guardian } }
											}
											prevprev = {
												set_location = { target = prev.star distance = 20 angle = random }
											}
										}
									}
								}
							}
							queue_actions = {
								wait = { duration = 1 }
								move_to = prev
								wait = { duration = 1 }
								merge_fleet = {
									target = event_target:khan_fleet # prev # False error claim?
									allow_ftl = yes
								}
							}
						}
					}
				}
				## Re-assing idle Admirals
				if = {
					limit = {
						any_owned_fleet = {
							is_mobile = yes
							is_civilian = no
							NOT = { exists = leader }
							fleet_power > 3000
							num_ships > 2
						}
						any_owned_leader = {
							leader_class = admiral
							is_idle = yes # NOT = { exists = fleet }
							is_event_leader = no
							is_councilor = no
							is_ruler = no
						}
					}
					random_owned_fleet = {
						limit = {
							is_mobile = yes
							is_civilian = no
							NOT = { exists = leader }
							fleet_power > 3000
							num_ships > 2
						}
						root = {
							random_owned_leader = {
								limit = {
									leader_class = admiral
									is_idle = yes
									is_event_leader = no
									is_councilor = no
									is_ruler = no
								}
								weights = {
									base = 1
									modifier = { add = 4 NOT = { exists = fleet } }
								}
								prevprev = { assign_leader = prev }
							}
						}
					}
				}
				## Re-assing idle Generals
				if = {
					limit = {
						any_owned_leader = {
							leader_class = general
							is_idle = yes
							is_event_leader = no
							is_councilor = no
							is_ruler = no
						}
					}
					if = {
						limit = {
							any_owned_fleet = {
								exists = solar_system
								is_mobile = yes
								NOT = { exists = leader }
								any_owned_ship = { is_ship_class = shipclass_transport }
								fleet_power > 620
							}
						}
						# Fleet prior
						random_owned_fleet = {
							limit = {
								exists = solar_system
								is_mobile = yes
								NOT = { exists = leader }
								any_owned_ship = { is_ship_class = shipclass_transport }
								fleet_power > 620
							}
							root = {
								random_owned_leader = {
									limit = {
										leader_class = general
										is_idle = yes
										is_event_leader = no
										is_councilor = no
										is_ruler = no
									}
									weights = {
										base = 1
										modifier = { add = 4 NOT = { exists = fleet } }
									}
									prevprev = {
										assign_leader = prev
										if = {
											limit = { NOT = { has_fleet_order = aggressive_stance_fleet_order } }
											random = { chance = 30 set_fleet_stance = aggressive }
										}
									}
								}
							}
						}
					}
					else_if = { # Planet
						limit = {
							any_controlled_planet = {
								has_army = yes
								NOR = {
									has_ground_combat = yes
									planet_garrison_strength < 620
									any_planet_army = { exists = leader }
								}
							}
						}
						random_controlled_planet = {
							limit = {
								has_army = yes
								NOR = {
									has_ground_combat = yes
									planet_garrison_strength < 620
									any_planet_army = { exists = leader }
								}
							}
							root = {
								random_owned_leader = {
									limit = {
										leader_class = general
										is_idle = yes
										is_event_leader = no
										is_councilor = no
										is_ruler = no
									}
									weights = {
										base = 1
										modifier = { add = 4 NOT = { exists = fleet } }
									}
									prevprev = {
										random_planet_army = { assign_leader = prevprev }
									}
								}
							}
						}
					}
				}
			}
			else = { remove_country_flag = KhanReinforcement_Cycle }

			if = {
				limit = { fleet_power < 250000 has_country_flag = has_machinesmith }
				create_marauder_constructors = yes # full check included
				if = {
					limit = { num_armies < 40 }
					create_marauder_armies = yes
				}
				random_subject = {
					limit = {
						any_agreement = { agreement_preset = preset_machinesmith_satrapy }
						NOT = { has_country_flag = rebelling_satrapy }
					}
					root = {
						if = {
							limit = { can_copy_random_tech_from = { who = prev } }
							copy_random_tech_from = { who = prev }
						}
					}
					log = "machinesmith sold [This.GetName]"
					save_event_target_as = machinesmith
					country_event = { id = marauder.520 days = 360 } # Improved cycle

					random_owned_design = {
						limit = { is_ship_size = corvette }
						save_event_target_as = machinesmith_corvette
					}
					random_owned_design = {
						limit = { is_ship_size = destroyer }
						save_event_target_as = machinesmith_destroyer
					}
					random_owned_design = {
						limit = { is_ship_size = cruiser }
						save_event_target_as = machinesmith_cruiser
					}
					random_owned_design = {
						limit = { is_ship_size = battleship }
						save_event_target_as = machinesmith_battleship
					}
				}

				event_target:marauder_rally_point = {
					create_fleet = {
						name = random
						effect = {
							random_list = {
								20 = { set_owner = root create_dyn_marauder_fleet = { OUTRIDER = 20 LANCER = 10 CHAMPION = 6 VARIANT = "_4" } }
								80 = { # Own ships
									modifier = { factor = 0 NOT = { exists = event_target:machinesmith } }
									set_owner = event_target:machinesmith
									while = {
										count = 20
										create_ship = {
											name = random
											prefix = no
											design = event_target:machinesmith_corvette
											random_existing_design = corvette
											graphical_culture = event_target:machinesmith
										}
									}
									while = {
										count = 10
										create_ship = {
											name = random
											prefix = no
											design = event_target:machinesmith_destroyer
											random_existing_design = destroyer
											graphical_culture = event_target:machinesmith
										}
									}
									if = {
										limit = { exists = event_target:machinesmith_battleship }
										while = {
											count = 2
											create_ship = {
												name = random
												prefix = no
												design = event_target:machinesmith_battleship
												random_existing_design = battleship
												graphical_culture = event_target:machinesmith
											}
										}
									}
									else = {
										while = {
											count = 6
											create_ship = {
												name = random
												prefix = no
												design = event_target:machinesmith_cruiser
												random_existing_design = cruiser
												graphical_culture = event_target:machinesmith
											}
										}
									}
								}
							}
							set_location = { target = prev distance = 20 angle = random }
							set_aggro_range = 500
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
						}
					}
				}

				if = {
					limit = { NOT = { exists = event_target:machinesmith } }
					remove_country_flag = has_machinesmith # Regular cycle
					country_event = { id = marauder.520 days = 330 }
				}
				else = {
					last_created_fleet = { set_owner = root }
					break = yes
				}
			}
			else = {
				event_target:CmtGlobalVar = {
					if = {
						limit = {
							OR = {
								check_variable = { which = CmtVarReinforceCycle_Khan value < 2 }
								check_variable = { which = CmtVarReinforceCycle_Khan value > 4 }
							}
						}
						CmtEffectKhanReinforceOnCapital = yes
						root = {
							remove_country_flag = KhanReinforcement_Cycle
							country_event = { id = marauder.520 days = 340 }
						}
					}
					else = {
						if = {
							limit = { root = { check_variable = { which = CmtVarKhanReinforcementCounter value > 9.5 } } }
							CmtEffectKhanReinforceOnCapital = yes
							root = { change_variable = { which = CmtVarKhanReinforcementCounter value = -10 } }
						} # else = { root = { set_country_flag = KhanReinforcement_Cycle } }
						# Set var counter for next cycle
						CmtEffectKhanIncreasementReinforcementCycle = yes ## required: prev = Khan
						root = { # TODO: days somehow dyn.
							country_event = { id = marauder.520 days = 100 }
						}
					}
				}
				# Legacy
				# create_marauder_constructors = yes
				# if = { limit = { num_armies < 40 }
				# 	create_marauder_armies = yes
				# }
				# if = { limit = { fleet_power < 200000 }
				# 	create_marauder_fleet = yes
				# }
				# country_event = { id = marauder.520 days = 340 }
			}
		}
		else = {
			country_event = { id = marauder.520 days = 210 }
		}

		if = {
			limit = {
				OR = {
					is_overlord = yes
					any_subject = { is_subject_of_khan = yes }
				}
			}
			every_subject = {
				limit = {
					is_subject_of_khan = yes
					NAND = {
						exists = capital_scope
						capital_scope.solar_system = {
							any_fleet_in_system = { is_mobile = no has_fleet_flag = satrapy_garrison any_owned_ship = { is_ship_size = marauder_void_dwelling } }
						}
					}
					NOT = {
						event_target:raider_khanate = {
							any_owned_fleet = { is_mobile = no has_fleet_flag = satrapy_garrison any_owned_ship = { is_ship_size = marauder_void_dwelling } is_within_borders_of = prevprev }
						}
					}
				}
				country_event = { id = marauder.553 days = 250 } # Init base
			}
		}
	}
}

# Return of the Great Khan (HIDDEN) (due .505 timer)
country_event = {
	id = marauder.523
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# needs event_target:khan_destroyer
		if = {
			limit = { exists = from }
			from = {
				country_event = { id = marauder.507 }
			}
		}
		else = {
			every_playable_country = {
				country_event = { id = marauder.524 }
			}
		}
	}
}

# Great Khan Dies
country_event = {
	id = marauder.524
	title = "marauder.524.name"
	desc = {
		text = marauder.524.a.desc
		trigger = {
			NAND = {
				exists = event_target:khan_destroyer
				is_same_empire = event_target:khan_destroyer
			}
		}
	}
	desc = {
		text = marauder.524.b.desc
		trigger = {
			exists = event_target:khan_destroyer
			is_same_empire = event_target:khan_destroyer
		}
	}
	picture = GFX_evt_space_funeral
	show_sound = event_airlock
	is_triggered_only = yes
	option = {
		name = marauder.524.a
		trigger = {
			NAND = {
				exists = event_target:khan_destroyer
				is_same_empire = event_target:khan_destroyer
			}
		}
	}
	option = {
		name = marauder.524.b
		trigger = {
			exists = event_target:khan_destroyer
			is_same_empire = event_target:khan_destroyer
			NOT = { has_relic = r_khans_throne }
		}
		add_relic = r_khans_throne
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:great_khan
					exists = event_target:raider_khanate
					event_target:raider_khanate = { has_relic = r_khans_throne }
				}
				event_target:raider_khanate = { remove_relic = r_khans_throne }
			}
		}
	}
}

#########################################################
### Awakening for Vengeance: on_ship_destroyed_victim ###
#########################################################

# May Horde Triggered Through Destruction of Stations (on_ship_destroyed_victim).
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
# fromfromfrom = ship 2
country_event = {
	id = marauder.525
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = marauder_crisis_ongoing }
		is_country_type = dormant_marauders
		end_game_years_passed < event_target:CmtGlobalVar.CmtVarKhanLatestEgpy
		fromfrom = {
			exists = solar_system
			solar_system = { has_star_flag = marauder_system }
			OR = {
				is_ship_size = marauder_void_dwelling
				is_ship_size = starbase_marauder
			}
		}
		OR = {
			from = { merg_is_default_empire = yes } # There are some unpredictable possiblities.
			count_country = { count = 1 limit = { is_country_type = dormant_marauders } }
		}
		event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value != 1 } }
		OR = {
			count_owned_fleet = {
				limit = { is_ship_size = marauder_void_dwelling }
				count > 1
			}
			AND = {
				event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 5 } }
				count_owned_fleet = {
					limit = { is_ship_size = marauder_void_dwelling }
					count > 0
				}
			}
		}
		CmtTriggerKhanAwakingMultipleCheck = yes
	}
	immediate = {
		from = { save_event_target_as = awakened_horde }
		# Since 3.0: reduce possibility if too early
		set_variable = { which = CmtVarKhanProbability value = trigger:years_passed }

		if = {
			limit = { NOT = { is_variable_set = CmtVarHalfMidgame } }
			get_galaxy_setup_value = { which = CmtVarHalfMidgame setting = mid_game_year }
			change_variable = { which = CmtVarHalfMidgame value = event_target:CmtGlobalVar.CmtVarKhanEarliestMgpy }
			multiply_variable = { which = CmtVarHalfMidgame value = 0.5 }
		}
		if = {
			limit = { check_variable = { which = CmtVarHalfMidgame value > 0 } }
			divide_variable = { which = CmtVarKhanProbability value = CmtVarHalfMidgame }
		}
		subtract_variable = { which = CmtVarKhanProbability value = 1 }

		random_list = {
			2 = {
				modifier = {		## 9.9%
					factor = 5.5
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 3 } }
				}
				modifier = {		## 28.6%
					factor = 20
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 4 } }
				}
				modifier = {
					factor = CmtVarKhanProbability					# = 2*curY/mgY-1
					check_variable = { which = CmtVarKhanProbability value < 1 }
				}
				set_global_flag = horde_triggered
				set_country_flag = CmtFlagKhanVengeanceCountry
				country_event = { id = marauder.500 }
			}
			98 = {
				modifier = {
					factor = 0
					OR = {
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 5 } }
						AND = {
							count_owned_fleet = { count < 2 limit = { is_ship_size = marauder_void_dwelling } }
							count_country = { count = 1 limit = { is_country_type = dormant_marauders } }
						}
					}
				}
				fromfromfrom.solar_system = {
					set_timed_star_flag = { flag = marauder_starbase_destroyed months = 11 }
					system_event = { id = marauder.17 days = 360 } # Rebuild marauder starbase
				}
			}
		}
	}
}

### Horde Clearing System (for evaluation marauder.555)
# This = starbase being destroyed
# From = fleet that destroyed the starbase
starbase_event = {
	id = marauder.527
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		exists = from
		exists = owner
		has_starbase_size > starbase_outpost
		owner = { merg_is_default_empire = yes }
		exists = from.owner
		from.owner = {
			OR = {
				CmtTriggerIsKhanCountry = yes
				AND = { # Khan Subject
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebellion_cooldown }
					root.owner = { is_subject_of_khan = no }
				}
			}
		}
	}
	immediate = {
		owner = {
			if = {
				limit = { is_subject_of_khan = yes }
				save_event_target_as = former_starbase_owner
				# Flip Starbase ownership (create new one)
				prev.solar_system = {
					system_event = { id = khan.310 days = 2 }
				}
				# Friendly to be sure
				country_event = { id = khan.309 days = -1 }
				country_event = { id = khan.309 days = 2 }
			}
			else = {
				## Change loss by value
				change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
				if = {
					limit = { prev = { has_starbase_size > starbase_starport } }
					change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
					if = {
						limit = {
							prev = {
								OR = {
									solar_system = { is_capital_system = yes }
									has_starbase_size > starbase_starhold
								}
							}
						}
						change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
						save_event_target_as = former_starbase_owner
						# prev = { works but gets destroyed anyway
						# 	set_owner = from.owner
						# 	fleet = {
						# 		every_owned_ship = {
						# 			repair_percentage = 0.1 set_disabled = no
						# 		}
						# 	}
						# }
						prev.solar_system = {
							if = { # Not Dead End Systems
								limit = {
									OR = {
										count_neighbor_system = { count > 1 }
										count_system_planet = { count > 0 limit = { is_colonizable = yes } }
									}
								}
								system_event = { id = khan.310 days = 2 } # Flip Starbase ownership (create new one)
							}
						}
						if = {
							limit = { prev = { has_starbase_size > starbase_starfortress } }
							change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
							# log = "starbase_citadel lost_to_marauder"
							from = { set_timed_fleet_flag = { flag = starbase_destroyed days = 5 } }
						}
						# else = { log = "starbase_starfortress lost_to_marauder" }
					}
				}
				# log = "marauder.527 system lost_to_marauder for \\[This.GetName]"
			}
		}
	}
}

# Vanilla Fix
### Horde Clearing Planet (for evaluation marauder.555)
# Planet has reached 0 pops from orbital bombardment or collateral damage.
# This = Planet
# From = Bombarder
planet_event = {
	id = marauder.528
	hide_window = yes
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
	}

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		NOT = { has_planet_flag = planet_raided }
		exists = event_target:raider_khanate
		exists = from
		exists = owner
		# owner = { is_default_or_fallen = yes }
		# count_planet_army = { count = 0 }
		NOT = { any_planet_army = { always = yes } }
		OR = {
			planet_devastation > 90
			num_pops < 2
		}
		from = {
			OR = {
				CmtTriggerIsKhanCountry = yes
				AND = { # Khan Subject
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebellion_cooldown }
					exists = from
					from = { is_subject_of_khan = no }
				}
			}
		}
	}

	immediate = {
		set_timed_planet_flag = { flag = planet_raided months = 10 }
		if = {
			limit = {
				num_pops < 2
				owner = {
					merg_is_default_empire = yes
					num_owned_planets > 1
				}
			}
			owner = { change_variable = { which = "planets_lost_to_marauder" value = 1 } }
			every_owned_pop = { kill_pop = yes } # ghost pop bug
			destroy_colony = yes
		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					num_owned_planets < 2
					merg_is_default_empire = yes
				}
			}
			## Complete takeover
			from = { save_event_target_as = new_khanate }
			owner = { country_event = { id = marauder.609 days = -1 } } # Fully handover
			from = {
				country_event = {
					id = marauder.503
					scopes = { from = root.owner fromfrom = root }
				}
			}
		}
		else = {
			from = {
				country_event = {
					id = marauder.503
					days = 2
					scopes = { from = root.owner fromfrom = root }
				}
			}
		}
		log = "marauder.528 planets_lost_to_marauder increased for \\[This.Owner.GetName]"
	}
}

##########################
##		Great Khan		##
##		Diplomacy 		##
##########################
country_event = {
	id = marauder.550
	title = "greatkhan_diplo_header"
	desc = {
		trigger = { any_agreement = { agreement_preset = preset_fabricator_satrapy } }
		text = "marauder_fabricator_greeting1"
	}
	desc = {
		trigger = { any_agreement = { agreement_preset = preset_fabricator_satrapy } }
		text = "marauder_fabricator_greeting2"
	}
	desc = {
		trigger = { any_agreement = { agreement_preset = preset_fabricator_satrapy } }
		text = "marauder_fabricator_greeting3"
	}
	# desc = {
	# 	trigger = { any_agreement = { agreement_preset = preset_machinesmith_satrapy } }
	# 	text = "khan.899.g.desc"
	# }
	# desc = {
	# 	trigger = { any_agreement = { agreement_preset = preset_machinesmith_satrapy } }
	# 	text = "khan.898.g.desc"
	# }
	# desc = {
	# 	trigger = { any_agreement = { agreement_preset = preset_machinesmith_satrapy } }
	# 	text = "khan.897.g.desc"
	# }
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.a.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.b.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.c.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.d.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.e.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.f.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.g.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.h.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.i.desc"
	}
	desc = {
		trigger = {
			is_subject = yes # exists = overlord
			any_agreement = { agreement_preset = preset_satrapy }
		}
		text = "marauder.550.j.desc"
	}
	desc = {
		trigger = {
			is_subject = yes # exists = overlord
			any_agreement = { agreement_preset = preset_satrapy }
		}
		text = "marauder.550.k.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_machine_empire = yes
		}
		text = "marauder.550.l.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_machine_empire = yes
		}
		text = "marauder.550.m.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_hive_empire = yes
		}
		text = "marauder.550.n.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_hive_empire = yes
		}
		text = "marauder.550.o.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_gestalt = no
		}
		text = "marauder.550.p.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_gestalt = no
		}
		text = "marauder.550.q.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.r.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.s.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.t.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.u.desc"
	}
	desc = {
		trigger = { is_homicidal = yes }
		text = "marauder.550.v.desc"
	}
	desc = {
		trigger = { from = { has_country_flag = marauder_2 } }
		text = "marauder.550.w.desc"
	}
	picture_event_data = {
		portrait = event_target:great_khan
		room = khorgis_khan_1_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes

	trigger = {
		from = {
			is_country_type = awakened_marauders
			CmtTriggerIsKhanCountry = yes
		}
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Satrapy/Submit? Extended subject offer
	option = {
		name = marauder_deal_start
		sound = advisor_clicking_respons_13
		trigger = {
			NOR = {
				has_country_flag = rebellion_cooldown
				has_country_flag = rebelling_satrapy
				is_homicidal = yes
			}
			OR = {
				is_subject_of_khan = no
				NOR = {
					any_agreement = { agreement_preset = preset_machinesmith_satrapy }
					any_agreement = { agreement_preset = preset_fabricator_satrapy }
				}
			}
			OR = {
				AND = {
					has_technology = tech_mass_drivers_4
					has_technology = tech_lasers_4
					has_technology = tech_ship_armor_4
					has_technology = tech_shields_4
				}
				has_monthly_income = { resource = alloys value > 100 }
			}
		}
		allow = {
			NOT = { has_active_event = { khan.998 } }
			custom_tooltip = { fail_text = "ACTION_ACTOR_MUST_BE_INDEPENDENT" is_subject = no }
			custom_tooltip = {
				fail_text = "HI_DOMINEERING_GREETING_02" # FP_HOSTILE_GREETING_02
				hidden_trigger = { is_variable_set = "planets_lost_to_marauder" }
			}
		}
		hidden_effect = {
			country_event = { id = khan.998 }
		}
		ai_chance = { factor = 50 }
	}
	option = {
		# Submit? Already rebelled
		name = marauder_deal_start
		# sound = no_tut_advior_05
		trigger = {
			has_country_flag = rebelling_satrapy
			has_technology = tech_mass_drivers_4
			has_technology = tech_lasers_4
			has_technology = tech_ship_armor_4
			has_technology = tech_shields_4
			is_fallen_empire = no
		}
		allow = {
			custom_tooltip = { fail_text = "ACTION_ACTOR_MUST_BE_INDEPENDENT" is_subject = no }
			custom_tooltip = { fail_text = "FC_RELATION_DESC_UNKNOWN" hidden_trigger = { is_variable_set = "planets_lost_to_marauder" } }
		}
		response_text = marauder.550.a.2.response
		is_dialog_only = yes
	}
	option = {
		# Submit?
		name = marauder.550.a
		sound = advisor_clicking_respons_13
		trigger = {
			NOR = {
				is_subject_of_khan = yes
				has_been_declared_crisis = yes
				has_country_flag = rebelling_satrapy
				is_homicidal = yes
				is_fallen_empire = yes
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = "03_EMBASSY_HOSTILE" # marauder.550.a_fail
				hidden_trigger = {
					OR = {
						is_variable_set = "planets_lost_to_marauder"
						from = { NOT = { has_country_flag = raid_cooldown } }
						from = { is_overlord = yes }
						AND = { # Early submit
							is_neighbor_of = from
							fleet_power < 42000
							OR = {
								is_ai = no
								num_owned_planets < 10
							}
						}
					}
				}
			}
			NOT = { has_active_event = { marauder.551 } }
			custom_tooltip = { fail_text = "ACTION_ACTOR_MUST_BE_INDEPENDENT" is_subject = no }
		}
		hidden_effect = {
			country_event = { id = marauder.551 }
		}
		ai_chance = {
			factor = 5
			modifier = { factor = 0.1 NOT = { is_variable_set = "planets_lost_to_marauder" } }
		}
		# response_text = "HI_DOMINEERING_GREETING_02"
		# response_text = "FP_HOSTILE_GREETING_02"
	}
	option = {
		# Submit? Already rebelled
		name = marauder.550.a
		sound = no_tut_advior_05
		trigger = { has_country_flag = rebelling_satrapy }
		allow = {
			OR = {
				custom_tooltip = { fail_text = "ACTION_ACTOR_MUST_BE_INDEPENDENT" is_subject = no }
				is_subject_of_khan = yes
			}
		}
		response_text = marauder.550.a.2.response
		is_dialog_only = yes
	}
	option = {
		name = marauder.550.b
		trigger = {
			from = { has_country_flag = marauder_2 }
			NOR = {
				has_country_flag = asked_about_language
				is_homicidal = yes
			}
		}
		response_text = marauder.550.b.response
		is_dialog_only = yes
		hidden_effect = { set_country_flag = asked_about_language }
		ai_chance = { factor = 0.1 }
	}
	option = {
		name = marauder.550.c
		trigger = {
			from = { has_country_flag = marauder_3 }
			NOR = {
				has_country_flag = asked_about_religion
				is_homicidal = yes
			}
		}
		response_text = marauder.550.c.response
		is_dialog_only = yes
		hidden_effect = { set_country_flag = asked_about_religion }
		ai_chance = { factor = 0.1 }
	}
	option = { # Rebel?
		name = marauder_fabricator_rebel
		trigger = {
			is_subject_of_khan = yes
			any_agreement = { agreement_preset = preset_fabricator_satrapy }
		}
		allow = { NOT = { has_active_event = { marauder.554 } } }
		hidden_effect = {
			country_event = { id = marauder.554 }
		}
		ai_chance = { factor = 2 }
	}
	option = { # Rebel?
		name = marauder.550.d
		trigger = {
			is_subject_of_khan = yes
			OR = {
				any_agreement = { agreement_preset = preset_machinesmith_satrapy }
				any_agreement = { agreement_preset = preset_satrapy }
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = marauder.550.d_fail
				NOT = { has_country_flag = rebellion_cooldown }
			}
			NOT = { has_active_event = { marauder.554 } }
		}
		hidden_effect = {
			country_event = { id = marauder.554 }
		}
		ai_chance = { factor = 2 }
	}
	# Option = { TODO copy of 554??
	# 	name = khan.896.g.desc # Uprising machinesmith
	# 	trigger = { any_agreement = { agreement_preset = preset_machinesmith_satrapy } }
	# 	hidden_effect = {
	# 		country_event = { id = khan.801 }
	# 	}
	# }
	option = {
		name = marauder.20.e
		default_hide_option = yes
		ai_chance = { factor = 0.1 }
	}
}

# Submit?
# From = Khan / Overlord
country_event = {
	id = marauder.551
	title = "greatkhan_diplo_header"
	desc = marauder.551.a.desc
	picture_event_data = {
		portrait = event_target:great_khan
		room = khorgis_khan_1_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	trigger = { has_been_declared_crisis = no }
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.551.a
		# sound = advisor_clicking_respons_01
		response_text = marauder.551.a.response
		allow = {
			OR = {
				custom_tooltip = { fail_text = "ACTION_ACTOR_MUST_BE_INDEPENDENT" is_subject = no }
				is_subject_of_khan = yes
			}
		}
		custom_tooltip = marauder.551.a.tt
		hidden_effect = {
			country_event = { id = khan.559 days = -1 }		# Pre-Submit to Khan
			set_subject_of = { who = event_target:raider_khanate preset = preset_satrapy }
			event_target:raider_khanate = {
				if = {
					limit = { is_hostile = prev }
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = yes
					}
				}
				country_event = { id = khan.309 days = 1 } # To be sure
				copy_random_tech_from = { who = prev area = engineering }
				add_resource = { influence = 40 }
			}
		}
	}
	option = {
		name = marauder.551.a
		sound = full_tut_advisor_01
		trigger = {
			OR = {
				is_militarist = yes
				has_militarist_government = yes
				# 	has_spiritualist_government = yes
				# 	has_militarist_government = yes
				# 	is_spiritualist = yes
			}
			OR = {
				relative_power = {
					who = event_target:raider_khanate
					category = all
					value > pathetic
				}
				has_origin = "origin_khan_successor"
			}
			tech_unlocked_ratio = { who = from ratio < 0.7 }
		}
		response_text = marauder.551.a.response
		allow = {
			OR = {
				custom_tooltip = { fail_text = "ACTION_ACTOR_MUST_BE_INDEPENDENT" is_subject = no }
				is_subject_of_khan = yes
			}
		}
		custom_tooltip = marauder.551.a.tt
		hidden_effect = {
			country_event = { id = khan.559 days = -1 } # Pre-Submit to Khan
			set_subject_of = { who = event_target:raider_khanate preset = preset_war_satrapy }
			event_target:raider_khanate = {
				if = {
					limit = { is_hostile = prev }
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = yes
					}
				}
				country_event = { id = khan.309 days = 1 } # To be sure
				copy_random_tech_from = { who = prev area = engineering }
				add_resource = { influence = 40 }
			}
		}
		ai_chance = { factor = 3 }
	}
	option = {
		name = marauder.551.b
		response_text = marauder.551.b.response
		trigger = { from = { is_same_empire = root } }
		# default_hide_option = yes
		ai_chance = { factor = 0.2 }
	}
	option = {
		name = MI_NEUTRAL_GREETING_01
		response_text = HG_HOSTILE_GREETING_01
		trigger = { NOT = { from = { is_same_empire = root } } }
		# default_hide_option = yes
		ai_chance = { factor = 0.2 }
	}
}

### Initial Reinforcement for Encouraging Satrap.
### Marauder Establishes Base in Capital System.
country_event = {
	id = marauder.553
	title = "marauder.553.name"
	desc = "marauder.553.desc"
	picture = GFX_evt_khan_throne_room
	show_sound = event_conversation
	location = event_target:garrison_base
	is_triggered_only = yes
	trigger = {
		# has_global_flag = marauder_crisis_started
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		is_subject_of_khan = yes
		event_target:raider_khanate = {
			NOT = {
				any_owned_fleet = {
					is_mobile = no
					has_fleet_flag = satrapy_garrison
					any_owned_ship = { is_ship_size = marauder_void_dwelling }
					is_within_borders_of = prevprev
				}
			}
		}
	}
	immediate = {
		save_event_target_as = satrapy_empire
		if = {
			limit = { exists = capital_scope }
			capital_scope = {
				save_event_target_as = capital_planet
				solar_system = { save_event_target_as = capital_system }
			}
		}
		else = {
			ordered_owned_planet = {
				limit = { is_colony = yes }
				position = 0
				order_by = trigger:num_pops
				save_event_target_as = capital_planet
				solar_system = { save_event_target_as = capital_system }
			}
		}

		event_target:raider_khanate = {
			if = {
				limit = { is_hostile = prev }
				set_faction_hostility = { target = prev set_hostile = no set_neutral = yes }
				prev = {
					set_faction_hostility = { target = prev set_hostile = no set_neutral = yes }
				}
			}
			country_event = { id = khan.309 days = 1 } # To be sure
		}

		if = {
			limit = {
				exists = event_target:capital_system
				event_target:capital_system = {
					NOT = {
						any_fleet_in_system = { is_mobile = no has_fleet_flag = satrapy_garrison any_owned_ship = { is_ship_size = marauder_void_dwelling } }
					}
				}
			}
			# CmtEffectCreateEncouragingBase = yes		## event_target:garrison_base
			create_fleet = {
				effect = {
					set_owner = prev
					create_ship = {
						name = "NAME_Garrison_Base"
						design = "NAME_Void_Dwelling"
						graphical_culture = event_target:raider_khanate
					}
					set_location = {
						target = event_target:capital_planet
						distance = 50
						angle = random
					}
					save_event_target_as = garrison_base
					set_fleet_flag = satrapy_garrison
					if = {
						limit = {
							event_target:CmtGlobalVar = {
								OR = {
									check_variable = { which = CmtVarReinforceCycle_Khan value = 2 }
									check_variable = { which = CmtVarReinforceCycle_Khan value = 3 }
									check_variable = { which = CmtVarReinforceCycle_Khan value = 4 }
								}
							}
						}
						set_variable = { which = CmtVarKhanReinforcementCounter value = 10 } # Base scope
					}
					# fleet_event = { id = marauder.560 days = 10 } vanilla
					if = {
						limit = {
							event_target:CmtGlobalVar = {
								OR = {
									check_variable = { which = CmtVarReinforceCycle_Khan value < 2 }
									check_variable = { which = CmtVarReinforceCycle_Khan value > 4 }
								}
							}
						}
						fleet_event = { id = marauder.560 days = 600 random = 360 }
					}
					else = {
						fleet_event = { id = marauder.560 days = 160 random = 90 }
						# Set var counter (CmtVarKhanReinforcementCounter) for next cycle
						event_target:raider_khanate = { event_target:CmtGlobalVar = { CmtEffectKhanIncreasementReinforcementCycle = yes } }
					}
				}
			}

			event_target:garrison_base = {
				if = {
					limit = { exists = event_target:marauders_garrison_1 }
					set_owner = event_target:marauders_garrison_1
				}
				# CmtEffectCreateAdmiralty_KhanEncourager
				event_target:raider_khanate = {
					create_fleet = {
						name = "NAME_Garrison_Fleet"
						effect = {
							set_owner = prev
							set_fleet_flag = satrapy_garrison_fleet
							event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlShip value = CmtVarFleetPower_Khan } }
							prev = { CmtEffectResetLoop = yes }
							while = {
								limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlShip value > 0.125 } } }
								event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlShip value = -0.25 } }
								while = { count = 5 CmtEffectCreateShip_Outrider = yes }			## 22
								while = { count = 3 CmtEffectCreateShip_Lancer = yes }				## 14
								while = { count = 2 CmtEffectCreateShip_VoidChampion = yes }		## 8
								prev = {
									CmtEffectProgressLoop2 = yes
									switch = { trigger = has_country_flag
										CmtFlagLoopA = { prev = { CmtEffectCreateShip_Lancer = yes } }
										CmtFlagLoopZ = { prev = { CmtEffectCreateShip_Outrider = yes } }
									}
								}
							}
							CmtFleetSetAuxParam_KhanEncourager = yes
						}
						settings = {
							garrison = yes
							uses_naval_capacity = no
						}
					}
					CmtEffectCreateAdmiral_OwnerStandard = yes
					last_created_fleet = { assign_leader = last_created_leader }
				}
				if = {
					limit = { exists = event_target:marauders_garrison_1 }
					if = {
						limit = { exists = last_created_leader }
						last_created_leader = { set_owner = event_target:marauders_garrison_1 }
					}
					if = {
						limit = { event_target:marauders_garrison_1 = { is_hostile = root } }
						event_target:marauders_garrison_1 = {
							set_faction_hostility = { target = root set_friendly = yes }
						}
					}
				}
			}

			event_target:raider_khanate = { add_trust = { who = root amount = 90 } }
			add_trust = { who = event_target:raider_khanate amount = 30 }
		}
	}
	option = { name = marauder.553.a }
	after = {
		hidden_effect = {
			set_update_modifiers_batch = begin
			event_target:raider_khanate = {
				copy_random_tech_from = { who = prev area = physics }
				country_event = { id = khan.312 days = -1 } # Create Garrison Dummy Country
			}
			set_update_modifiers_batch = end
		}
	}
}

# Rebel?
country_event = {
	id = marauder.554
	title = "greatkhan_diplo_header"
	desc = marauder.554.a.desc
	desc = {
		text = marauder_fabricator_threat
		exclusive_trigger = { any_agreement = { agreement_preset = preset_fabricator_satrapy } }
	}
	picture_event_data = {
		portrait = event_target:great_khan
		room = khorgis_khan_1_room
	}
	is_triggered_only = yes
	auto_select = yes
	force_open = yes
	auto_opens = yes
	diplomatic = yes
	trigger = {
		NOT = { has_country_flag = marauder_diplomacy_engaged }
		exists = event_target:raider_khanate
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# option = {
	# 	name = marauder_fabricator_disloyal
	# 	response_text = marauder.554.a.response
	# 	exclusive_trigger = { any_agreement = { agreement_preset = preset_fabricator_satrapy } }
	# }
	option = {
		name = marauder.554.a
		sound = no_tut_advior_02
		response_text = marauder.554.a.response
		set_subject_of = { who = none }
		hidden_effect = {
			set_country_flag = rebelling_satrapy
			set_timed_country_flag = { flag = rebellion_cooldown days = @CmtConstKhanLifespan_5e }
			# if = { limit = { has_modifier = "satrapy_of_horde" } remove_modifier = "satrapy_of_horde" }
			if = {
				limit = { is_variable_set = "planets_lost_to_marauder" }
				multiply_variable = { which = "planets_lost_to_marauder" value = 0.2 }				# clear_variable = "planets_lost_to_marauder"
			}
			if = {
				limit = { has_federation = yes is_in_federation_with = event_target:raider_khanate }
				leave_alliance = { override_requirements = yes }
			}

			# Get actual garrison_base (commonly capital system)
			if = {
				limit = {
					exists = capital_scope
					capital_scope.solar_system = {
						any_fleet_in_system = { is_mobile = no has_fleet_flag = satrapy_garrison any_owned_ship = { is_ship_size = marauder_void_dwelling } }
					}
				}
				capital_scope.solar_system = { save_event_target_as = garrison_base_system }
			}
			else_if = {
				limit = {
					any_system_within_border = {
						any_fleet_in_system = {
							is_mobile = no
							has_fleet_flag = satrapy_garrison
							any_owned_ship = { is_ship_size = marauder_void_dwelling }
						}
					}
				}
				random_system_within_border = {
					limit = {
						any_fleet_in_system = {
							is_mobile = no
							has_fleet_flag = satrapy_garrison
							any_owned_ship = { is_ship_size = marauder_void_dwelling }
						}
					}
					save_event_target_as = garrison_base_system
				}
			}
			else_if = {
				limit = {
					any_owned_planet = {
						solar_system = {
							any_fleet_in_system = {
								is_mobile = no
								has_fleet_flag = satrapy_garrison
								any_owned_ship = { is_ship_size = marauder_void_dwelling }
							}
						}
					}
				}
				random_owned_planet = {
					limit = {
						solar_system = {
							any_fleet_in_system = {
								is_mobile = no
								has_fleet_flag = satrapy_garrison
								any_owned_ship = { is_ship_size = marauder_void_dwelling }
							}
						}
					}
					solar_system = { save_event_target_as = garrison_base_system }
				}
			}
			else = {
				random_owned_planet = {
					limit = { exists = solar_system.starbase }
					weights = {
						base = 1
						modifier = { add = 20 is_capital = yes }
						modifier = { add = 40 solar_system = { any_fleet_in_system = { has_fleet_flag = satrapy_garrison_fleet } } }
					}
					solar_system = { save_event_target_as = garrison_base_system }
				}
			}

			if = {
				limit = { exists = event_target:garrison_base_system }
				if = {
					limit = { is_ai = yes }
					event_target:garrison_base_system = {
						random_fleet_in_system = { # Own 1st garrison
							limit = {
								is_mobile = yes
								has_fleet_flag = satrapy_garrison_fleet
								NOT = { is_owned_by = root }
							}
							set_owner = root
							if = {
								limit = { exists = leader }
								leader = { set_owner = root }
							}
							remove_fleet_flag = satrapy_garrison_fleet
						}
						event_target:raider_khanate = {
							ordered_owned_fleet = { # Own 1st auxuliaries
								limit = {
									is_mobile = yes
									has_fleet_flag = horde_auxuliaries
									exists = leader
									exists = solar_system
									solar_system = { is_owned_by = root }
									leader = { is_same_species = root }
								}
								position = 0
								order_by = trigger:fleet_power
								set_owner = root
								leader = { set_owner = root }
							}
						}
					}
					# 2nd fleet try
					if = {
						limit = { used_naval_capacity_percent < 0.85 }
						event_target:garrison_base_system = {
							random_fleet_in_system = { # Own 2nd garrison
								limit = {
									is_mobile = yes
									has_fleet_flag = satrapy_garrison_fleet
									NOT = { is_owned_by = root }
								}
								set_owner = root
								if = {
									limit = { exists = leader }
									leader = { set_owner = root }
								}
							}
						}
						event_target:raider_khanate = {
							ordered_owned_fleet = { # Own 2nd auxuliaries
								limit = {
									is_mobile = yes
									has_fleet_flag = horde_auxuliaries
									exists = leader
									exists = solar_system
									solar_system = { is_owned_by = root }
									leader = { is_same_species = root }
								}
								position = 0
								order_by = trigger:fleet_power
								set_owner = root
								leader = { set_owner = root }
							}
						}
					}
				}
				# 3rd fleet try (1st for non-ai)
				if = {
					limit = { used_naval_capacity_percent < 0.85 }
					event_target:garrison_base_system = {
						random_fleet_in_system = { # Own 3nd garrison
							limit = {
								is_mobile = yes
								has_fleet_flag = satrapy_garrison_fleet
								NOT = { is_owned_by = root }
							}
							set_owner = root
							if = {
								limit = { exists = leader }
								leader = { set_owner = root }
							}
						}
					}
					event_target:raider_khanate = {
						ordered_owned_fleet = { # Own 3nd auxuliaries
							limit = {
								is_mobile = yes
								has_fleet_flag = horde_auxuliaries
								exists = leader
								exists = solar_system
								solar_system = { is_owned_by = root }
								leader = { is_same_species = root }
							}
							position = 0
							order_by = trigger:fleet_power
							set_owner = root
							leader = { set_owner = root }
						}
					}
				}
				event_target:garrison_base_system = {
					random_fleet_in_system = { # Destroy base
						limit = {
							is_mobile = no
							has_fleet_flag = satrapy_garrison
							exists = solar_system
							solar_system = { is_owned_by = root }
						}
						destroy_fleet = { target = this destroy_template = yes }
					}
					random_fleet_in_system = { # Dissolve 1 garrison!?
						limit = {
							exists = owner
							is_mobile = yes
							OR = {
								is_owned_by = event_target:raider_khanate
								AND = {
									exists = event_target:marauders_garrison_1
									is_owned_by = event_target:marauders_garrison_1
								}
							}
						}
						destroy_fleet = { target = this destroy_template = yes }
					}
					if = {
						limit = { exists = starbase }
						starbase = {
							set_owner = root
							if = {
								limit = { has_starbase_size = starbase_marauder }
								set_starbase_size = starbase_starhold
							}
						}
					}
					every_fleet_in_system = { # Take stations!?
						limit = {
							is_mobile = no
							OR = {
								is_owned_by = event_target:raider_khanate
								AND = {
									exists = event_target:marauders_garrison_1
									is_owned_by = event_target:marauders_garrison_1
								}
							}
						}
						set_owner = root
					}
				}
			}

			if = {
				limit = {
					has_global_flag = great_khan_wins # The Great Khan Expanded
					event_target:raider_khanate = {
						any_war = {
							OR = {
								using_war_goal = { type = "wg_satrapy_independence" owner = attacker }
								using_war_goal = { type = "wg_independence" owner = attacker }
							}
							NOT = {
								is_war_participant = { who = root side = attackers }
							}
						}
					}
				}
				event_target:raider_khanate = {
					random_war = {
						limit = {
							OR = {
								using_war_goal = { type = "wg_satrapy_independence" owner = attacker }
								using_war_goal = { type = "wg_independence" owner = attacker }
							}
							NOT = {
								is_war_participant = { who = root side = attackers }
							}
						}
						root = {
							join_war_on_side = { war = prev side = attackers }
						}
						# Remove all non marauder related from war.
						every_defender = {
							limit = {
								NOR = {
									# is_same_empire = prevprev
									has_origin = "origin_khan_successor"
									any_agreement = { agreement_preset = preset_war_satrapy }
								}
								CmtTriggerIsMarauder = no
							}
							prev = {
								prev = { set_truce = { target = prev type = war } }
								remove_war_participant = prev
							}
						}
					}
				}
			}
			else = {
				every_war = { # End War
					limit = {
						is_war_participant = { who = event_target:raider_khanate side = root }
					}
					prev = { set_truce = { target = prev type = war } }
					remove_war_participant = root
				}
				if = {
					limit = {
						NOT = {
							any_war = {
								OR = {
									using_war_goal = { type = "wg_satrapy_independence" owner = attacker }
									using_war_goal = { type = "wg_independence" owner = attacker }
								}
							}
						}
					}
					event_target:raider_khanate = {
						if = {
							limit = {
								any_war = {
									OR = {
										using_war_goal = { type = "wg_satrapy_independence" owner = attacker }
										using_war_goal = { type = "wg_independence" owner = attacker }
									}
									NOT = {
										is_war_participant = { who = root side = attackers }
									}
									attacker_war_exhaustion < 0.6
								}
							}
							random_war = {
								limit = {
									OR = {
										using_war_goal = { type = "wg_satrapy_independence" owner = attacker }
										using_war_goal = { type = "wg_independence" owner = attacker }
									}
									NOT = {
										is_war_participant = { who = root side = attackers }
									}
								}
								root = {
									join_war_on_side = { war = prev side = attackers }
								}
							}
						}
						else = {
							root = {
								declare_war = {
									target = prev
									name = "NAME_Rebellion"
									attacker_war_goal = "wg_satrapy_independence"
								}
							}
						}
					}
				}
			}

			event_target:raider_khanate = {
				add_opinion_modifier = { modifier = opinion_traitor_to_empire who = prev }
				if = {
					limit = { NOT = { is_hostile = root } }
					set_faction_hostility = {
						target = root
						set_hostile = yes
					}
				}
			}
			if = {
				limit = {
					exists = event_target:marauders_garrison_1
					event_target:marauders_garrison_1 = { NOT = { is_hostile = root } }
				}
				set_faction_hostility = {
					target = event_target:marauders_garrison_1
					set_hostile = yes
				}
			}
		}
		ai_chance = { factor = 2 }
	}
	option = {
		name = marauder_fabricator_loyal
		trigger = { any_agreement = { agreement_preset = preset_fabricator_satrapy } }
		response_text = marauder.554.b.response
		ai_chance = { factor = 0.1 }
	}
	option = {
		name = marauder.554.b
		trigger = { NOT = { any_agreement = { agreement_preset = preset_fabricator_satrapy } } }
		# sound = no_tut_advior_07
		response_text = marauder.554.b.response
		ai_chance = { factor = 0.1 }
	}
}

###########################
### While Khan Reigning ###
###########################

### NPC (AI Empire) Submits to Marauder.
country_event = {
	id = marauder.555
	hide_window = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		NOR = {
			has_global_flag = great_khan_dead
			# has_global_flag = great_khan_wins
			has_country_flag = rebelling_satrapy
			has_been_declared_crisis = yes
			has_country_flag = rebellion_cooldown
		}
		CmtTriggerNowInKhanCrisis = yes
		merg_is_default_empire = yes
		is_subject = no
		is_ai = yes
		check_variable = { which = "planets_lost_to_marauder" value > 2 }
		is_homicidal = no
		relative_power = {
			who = event_target:raider_khanate
			category = fleet
			value = pathetic
		}
	}
	mean_time_to_happen = {
		years = 6
		modifier = {
			factor = 0.5
			OR = {
				check_variable = { which = "planets_lost_to_marauder" value > 11 }
				num_owned_planets < 4
			}
		}
		modifier = {
			factor = 0.1
			OR = {
				check_variable = { which = "planets_lost_to_marauder" value > 22 }
				num_owned_planets < 4
			}
		}
		modifier = {
			factor = 3
			OR = {
				has_global_flag = great_khan_wins
				has_ai_personality = honorbound_warriors
				is_galactic_emperor = yes
				is_part_of_galactic_council = yes
				# has_ai_personality = technological_warriors ? from mod
			}
		}
		modifier = {
			factor = 2
			OR = {
				has_ai_personality = xenophobic_isolationists
				is_gestalt = yes
				has_federation = yes
				is_part_of_galactic_council = yes
			}
		}
		modifier = {
			factor = 0.6
			OR = {
				has_ai_personality = peaceful_traders
				has_origin = "origin_khan_successor"
			}
		}
		modifier = {
			factor = 0.4
			OR = {
				has_ai_personality = fanatic_befrienders
				# relative_power = { who = event_target:raider_khanate category = fleet value < inferior }
				AND = {
					is_at_war = yes
					def_war_exhaustion_sum > 0.95
				}
			}
		}
	}
	immediate = {
		# var = "planets_lost_to_marauder" is increased on .503, .527 and .528
		# country_event = { id = marauder.550 } # Submit to Khan
		country_event = { id = khan.559 days = -1 } # Pre-Submit to Khan
		event_target:raider_khanate = {
			if = {
				limit = { is_hostile = prev }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					# set_neutral = yes
					set_friendly = yes
				}
			}
			country_event = { id = khan.309 days = 1 } # To be sure
		}
	}
	after = {
		set_subject_of = { who = event_target:raider_khanate preset = preset_satrapy }
	}
}

### Regular Reinforcements at Capital of Satrap (Marauder Auxiliary Cycle)
# This = Garrison_Base
fleet_event = {
	id = marauder.560
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_scope_valid = yes
		exists = owner
		CmtTriggerNowInKhanCrisis = yes
		OR = {
			is_owned_by = event_target:raider_khanate
			AND = {
				exists = event_target:marauders_garrison_1
				is_owned_by = event_target:marauders_garrison_1
			}
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:satrapy_empire }
				exists = space_owner
				space_owner = {
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebelling_satrapy }
					exists = overlord # is_overlord_to not working
					root.owner = { is_same_empire = prev.overlord }
				}
			}
			space_owner = { save_event_target_as = satrapy_empire }
		}
		if = {
			limit = { exists = event_target:satrapy_empire }
			event_target:satrapy_empire = {
				owner_species = { save_event_target_as = satrapy_species }
				set_variable = { which = "satrapy_fleet_power" value = trigger:fleet_power }
				# Get normal possible capacity (divide by 0 cause crash)
				if = {
					limit = { check_variable_arithmetic = { which = trigger:used_naval_capacity_percent value > 0 } }
					divide_variable = { which = "satrapy_fleet_power" value = trigger:used_naval_capacity_percent }
				}
				else = { multiply_variable = { which = "satrapy_fleet_power" value = 10 } }
				divide_variable = { which = "satrapy_fleet_power" value = 28000 }
				round_variable = "satrapy_fleet_power"
				if = {
					limit = { check_variable = { which = "satrapy_fleet_power" value < 2 } }
					set_variable = { which = "satrapy_fleet_power" value = 2 } # Min
				}
				else_if = {
					limit = { check_variable = { which = "satrapy_fleet_power" value > 5 } }
					set_variable = { which = "satrapy_fleet_power" value = 5 } # Max
				}
				if = {
					limit = {
						exists = event_target:marauders_garrison_1
						event_target:marauders_garrison_1 = { is_hostile = root }
					}
					event_target:marauders_garrison_1 = {
						set_faction_hostility = { target = prev set_friendly = yes }
					}
				}
			}
			if = {
				limit = {
					solar_system = {
						count_fleet_in_system = {
							count < event_target:satrapy_empire.satrapy_fleet_power
							limit = {
								is_owned_by = event_target:raider_khanate
								has_fleet_flag = horde_auxuliaries
							}
						}
					}
					OR = {
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarReinforceCycle_Khan value < 2 } }
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarReinforceCycle_Khan value > 4 } }
						check_variable = { which = CmtVarKhanReinforcementCounter value > 9.5 }
					}
				}
				# CmtEffectCreateAdmiralty_KhanSubReinforcement
				event_target:raider_khanate = {
					event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = CmtVarCombatFleetNumber_Khan } }
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.875 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -1 } }
						if = {
							limit = { event_target:satrapy_empire = { max_naval_capacity < 100 } }
							CmtEffectCreateFleet_KhanSubReinforcement1 = yes
						}
						else_if = {
							limit = { event_target:satrapy_empire = { max_naval_capacity < 200 } }
							CmtEffectCreateFleet_KhanSubReinforcement2 = yes
						}
						else_if = {
							limit = { event_target:satrapy_empire = { max_naval_capacity < 300 } }
							CmtEffectCreateFleet_KhanSubReinforcement3 = yes
						}
						else_if = {
							limit = { event_target:satrapy_empire = { max_naval_capacity < 500 } }
							CmtEffectCreateFleet_KhanSubReinforcement4 = yes
						}
						else = { CmtEffectCreateFleet_KhanSubReinforcement5 = yes }
						if = {
							limit = { exists = event_target:marauders_garrison_1 }
							last_created_fleet = { set_owner = event_target:marauders_garrison_1 }
							last_created_leader = { set_owner = event_target:marauders_garrison_1 }
						}
					}
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.125 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } }
						random_list = {
							100 = {
								event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = 0 } }
								if = {
									limit = { event_target:satrapy_empire = { max_naval_capacity < 100 } }
									CmtEffectCreateFleet_KhanSubReinforcement1 = yes
								}
								else_if = {
									limit = { event_target:satrapy_empire = { max_naval_capacity < 200 } }
									CmtEffectCreateFleet_KhanSubReinforcement2 = yes
								}
								else_if = {
									limit = { event_target:satrapy_empire = { max_naval_capacity < 300 } }
									CmtEffectCreateFleet_KhanSubReinforcement3 = yes
								}
								else_if = {
									limit = { event_target:satrapy_empire = { max_naval_capacity < 500 } }
									CmtEffectCreateFleet_KhanSubReinforcement4 = yes
								}
								else = { CmtEffectCreateFleet_KhanSubReinforcement5 = yes }
								if = {
									limit = { exists = event_target:marauders_garrison_1 }
									last_created_fleet = { set_owner = event_target:marauders_garrison_1 }
									last_created_leader = { set_owner = event_target:marauders_garrison_1 }
								}
							}
							300 = { }
						}
					}
				}
				change_variable = { which = CmtVarKhanReinforcementCounter value = -10 }
			}

			event_target:raider_khanate = {
				add_trust = { who = event_target:satrapy_empire amount = 5 }
				random_agreement = {
					limit = {
						is_owned_by = prev
						target = { is_same_empire = event_target:satrapy_empire }
					}
					add_loyalty = 3
				}
			}

			if = {
				limit = {
					event_target:CmtGlobalVar = {
						OR = {
							check_variable = { which = CmtVarReinforceCycle_Khan value < 2 }
							check_variable = { which = CmtVarReinforceCycle_Khan value > 4 }
						}
					}
				}
				fleet_event = { id = marauder.560 days = 600 random = 360 }
			}
			else = {
				fleet_event = { id = marauder.560 days = 160 random = 90 }
				# Set var counter (CmtVarKhanReinforcementCounter) for next cycle
				event_target:raider_khanate = { event_target:CmtGlobalVar = { CmtEffectKhanIncreasementReinforcementCycle = yes } }
			}
		} # else cycle ends
	}
}

### The Future of the Horde (HIDDEN)
country_event = {
	id = marauder.600
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# OR = { is_country_type = awakened_marauders AND = {
		exists = event_target:raider_khanate
		is_same_empire = event_target:raider_khanate
		NOT = { has_country_flag = marauder600_happened }
	}
	immediate = {
		set_country_flag = marauder600_happened
		set_country_flag = khan_dead_event_fine
		remove_global_flag = khan_no_die
		remove_global_flag = great_khan_announcement
		remove_global_flag = horde_triggered
		remove_country_flag = CmtFlagKhanNoDieCountry
		remove_global_flag = great_khan_wins
		clear_variable = CmtVarKhanRemainingLive
		remove_global_flag = marauder_crisis_ongoing	# must be removed before
		room_name_override = ""
		set_timed_global_flag = { flag = CmtFlagKillDoubleBookingKhan years = 2 }

		if = {
			limit = { has_global_flag = great_khan_wins }
			# clear_global_event_target = great_khan
			# clear_global_event_target = raider_khanate needed for future
			clear_global_event_target = great_khan_ruler
			if = {
				limit = { exists = event_target:marauders_garrison_1 }
				event_target:marauders_garrison_1 = {
					every_controlled_fleet = {
						limit = {
							OR = {
								has_fleet_flag = satrapy_garrison
								has_fleet_flag = satrapy_garrison_fleet
							}
						}
						destroy_fleet = this
					}
					destroy_country = yes
				}
			}
			if = {
				limit = { has_global_flag = war_in_heaven_started }
				remove_global_flag = sleepers_awake_rival_waking
				remove_global_flag = war_in_heaven_started
				remove_global_flag = war_in_heaven_debug
				clear_global_event_target = SecondSleeper
				if = {
					limit = { has_global_flag = war_in_heaven_ongoing }
					remove_global_flag = war_in_heaven_ongoing
					if = {
						limit = { exists = event_target:FirstSleeper }
						remove_country_flag = sleepers_awake_first_sleeper
						remove_country_flag = sleepers_awake_ancient_rival
						remove_country_flag = sleepers_awake_first
						event_target:FirstSleeper = {
							every_war = { # End War in Heaven
								limit = {
									any_war_participant = {
										prev = {
											using_war_goal = { type = wg_war_in_heaven owner = prev }
										}
									}
									is_scope_type = war # If not the error.log tells: Invalid Scope
								}
								prev = { set_truce = { target = prev type = war } }
								end_war_effect = yes
								# TODO Notify?
								# every_playable_country = {
								# 	limit = { is_ai = no }
								# 	country_event = { id = war_in_heaven.6 }
								# }
								# observer_event = { id = observer.78 }
							}
							if = {
								limit = { end_game_years_passed < 0 }
								set_country_type = fallen_empire
							}
						}
						clear_global_event_target = FirstSleeper
					}
				}
			}
			random_federation = {
				limit = { has_federation_flag = non_aligned_league }
				random_member = {
					limit = { is_federation_leader = yes }
					set_country_flag = last_best_hope
					remove_country_flag = ai_no_wars
					every_war = { # End War in Heaven
						limit = {
							any_war_participant = {
								prev = {
									using_war_goal = { type = wg_war_in_heaven owner = prev }
								}
							}
							is_scope_type = war # If not the error.log tells: Invalid Scope
						}
						prev = { set_truce = { target = prev type = war } }
						end_war_effect = yes
					}
				}
				every_member = {
					limit = { is_federation_leader = no }
					remove_country_flag = ai_no_wars
					leave_alliance = { override_requirements = yes }
				}
				dissolve_federation = yes
			}
		}

		if = { # Khan Extended
			limit = {
				is_at_war = yes
				is_war_leader = yes
				# any_war = { is_war_participant = root }
			}
			every_war = { # End Expansion War
				# limit = { is_war_participant = { who = root side = attackers } }
				# limit = { is_scope_type = war } # If not the error.log tells: Invalid Scope
				prev = { set_truce = { target = prev type = war } }
				end_war_effect = yes
			}
			# End subject wars
			every_subject = {
				limit = { is_at_war = yes }
				every_war = {
					limit = {
						is_scope_type = war # TODO because of strange error.
						OR = {
							using_war_goal = { type = wg_marauder_expansion owner = prev }
							using_war_goal = { type = wg_great_expansion owner = prev }
						}
					}
					prev = { set_truce = { target = prev type = war } }
					remove_war_participant = prev
				}
			}
			# Compensatory allowance for victims (some kind of compensation for damage done)
			every_playable_country = {
				limit = { is_variable_set = "planets_lost_to_marauder" }
				# multiply_variable = { which = "planets_lost_to_marauder" value = 35 }
				round_variable = "planets_lost_to_marauder"
				while = {
					count = planets_lost_to_marauder
					add_resource = { influence = 30 alloys = 50 }
				}
				clear_variable = "planets_lost_to_marauder"
			}
		} # End Khan Extended

		if = { # If Horde owns no planet.
			limit = {
				OR = {
					num_owned_planets < 1
					count_owned_planet = { # Fix (Vanilla) splitted system can lead to unserveyable: https://forum.paradoxplaza.com/forum/threads/stellaris-great-khan-event-renders-system-unserveyable.1548356/
						limit = {
							OR = {
								AND = { exists = space_owner space_owner = { is_same_empire = root } }
								solar_system = {
									OR = {
										NOT = { exists = owner }
										is_owned_by = root
									}
									NOT = {
										any_system_colony = {
											NOR = {
												is_planet = prevprev
												is_colonizable = yes
												is_owned_by = root
											}
										}
									}
								}
							}
						}
						count = 0
					}
				}
			}
			country_event = { id = marauder.604 } # Reverts to old ways.
		}
		else = { # Can only happen if Horde owns planets.
			country_event = { id = marauder_borders.1000 }
		}
		# clear_global_event_target = marauder_rally_point
		event_target:CmtGlobalVar = {
			if = {
				limit = { check_variable = { which = CmtVarKhanMultiple value = 3 } }
				remove_global_flag = CmtFlagNowInKhanInterval
				if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T0 } } # 7.5
					if = {
						limit = { check_variable = { which = CmtVarKhanInterval value > 0 } }
						set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = CmtVarKhanInterval }
					}
					### Do nothing
				}
				else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T1 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D1 }
				}
				else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T2 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D2 }
				}
				else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T3 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D3 }
				}
				else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T4 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D4 }
				}
				else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T5 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D5 }
				}
				else = {
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstTUnq_ConstKhanInterval }
				}
			}
		}
	}
	after = {
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
			event_target:CmtTargetMarauderRallyPoint1 = { remove_planet_flag = CmtFlagMarauderExpRallyPoint }
			clear_global_event_target = CmtTargetMarauderRallyPoint1
		}
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
			event_target:CmtTargetMarauderRallyPoint2 = { remove_planet_flag = CmtFlagMarauderExpRallyPoint }
			clear_global_event_target = CmtTargetMarauderRallyPoint2
		}
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
			event_target:CmtTargetMarauderRallyPoint3 = { remove_planet_flag = CmtFlagMarauderExpRallyPoint }
			clear_global_event_target = CmtTargetMarauderRallyPoint3
		}
		country_event = { id = khan.606 days = 3 } # destroy_country
	}
}

# The Diadochi (HIDDEN)
country_event = {
	id = marauder.601
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		owner_species = { save_event_target_as = marauder_species } # get_marauder_species = yes # (do it also later for each)
		save_event_target_as = first_diadochi
		set_update_modifiers_batch = begin

		force_remove_civic = civic_great_khans_legacy
		force_add_civic = civic_diadochi

		# every_owned_fleet = { # Delete everything except starbase_marauder
		# 	limit = {
		# 		count_owned_fleet = {
		# 			count < 1
		# 			limit = { is_ship_size = starbase_marauder }
		# 		}
		# 	}
		# 	delete_fleet = { target = this destroy_template = yes }
		# }

		every_subject = { # "The End of the Satrapy"
			limit = { is_default_or_fallen = yes }
			set_subject_of = { who = none }
			country_event = { id = marauder.670 days = 2 }			# Notify Satrap End
			# country_event = { id = marauder.671 days = 8 }		# Notify Garrison End
		}

		# # Cleanup possible old flags (previous reign)
		every_system_within_border = {
			limit = { is_potential_diadochi_system = no }
			switch = { trigger = has_star_flag
				first_diadochi_system	= { remove_star_flag = first_diadochi_system }
				second_diadochi_system	= { remove_star_flag = second_diadochi_system }
				third_diadochi_system	= { remove_star_flag = third_diadochi_system }
				fourth_diadochi_system	= { remove_star_flag = fourth_diadochi_system }
			}
		}
		# Cleanup temp vars
		every_playable_country = {
			limit = { is_variable_set = "successor_fleet_power" }
			clear_variable = "successor_fleet_power"
		}

		###
		### We're going to initially go with 1 Diadochi/Sector (By MrFunEGUY)
		# Count actual sectors
		export_trigger_value_to_variable = { trigger = num_sectors variable = actual_sector_count }
		set_variable = { which = num_diadochi value = actual_sector_count }
		# Calc amount Diadochi 2-6: 2=3s 3=4-6s 4=7-8s 5=9-12s 6>=13s
		if		= { limit = { check_variable = { which = num_diadochi value > 12 }	} set_variable = { which = num_diadochi value = 5 } } # 6
		else_if = { limit = { check_variable = { which = num_diadochi value > 8 }	} set_variable = { which = num_diadochi value = 4 } } # 5
		else_if = { limit = { check_variable = { which = num_diadochi value > 6 }	} set_variable = { which = num_diadochi value = 3 } } # 4
		else_if = { limit = { check_variable = { which = num_diadochi value > 4 }	} set_variable = { which = num_diadochi value = 2 } } # 3
		else	= { set_variable = { which = num_diadochi value = 1 } }		# 2

		# subtract_variable = { which = num_diadochi value = 1 } # Remove the original diadochi
		# if = { limit = { check_variable = { which = num_diadochi value < 5 } }
		# 	every_owned_sector = {
		# 		limit = { NOT = { has_sector_flag = finished_sector } }
		# 		set_sector_flag = leader_sector
		# 		set_sector_flag = diadochi_sector_@this
		# 	}
		# } else = { set_variable = { which = num_diadochi value = 5 }

		# First Diadoachi is original country Capital Sector
		set_country_flag = diadochi
		set_country_flag = diadochi_1
		capital_scope.sector = {
			set_sector_flag = leader_sector
			set_sector_flag = finished_sector
			set_sector_flag = counted_sector
			every_system_within_border = { set_star_flag = first_diadochi_system }
		}

		if = { # Five Diadochi - Sector method (mainly by MrFunEGUY)
			limit = { check_variable = { which = num_diadochi value >= 3 } }
			set_variable = { which = EX_sectors_per_diadochi value = actual_sector_count }
			subtract_variable = { which = EX_sectors_per_diadochi value = num_diadochi }
			if = {
				limit = { check_variable = { which = EX_sectors_per_diadochi value > 0 } }
				divide_variable = { which = EX_sectors_per_diadochi value = num_diadochi }
			}
			ceiling_variable = EX_sectors_per_diadochi
			log="Extra sectors per Diadochi: [This.EX_sectors_per_diadochi]"
			while = {
				count = num_diadochi
				ordered_owned_sector = {
					limit = { NOT = { has_sector_flag = counted_sector } }
					position = 0
					order_by = trigger:num_pops
					save_event_target_as = diadochi_leader_sector
					set_sector_flag = diadochi_sector_@this
					set_sector_flag = leader_sector
					set_sector_flag = counted_sector
					root = {
						while = {
							count = EX_sectors_per_diadochi
							limit = {
								any_owned_sector = {
									NOT = { has_sector_flag = counted_sector }
									any_system_within_border = {
										closest_system = {
											limit = {
												exists = sector
												sector = { has_sector_flag = diadochi_sector_@event_target:diadochi_leader_sector }
											}
											use_bypasses = yes
											max_steps = 3
										}
									}
								}
							}
							ordered_owned_sector = {
								limit = {
									NOT = { has_sector_flag = counted_sector }
									any_system_within_border = {
										closest_system = {
											limit = {
												exists = sector
												sector = { has_sector_flag = diadochi_sector_@event_target:diadochi_leader_sector }
											}
											use_bypasses = yes
											max_steps = 3
										}
									}
								}
								position = 1
								inverse = yes
								order_by = trigger:num_pops
								set_sector_flag = counted_sector
								set_sector_flag = diadochi_sector_@event_target:diadochi_leader_sector
								set_sector_flag = rebel_sector_follower_@event_target:diadochi_leader_sector
							}
						}
					}
				}
			}
			# Neighboring Sectors for First Diadochi (give the lowest)
			# while = {
			# 	count = EX_sectors_per_diadochi
			# 	limit = {
			# 		any_owned_sector = {
			# 			NOT = { has_sector_flag = counted_sector }
			# 			any_system_within_border = {
			# 				closest_system = {
			# 					limit = {
			# 						exists = sector
			# 						sector = { has_sector_flag = counted_sector }
			# 					}
			# 					use_bypasses = yes
			# 					max_steps = 1
			# 				}
			# 			}
			# 		}
			# 	}
			# 	ordered_owned_sector = {
			# 		limit = {
			# 			NOT = { has_sector_flag = counted_sector }
			# 			any_system_within_border = {
			# 				closest_system = {
			# 					limit = {
			# 						exists = sector
			# 						sector = { has_sector_flag = counted_sector }
			# 					}
			# 					use_bypasses = yes
			# 					max_steps = 1
			# 				}
			# 			}
			# 		}
			# 		position = 0
			# 		inverse = yes
			# 		order_by = trigger:num_pops
			# 		set_sector_flag = counted_sector
			# 	}
			# }
			while = {
				count = num_diadochi
				ordered_owned_sector = {
					limit = {
						has_sector_flag = leader_sector
						NOT = { has_sector_flag = finished_sector }
					}
					position = 0
					inverse = yes
					order_by = trigger:num_pops
					set_sector_flag = finished_sector
					save_event_target_as = diadochi_leader_sector
					## CREATE_DIADOCHI_COUNTRY
					if = {
						limit = { has_global_flag = cultural_overhaul_active }
						if = {
							limit = { has_global_flag = cultural_overhaul_funefork_active }
							random_list = {
								90 = {
									create_country = {
										name_list = random
										species = event_target:marauder_species
										type = default
										authority = auth_imperial
										civics = { civic = random civic = random }
										origin = "origin_khan_successor"
										ethos = {
											ethic = ethic_militarist
											ethic = ethic_authoritarian
										}
										ignore_initial_colony_error = yes
									}
								}
								9 = {
									create_country = {
										name_list = random
										species = event_target:marauder_species
										type = default
										authority = auth_dictatorial
										civics = { civic = random civic = random }
										origin = "origin_khan_successor"
										ethos = {
											ethic = ethic_militarist
											ethic = ethic_xenophobe
										}
										ignore_initial_colony_error = yes
									}
								}
								1 = {
									create_country = {
										name_list = random
										species = event_target:marauder_species
										type = default
										authority = auth_dict_democratic
										civics = { civic = random civic = random }
										origin = "origin_khan_successor"
										ethos = {
											ethic = ethic_militarist
											ethic = ethic_authoritarian
										}
										ignore_initial_colony_error = yes
									}
								}
							}
						}
						else = {
							random_list = {
								90 = {
									create_country = {
										name_list = random
										species = event_target:marauder_species
										type = default
										authority = auth_imperial
										civics = { civic = random civic = random }
										origin = "origin_khan_successor"
										ethos = {
											ethic = ethic_militarist
											ethic = ethic_authoritarian
										}
										ignore_initial_colony_error = yes
									}
								}
								10 = {
									create_country = {
										name_list = random
										species = event_target:marauder_species
										type = default
										authority = auth_dictatorial
										civics = { civic = random civic = random }
										origin = "origin_khan_successor"
										ethos = {
											ethic = ethic_militarist
											ethic = ethic_xenophobe
										}
										ignore_initial_colony_error = yes
									}
								}
							}
						}
					}
					else = {
						create_country = {
							name_list = random
							species = event_target:marauder_species
							type = default
							authority = auth_imperial
							civics = { civic = random civic = random }
							origin = "origin_khan_successor"
							ethos = {
								ethic = ethic_militarist
								ethic = ethic_authoritarian
							}
							ignore_initial_colony_error = yes
						}
					}
					last_created_country = {
						force_add_civic = civic_diadochi
						shift_ethic = ethic_fanatic_militarist
						set_name = random
					}
				}
			}

		}

		else_if = { # Four Diadochi
			limit = {
				OR = {
					check_variable = { which = num_diadochi value >= 3 }
					num_owned_planets > 12
					count_system_within_border = {
						count > 5
						limit = {
							any_system_colony = {
								is_owned_by = root
								uses_habitat_capitals = no
							}
							is_potential_diadochi_system = yes
						}
					}
				}
			}
			# assign_first_diadochi_planets = yes	is root
			assign_second_diadochi_planets = yes
			assign_third_diadochi_planets = yes
			assign_fourth_diadochi_planets = yes
			# TODO: does not work
			# assign_diadochi_planets = { NUM = first PCT = 0.25 }
			# assign_diadochi_planets = { NUM = second PCT = 0.33 }
			# assign_diadochi_planets = { NUM = third PCT = 0.5 }
			# assign_diadochi_planets = { NUM = fourth PCT = 1 }
			assign_diadochi_systems = yes
			# create_first_diadochi = yes	is root
			create_second_diadochi = yes
			create_third_diadochi = yes
			create_fourth_diadochi = yes
		}
		else_if = { # Three Diadochi
			limit = {
				OR = {
					check_variable = { which = num_diadochi value >= 2 }
					num_owned_planets > 9
					count_system_within_border = {
						count > 3
						limit = {
							any_system_colony = {
								is_owned_by = root
								uses_habitat_capitals = no
							}
							is_potential_diadochi_system = yes
						}
					}
				}
			}
			# assign_second_diadochi_planets = yes	is root
			assign_third_diadochi_planets = yes
			assign_fourth_diadochi_planets = yes
			# assign_diadochi_planets = { NUM = second PCT = 0.33 }
			# assign_diadochi_planets = { NUM = third PCT = 0.5 }
			# assign_diadochi_planets = { NUM = fourth PCT = 1 }
			assign_diadochi_systems = yes
			# create_second_diadochi = yes	is root
			create_third_diadochi = yes
			create_fourth_diadochi = yes
		}
		else = { # Two Diadochi (Marauder small)
			# assign_third_diadochi_planets = yes	is root
			assign_fourth_diadochi_planets = yes
			# assign_diadochi_planets = { NUM = third PCT = 0.5 }
			# assign_diadochi_planets = { NUM = fourth PCT = 1 }
			assign_diadochi_systems = yes
			# create_third_diadochi = yes	is root
			create_fourth_diadochi = yes
		}

		set_update_modifiers_batch = end
		# Notify
		observer_event = { id = observer.20 }
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.620 }
		}

		# Vanilla fix system survey + fix race condition establish communications!?
		country_event = { id = marauder_borders.2000 days = 5 }
	}
	after = {
		if = {
			limit = { exists = event_target:raider_khanate }
			if = { # If human player
				limit = {
					is_ai = no
					exists = event_target:third_diadochi
					is_same_empire = event_target:raider_khanate
				}
				event_target:third_diadochi = { set_player = event_target:raider_khanate }
			}
		}
	}
}

# The New Khanate (HIDDEN)
country_event = {
	id = marauder.602
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		get_marauder_species = yes
		# create_country = {
		# 	name_list = random
		# 	species = event_target:marauder_species
		# 	type = default
		# 	authority = auth_imperial
		# 	civics = {
		# 		civic = civic_great_khans_legacy
		# 		civic = random
		# 	}
		# 	origin = "origin_khan_successor"
		# 	# flag = {
		# 	# 	icon = { category = "pirate" file = }
		# 	# 	background = { category = "backgrounds" file = "triangle_split.dds" }
		# 	# 	colors = { "red" "black" "null" "null" }
		# 	# }
		# 	ethos = {
		# 		ethic = ethic_fanatic_militarist
		# 		ethic = ethic_authoritarian # ethic_xenophobe
		# 	}
		# 	ignore_initial_colony_error = yes
		# 	# exclude_day_zero_contact = root
		# 	effect = {
		# 		set_name = random
		# 		save_event_target_as = new_khanate
		# 		set_country_flag = new_khanate_flag
		# 		set_country_flag = first_alien_life
		# 		set_country_flag = has_encountered_other_empire
		# 		force_add_civic = civic_slaver_guilds
		# 	}
		# }
		every_subject = {
			limit = { is_default_or_fallen = yes }
			set_subject_of = { who = none }
			country_event = { id = marauder.670 days = 2 }			# Notify Satrap End
			# country_event = { id = marauder.671 days = 8 }		# Notify Garrison End
		}
		set_name = random
		save_event_target_as = new_khanate
		# Notify
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.640 }
		}
		observer_event = { id = observer.22 }

		# Gimmick for possible after-events
		switch = { trigger = has_country_flag
			marauder_1 = { event_target:new_khanate = { set_country_flag = marauder_1 save_global_event_target_as = marauder_country_1 } random_system_within_border = { limit = { has_star_flag = marauder_capital_1 } save_event_target_as = marauder_capital } }
			marauder_2 = { event_target:new_khanate = { set_country_flag = marauder_2 save_global_event_target_as = marauder_country_2 } random_system_within_border = { limit = { has_star_flag = marauder_capital_2 } save_event_target_as = marauder_capital } }
			marauder_3 = { event_target:new_khanate = { set_country_flag = marauder_3 save_global_event_target_as = marauder_country_3 } random_system_within_border = { limit = { has_star_flag = marauder_capital_3 } save_event_target_as = marauder_capital } }
		}
		# Similar code as in .604
		# Start restore partial Marauders (cheap version, without planet check)
		if = {
			limit = {
				calc_true_if = {
					amount >= 2
					AND = { exists = event_target:marauder_country_1 any_system_within_border = { has_star_flag = marauder_capital_1 } }
					AND = { exists = event_target:marauder_country_2 any_system_within_border = { has_star_flag = marauder_capital_2 } }
					AND = { exists = event_target:marauder_country_3 any_system_within_border = { has_star_flag = marauder_capital_3 } }
				}
			}
			# Get second right country
			if = {
				limit = {
					exists = event_target:marauder_country_1
					NOT = { is_same_empire = event_target:marauder_country_1 }
				}
				event_target:marauder_country_1 = { save_event_target_as = restored_marauders_2 }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
					event_target:CmtTargetMarauderRallyPoint1.solar_system = { save_event_target_as = second_marauder_system }
				}
			}
			else_if = {
				limit = {
					exists = event_target:marauder_country_2
					NOT = { is_same_empire = event_target:marauder_country_2 }
				}
				event_target:marauder_country_2 = { save_event_target_as = restored_marauders_2 }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
					event_target:CmtTargetMarauderRallyPoint2.solar_system = { save_event_target_as = second_marauder_system }
				}
			}
			else_if = {
				limit = {
					exists = event_target:marauder_country_3
					NOT = { is_same_empire = event_target:marauder_country_3 }
				}
				event_target:marauder_country_3 = { save_event_target_as = restored_marauders_2 }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
					event_target:CmtTargetMarauderRallyPoint3.solar_system = { save_event_target_as = second_marauder_system }
				}
			}
			## Set second_marauder_system
			if = {
				limit = { NOT = { exists = event_target:second_marauder_system } }
				random_system_within_border = {
					limit = {
						CmtTriggerMarauderCapitalSystem = yes
						NOT = { is_same_value = event_target:marauder_capital }
					}
					save_event_target_as = second_marauder_system
				}
			}
			event_target:second_marauder_system = {
				every_neighbor_system = {
					limit = {
						has_owner = yes
						is_owned_by = root
						exists = starbase
						has_star_flag = marauder_system
						NOT = { any_system_colony = { } }
					}
					starbase = { set_owner = event_target:restored_marauders_2 }
					every_neighbor_system = {
						limit = {
							has_owner = yes
							is_owned_by = root
							exists = starbase
							has_star_flag = marauder_system
							NOT = { any_system_colony = { } }
						}
						starbase = { set_owner = event_target:restored_marauders_2 }
					}
				}
			}
			every_owned_fleet = {
				limit = {
					is_mobile = yes
					is_owned_by = root
					is_within_borders_of = event_target:restored_marauders_2
				}
				set_owner = event_target:restored_marauders_2
				set_fleet_settings = {
					can_upgrade = yes
					can_disband = yes
					can_change_composition = yes
					can_change_leader = yes
				}
				if = {
					limit = { exists = leader }
					leader = {
						set_owner = event_target:restored_marauders_2
						set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
					}
					if = {
						limit = { NOT = { is_ship_class = shipclass_transport } }
						assign_leader = leader
					}
				}
				fleet_event = { id = khan.611 days = -1 }
			}
		} # End restore partial Marauders
		# country_event = { id = marauder.609 days = -1 }		# Fully handover
	}
	after = {
		if = {
			limit = { exists = event_target:raider_khanate }
			if = {
				limit = {
					is_ai = no
					exists = event_target:new_khanate
					is_same_empire = event_target:raider_khanate
				}
				event_target:new_khanate = { set_player = event_target:raider_khanate }
			}
		}
	}
}

# Democratic Federation (HIDDEN)
# This = awakened_marauders
country_event = {
	id = marauder.603
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		get_marauder_species = yes
		# create_country = {
		# 	name_list = random
		# 	name = random
		# 	species = event_target:marauder_species
		# 	type = default
		# 	authority = auth_democratic
		# 	civics = random
		# 	origin = "origin_khan_successor"
		# 	ethos = {
		# 		ethic = ethic_fanatic_egalitarian
		# 		ethic = ethic_xenophile
		# 	}
		# 	ignore_initial_colony_error = yes
		# 	exclude_day_zero_contact = root
		# 	effect = {
		# 		set_name = random
		# 		set_country_flag = democratic_khanate_flag
		# 		save_event_target_as = new_khanate
		# 		root = {
		# 			country_event = { id = marauder.609 days = -1 } # Fully handover
		# 		}
		# 	}
		# }
		clear_ethos = yes
		country_add_ethic = ethic_fanatic_egalitarian
		country_add_ethic = ethic_xenophile

		## SET_CULTURAL_OVERHAUL_ETHICS (By MrFunEGUY)
		if = {
			limit = { has_global_flag = cultural_overhaul_active }
			random_list = {
				1 = { country_add_ethic = ethic_pacifist }
				1 = { country_add_ethic = ethic_socialism }
				1 = { country_add_ethic = ethic_fanatic_socialism }
				1 = { country_add_ethic = ethic_capitalism }
				1 = { country_add_ethic = ethic_fanatic_capitalism }
				1 = { country_add_ethic = ethic_spiritualist }
				1 = { country_add_ethic = ethic_fanatic_spiritualist }
				1 = { country_add_ethic = ethic_materialist }
				1 = { country_add_ethic = ethic_fanatic_materialist }
			}
			if = {
				limit = {
					NOR = {
						has_ethic = ethic_fanatic_socialism
						has_ethic = ethic_fanatic_capitalism
						has_ethic = ethic_fanatic_spiritualist
						has_ethic = ethic_fanatic_materialist
					}
				}
				if = {
					limit = { is_pacifist = yes }
					random_list = {
						1 = { country_add_ethic = ethic_socialism }
						1 = { country_add_ethic = ethic_capitalism }
						1 = { country_add_ethic = ethic_spiritualist }
						1 = { country_add_ethic = ethic_materialist }
					}
				}
				else_if = {
					limit = { is_socialist = yes }
					random_list = {
						1 = { country_add_ethic = ethic_pacifist }
						1 = { country_add_ethic = ethic_spiritualist }
						1 = { country_add_ethic = ethic_materialist }
					}
				}
				else_if = {
					limit = { is_capitalism = yes }
					random_list = {
						1 = { country_add_ethic = ethic_pacifist }
						1 = { country_add_ethic = ethic_spiritualist }
						1 = { country_add_ethic = ethic_materialist }
					}
				}
				else_if = {
					limit = { is_spiritualist = yes }
					random_list = {
						1 = { country_add_ethic = ethic_socialism }
						1 = { country_add_ethic = ethic_capitalism }
						1 = { country_add_ethic = ethic_pacifist }
					}
				}
				else_if = {
					limit = { is_materialist = yes }
					random_list = {
						1 = { country_add_ethic = ethic_socialism }
						1 = { country_add_ethic = ethic_capitalism }
						1 = { country_add_ethic = ethic_pacifist }
					}
				}
			}
			random_list = {
				50 = { change_government = { authority = auth_democratic civics = random } }
				50 = { change_government = { authority = auth_strict_democratic civics = random } }
					}
		}
		else = {
			change_government = {
				authority = auth_democratic
				civics = random
			}
		}

		set_country_flag = democratic_khanate_flag
		save_event_target_as = new_khanate

		# Give khan_destroyer opportunity to join new federation.
		if = {
			limit = { NOT = { exists = event_target:khan_destroyer } }
			random_playable_country = {
				limit = {
					# merg_is_default_empire = yes
					has_country_flag = no_khan_do
					is_subject_of_khan = no
				}
				save_event_target_as = khan_destroyer
			}
		}
		if = {
			limit = {
				exists = event_target:khan_destroyer
				is_ai = yes
				is_subject_of_khan = no
				NOT = { has_active_event = { marauder.660 marauder.661 } }
			}
			event_target:khan_destroyer = { country_event = { id = marauder.661 } }
		}

		every_playable_country = {
			limit = {
				NOR = {
					is_ai = yes
					is_subject_of_khan = yes
					has_active_event = { marauder.660 marauder.661 }
				}
			}
			country_event = { id = marauder.661 }
		}

		every_subject = {
			set_subject_of = { who = none }
			country_event = { id = marauder.660 }
		}
		if = {
			limit = {
				count_country = {
					limit = {
						is_subject = yes # exists = overlord
						any_agreement = { agreement_preset = preset_satrapy }
					}
					count > 0
				}
			}
			every_country = {
				limit = {
					is_subject = yes # exists = overlord
					any_agreement = { agreement_preset = preset_satrapy }
				}
				country_event = { id = marauder.660 }
			}
		}
		observer_event = { id = observer.23 }
	}
	after = {
		if = {
			limit = { exists = event_target:raider_khanate }
			if = {
				limit = {
					is_ai = no
					exists = event_target:new_khanate
					is_same_empire = event_target:raider_khanate
				}
				event_target:new_khanate = { set_player = event_target:raider_khanate }
			}
		}
		set_name = random # only after marauder.660
	}
}

# The Old Ways (HIDDEN)
country_event = {
	id = marauder.604
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# any_planet_within_border = {} does not work on game load
	}
	immediate = {
		owner_species = { save_event_target_as = marauder_species }
		every_owned_fleet = {
			limit = {
				NOT = { is_ship_size = starbase_marauder }
				OR = {
					has_fleet_flag = satrapy_garrison
					has_fleet_flag = satrapy_garrison_fleet
					has_fleet_flag = horde_auxuliaries
					NOT = { is_within_borders_of = root }
				}
			}
			destroy_fleet = this
		}
		every_controlled_fleet = {
			limit = { is_mobile = yes is_leased = yes }
			end_fleet_contract = { initiator = prev reason = cancelled }
		}
		set_update_modifiers_batch = begin
		restore_country_backup_data = yes
		create_country = {
			name_list = random
			# name = random
			species = root # event_target:marauder_species
			type = dormant_marauders
			civics = {
				civic = civic_anarcho_tribalism
				civic = civic_slaver_guilds
				civic = random
			}
			origin = "origin_khan_successor"
			flag = {
				# icon = { category = "pirate" file = "flag_pirate_13.dds" } # flag_pirate_5.dds
				background = { category = "backgrounds" file = "00_solid.dds" }
				colors = { "black" "black" "null" "null" }
			}
			ethos = {
				ethic = ethic_fanatic_militarist
				ethic = ethic_xenophobe
			}
			ignore_initial_colony_error = yes
			day_zero_contact = no
			exclude_day_zero_contact = root
			effect = { save_event_target_as = restored_marauders }
		}

		## Find multiple Marauder Capital Systems (Great Great Khan or conquered at great loss).
		if = {
			limit = {
				NOT = { exists = event_target:marauder_capital }
				calc_true_if = {
					amount >= 2
					AND = { exists = event_target:marauder_country_1 any_system_within_border = { has_star_flag = marauder_capital_1 } }
					AND = { exists = event_target:marauder_country_2 any_system_within_border = { has_star_flag = marauder_capital_2 } }
					AND = { exists = event_target:marauder_country_3 any_system_within_border = { has_star_flag = marauder_capital_3 } }
				}
			}
			# Get First right country
			if = {
				limit = {
					exists = event_target:marauder_country_1
					NOT = { is_same_empire = event_target:marauder_country_1 }
				}
				event_target:marauder_country_1 = { save_event_target_as = restored_marauders_2 }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
					event_target:CmtTargetMarauderRallyPoint1.solar_system = { save_event_target_as = second_marauder_system }
				}
			}
			else_if = {
				limit = {
					exists = event_target:marauder_country_2
					NOT = { is_same_empire = event_target:marauder_country_2 }
				}
				event_target:marauder_country_2 = { save_event_target_as = restored_marauders_2 }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
					event_target:CmtTargetMarauderRallyPoint2.solar_system = { save_event_target_as = second_marauder_system }
				}
			}
			else_if = {
				limit = {
					exists = event_target:marauder_country_3
					NOT = { is_same_empire = event_target:marauder_country_3 }
				}
				event_target:marauder_country_3 = { save_event_target_as = restored_marauders_2 }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
					event_target:CmtTargetMarauderRallyPoint3.solar_system = { save_event_target_as = second_marauder_system }
				}
			}

			switch = { trigger = has_country_flag
				marauder_1 = { random_system_within_border = { limit = { has_star_flag = marauder_capital_1 } save_event_target_as = marauder_capital } }
				marauder_2 = { random_system_within_border = { limit = { has_star_flag = marauder_capital_2 } save_event_target_as = marauder_capital } }
				marauder_3 = { random_system_within_border = { limit = { has_star_flag = marauder_capital_3 } save_event_target_as = marauder_capital } }
			}
			## Set second_marauder_system
			if = {
				limit = { NOT = { exists = event_target:second_marauder_system } }
				random_system_within_border = {
					limit = {
						CmtTriggerMarauderCapitalSystem = yes
						NOT = { is_same_value = event_target:marauder_capital }
					}
					save_event_target_as = second_marauder_system
					# set_star_flag = second_marauder_system
				}
			}

			## assign_first_marauder_systems
			event_target:second_marauder_system = {
				every_neighbor_system = {
					limit = {
						has_owner = yes
						is_owned_by = root
						exists = starbase
					}
					starbase = { set_owner = event_target:restored_marauders_2 }
					# set_star_flag = second_marauder_system
					every_neighbor_system = {
						limit = {
							has_owner = yes
							is_owned_by = root
							exists = starbase
						}
						starbase = { set_owner = event_target:restored_marauders_2 }
						# set_star_flag = second_marauder_system
					}
				}
				export_trigger_value_to_variable = {
					trigger = distance
					parameters = {
						source = event_target:marauder_capital
						max_distance <= 500
						type = euclidean
						use_bypasses = no
					}
					variable = marauder_distance_1
				}
				multiply_variable = { which = marauder_distance_1 value = 0.5 }
				floor_variable = marauder_distance_1
			}
			log="Distance second [event_target:second_marauder_system.marauder_distance_1]"
			every_owned_starbase = {
				limit = {
					check_variable_arithmetic = {
						which = value:marauder_distance|SOURCE|event_target:second_marauder_system|max_distance|event_target:second_marauder_system.marauder_distance_1|
						value < event_target:second_marauder_system.marauder_distance_1
					}
				}
				set_owner = event_target:restored_marauders_2
			}
			every_owned_fleet = {
				limit = {
					is_mobile = yes
					is_owned_by = root
					is_within_borders_of = event_target:restored_marauders_2
				}
				set_owner = event_target:restored_marauders_2
				if = {
					limit = { exists = leader }
					leader = {
						set_owner = event_target:restored_marauders_2
						set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
					}
					if = {
						limit = { NOT = { is_ship_class = shipclass_transport } }
						assign_leader = leader
					}
				}
				fleet_event = { id = khan.611 days = -1 }
			}
			event_target:restored_marauders_2 = {
				owner_species = { save_event_target_as = marauder_species }
				country_event = { id = khan.306 days = -1 }
				# create_marauder_successor_fleet = yes
				event_target:second_marauder_system = {
					prev = { CmtEffectCreateFleet_KhanStandard = yes }
					clear_variable = marauder_distance_1
				}
			}
			if = {
				limit = {
					calc_true_if = {
						amount >= 2
						AND = { exists = event_target:marauder_country_1 any_system_within_border = { has_star_flag = marauder_capital_1 } }
						AND = { exists = event_target:marauder_country_2 any_system_within_border = { has_star_flag = marauder_capital_2 } }
						AND = { exists = event_target:marauder_country_3 any_system_within_border = { has_star_flag = marauder_capital_3 } }
					}
				}
				# Get Second right country
				if = {
					limit = {
						exists = event_target:marauder_country_1
						event_target:marauder_country_1 = {
							NOR = { is_same_empire = root is_same_empire = event_target:restored_marauders_2 }
						}
					}
					event_target:marauder_country_1 = { save_event_target_as = restored_marauders_3 }
					if = {
						limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
						event_target:CmtTargetMarauderRallyPoint1.solar_system = { save_event_target_as = third_marauder_system }
					}
				}
				else_if = {
					limit = {
						exists = event_target:marauder_country_2
						event_target:marauder_country_2 = {
							NOR = { is_same_empire = root is_same_empire = event_target:restored_marauders_2 }
						}
					}
					event_target:marauder_country_2 = { save_event_target_as = restored_marauders_3 }
					if = {
						limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
						event_target:CmtTargetMarauderRallyPoint2.solar_system = { save_event_target_as = third_marauder_system }
					}
				}
				else_if = {
					limit = {
						exists = event_target:marauder_country_3
						event_target:marauder_country_3 = {
							NOR = { is_same_empire = root is_same_empire = event_target:restored_marauders_2 }
						}
					}
					event_target:marauder_country_3 = { save_event_target_as = restored_marauders_3 }
					if = {
						limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
						event_target:CmtTargetMarauderRallyPoint3.solar_system = { save_event_target_as = third_marauder_system }
					}
				}
				# Set third_marauder_system
				if = {
					limit = { NOT = { exists = event_target:third_marauder_system } }
					random_system_within_border = {
						limit = {
							CmtTriggerMarauderCapitalSystem = yes
							NOR = {
								is_same_value = event_target:second_marauder_system
								is_same_value = event_target:marauder_capital
							}
						}
						save_event_target_as = third_marauder_system
					}
				}

				# assign_second_marauder_systems
				event_target:third_marauder_system = {
					every_neighbor_system = {
						limit = {
							has_owner = yes
							is_owned_by = root
							exists = starbase
						}
						starbase = { set_owner = event_target:marauder_country_3 }
						# set_star_flag = third_marauder_system
						every_neighbor_system = {
							limit = {
								has_owner = yes
								is_owned_by = root
								exists = starbase
							}
							starbase = { set_owner = event_target:marauder_country_3 }
							# set_star_flag = third_marauder_system
						}
					}
					export_trigger_value_to_variable = {
						trigger = distance
						parameters = {
							source = event_target:marauder_capital
							max_distance <= 500
							type = euclidean
							use_bypasses = no
						}
						variable = marauder_distance_1
					}
					multiply_variable = { which = marauder_distance_1 value = 0.5 }
					floor_variable = marauder_distance_1

					export_trigger_value_to_variable = {
						trigger = distance
						parameters = {
							source = event_target:second_marauder_system
							max_distance <= 500
							type = euclidean
							use_bypasses = no
						}
						variable = marauder_distance_2
					}
					multiply_variable = { which = marauder_distance_2 value = 0.5 }
					floor_variable = marauder_distance_2

					log="Distance third to \\[This.marauder_distance_1] to \\[This.marauder_distance_2]"
				}
				# Near same as second
				every_owned_starbase = {
					limit = {
						check_variable_arithmetic = {
							which = value:marauder_distance|SOURCE|event_target:third_marauder_system|max_distance|event_target:third_marauder_system.marauder_distance_1|
							value < event_target:third_marauder_system.marauder_distance_1
						}
						check_variable_arithmetic = {
							which = value:marauder_distance|SOURCE|event_target:third_marauder_system|max_distance|event_target:third_marauder_system.marauder_distance_2|
							value < event_target:third_marauder_system.marauder_distance_2
						}
					}
					set_owner = event_target:restored_marauders_3
				}
				every_owned_fleet = {
					limit = {
						is_mobile = yes
						is_owned_by = root
						is_within_borders_of = event_target:restored_marauders_3
					}
					set_owner = event_target:restored_marauders_3
					if = {
						limit = { exists = leader }
						leader = {
							set_owner = event_target:restored_marauders_3
							set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
						}
						if = {
							limit = { NOT = { is_ship_class = shipclass_transport } }
							assign_leader = leader
						}
					}
					fleet_event = { id = khan.611 days = -1 }
				}
				event_target:restored_marauders_3 = {
					owner_species = { save_event_target_as = marauder_species }
					country_event = { id = khan.306 days = -1 }
					# create_marauder_successor_fleet = yes
					event_target:third_marauder_system = {
						prev = { CmtEffectCreateFleet_KhanStandard = yes }
						clear_variable = marauder_distance_1
						clear_variable = marauder_distance_2
					}
				}

			}
			# break = yes
		}
		else = {
			if = {
				limit = { any_system_within_border = { CmtTriggerMarauderCapitalSystem = yes } }
				random_system_within_border = {
					limit = { CmtTriggerMarauderCapitalSystem = yes }
					save_event_target_as = marauder_capital
				}
			}
			else = {
				## Find Marauder Capital System
				random_system_within_border = {
					limit = { exists = starbase starbase = { is_owned_by = root } }
					weights = {
						base = 1
						modifier = { add = 6 has_star_flag = marauder_system }
						modifier = { add = 2 is_pirate_system = yes }
						modifier = { add = 2 is_valid_crystal_splitter_system = yes }
						modifier = { add = 2 NOR = { has_star_flag = enclave has_star_flag = primitive_system } }
						# modifier = { add = 30 CmtTriggerMarauderCapitalSystem = yes }
						# modifier = { add = 6 count_neighbor_system = { count > 0 limit = { is_pirate_system = yes } } }
					}
					if = {
						limit = { any_system_planet = { is_star = no } }
						save_event_target_as = marauder_capital
					}
					else = {
						random_neighbor_system = {
							limit = {
								is_pirate_system = yes
								# is_valid_crystal_splitter_system = yes
								NOR = {
									# is_star_class = sc_black_hole
									# has_star_flag = crystal_splitter_starting_system
									# has_star_flag = crystal_splitter_destination_system
									# has_star_flag = hostile_system
									# has_star_flag = guardian
									has_star_flag = tiyanki_home_system
									has_star_flag = amoeba_home_system
									has_star_flag = lcluster
									has_star_flag = sealed_system
									has_star_flag = enclave
									has_star_flag = primitive_system
								}
								any_system_planet = { is_star = no }
							}
							weights = {
								base = 1
								modifier = { add = 1 any_system_planet = { is_asteroid = no } }
								modifier = { add = 2 any_system_planet = { colonizable_planet = yes } }
								modifier = {
									add = 3
									count_neighbor_system = {
										count > 1
										limit = { is_pirate_system = yes }
									}
								}
								modifier = {
									add = 5
									OR = {
										CmtTriggerMarauderCapitalSystem = yes
										count_neighbor_system = {
											count > 2
											limit = { is_pirate_system = yes }
										}
									}
								}
							}
							save_event_target_as = marauder_capital
						}
					}
				}

				if = {
					limit = { NOT = { exists = event_target:marauder_capital } }
					log = "Last fallback for \\[This.GetName]"
					# random_planet_within_border = { limit = { solar_system = { exists = starbase starbase = { is_owned_by = root } } }
					if = {
						limit = {
							any_owned_starbase = {
								solar_system = {
									any_system_planet = {
										is_star = no
										is_asteroid = no
									}
								}
							}
						}
						random_owned_starbase = {
							limit = {
								solar_system = {
									any_system_planet = {
										is_star = no
										is_asteroid = no
									}
								}
							}
							solar_system = { save_event_target_as = marauder_capital }
						}
					}
					else = {
						random_owned_planet = {
							limit = { is_owned_by = controller }
							weights = {
								base = 1
								modifier = { add = 6 solar_system = { has_star_flag = marauder_system } }
								modifier = { add = 3 solar_system = { any_neighbor_system = { has_star_flag = marauder_system } } }
								modifier = { add = 3 any_owned_species = { is_same_species = event_target:restored_marauders.owner_species } }
							}
							save_event_target_as = marauder_capital
							# Can't own planet due conquer conflict/restriction
						}
					}
				}
			}
		}

		if = {
			limit = { NOT = { exists = event_target:marauder_capital } }
			log = "No place for new Marauder system found for \\[This.GetName]!?"
			if = {
				limit = {
					any_owned_starbase = {
						solar_system = {
							any_system_planet = {
								is_star = no
								is_asteroid = no
							}
						}
					}
				}
				random_owned_starbase = {
					limit = {
						solar_system = {
							any_system_planet = {
								is_star = no
								is_asteroid = no
							}
						}
					}
					solar_system = {
						random_system_planet = {
							limit = {
								is_star = no
								is_asteroid = no
							}
							save_event_target_as = marauder_capital
						}
					}
				}
			}
			else = {
				random_owned_planet = {
					limit = { is_owned_by = controller }
					weights = {
						base = 1
						modifier = { add = 6 solar_system = { has_star_flag = marauder_system } }
						modifier = { add = 3 solar_system = { any_neighbor_system = { has_star_flag = marauder_system } } }
						modifier = { add = 3 any_owned_species = { is_same_species = event_target:restored_marauders.owner_species } }
					}
					save_event_target_as = marauder_capital
				}
			}
		}
		else = {
			if = {
				limit = { event_target:marauder_capital = { is_scope_type = galactic_object }
				}
				event_target:marauder_capital = {
					random_system_planet = {
						limit = { is_star = no }
						weights = {
							base = 1
							modifier = { add = 1 is_asteroid = no }
							modifier = { add = 2 merg_is_gas_giant = no }
							modifier = { add = 3 colonizable_planet = yes }
						}
						save_event_target_as = marauder_capital
					}
				}
			}
			event_target:marauder_capital.solar_system = { set_star_flag = marauder_system }
		}

		# Setup to make Khan & Mercenaries possible again.
		event_target:restored_marauders = {
			set_country_flag = restored_marauders_flag
			set_name = random
			randomize_flag_symbol = "pirate"
			set_graphical_culture = madd_01
			set_country_flag = first_alien_life
			set_country_flag = has_encountered_other_empire
			create_ship_design = { design = "NAME_Marauder_Starbase" }
			add_ship_design = last_created_design
			root = {
				switch = { trigger = has_country_flag
					marauder_1 = { prev = { set_country_flag = marauder_1 save_global_event_target_as = marauder_country_1 } }
					marauder_2 = { prev = { set_country_flag = marauder_2 save_global_event_target_as = marauder_country_2 } }
					marauder_3 = { prev = { set_country_flag = marauder_3 save_global_event_target_as = marauder_country_3 shift_ethic = ethic_fanatic_spiritualist } }
				}
				every_owned_leader = {
					# limit = { is_ruler = yes }
					set_owner = prevprev
				}
			}

			# There is a possibility there is no flag
			if = {
				limit = {
					NOR = {
						has_country_flag = marauder_1
						has_country_flag = marauder_2
						has_country_flag = marauder_3
					}
				}
				if = {
					limit = {
						NOR = {
							exists = event_target:marauder_country_3
							any_country = {
								is_country_type = dormant_marauders
								has_country_flag = marauder_3
							}
						}
					}
					set_country_flag = marauder_3
					save_global_event_target_as = marauder_country_3
					shift_ethic = ethic_fanatic_spiritualist
				}
				else_if = {
					limit = {
						NOR = {
							exists = event_target:marauder_country_2
							any_country = {
								is_country_type = dormant_marauders
								has_country_flag = marauder_2
							}
						}
					}
					set_country_flag = marauder_2
					save_global_event_target_as = marauder_country_2
				}
				else_if = {
					limit = {
						NOR = {
							exists = event_target:marauder_country_1
							any_country = {
								is_country_type = dormant_marauders
								has_country_flag = marauder_1
							}
						}
					}
					set_country_flag = marauder_1
					save_global_event_target_as = marauder_country_1
				}
			}
			if = {
				limit = { exists = event_target:marauder_capital }
				switch = { trigger = has_country_flag
					marauder_1 = { event_target:marauder_capital.solar_system = { set_star_flag = marauder_capital_1 } }
					marauder_2 = { event_target:marauder_capital.solar_system = { set_star_flag = marauder_capital_2 } }
					marauder_3 = { event_target:marauder_capital.solar_system = { set_star_flag = marauder_capital_3 } }
				}
			}
		}

		every_owned_fleet = {
			limit = { is_mobile = yes }
			set_owner = event_target:restored_marauders
			if = {
				limit = { exists = leader }
				leader = {
					set_owner = event_target:restored_marauders
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
			}
			fleet_event = { id = khan.611 days = -1 }
		}

		every_owned_starbase = {
			set_owner = event_target:restored_marauders
			solar_system = {
				if = {
					limit = {
						any_fleet_in_system = {
							exists = owner
							owner = { is_country_type = enclave_mercenary }
						}
					}
					random_fleet_in_system = {
						limit = { is_ship_size = enclave_mercenary_station exists = owner }
						owner = {
							every_controlled_fleet = {
								if = {
									limit = { NOT = { is_within_borders_of = event_target:restored_marauders } }
									# delete_fleet = this
									random_country = {
										limit = { is_pirate = yes }
										prev = {
											set_owner = prev
											if = {
												limit = { exists = leader }
												leader = { set_owner = prevprev }
											}
										}
									}
								}
								else = {
									if = {
										limit = { is_leased = yes }
										end_fleet_contract = { initiator = prev reason = cancelled }
									}
									remove_auto_move_target = yes
									clear_orders = yes
									clear_fleet_actions = this
									set_event_locked = yes
									set_owner = event_target:restored_marauders
									if = {
										limit = { exists = leader }
										leader = {
											set_owner = event_target:restored_marauders
											set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
										}
										if = {
											limit = { NOT = { is_ship_class = shipclass_transport } }
											assign_leader = leader
										}
									}
									fleet_event = { id = khan.611 days = -1 }
								}
							}
							# destroy_country
							country_event = { id = enclave.23 scopes = { from = event_target:restored_marauders fromfrom = prev } }
						}
					}
				}
			}
		}

		event_target:restored_marauders = {
			copy_techs_from = { target = root }
			if = {
				limit = { root = { num_owned_relics > 0 } }
				steal_relic = { target = root relic = all }
			}
			owner_species = { save_event_target_as = marauder_species }
			country_event = { id = khan.306 days = -1 }
			# create_marauder_successor_fleet = yes
			save_event_target_as = new_khanate
			event_target:marauder_capital = {
				prev = { CmtEffectCreateFleet_KhanStandard = yes }
			}
		}

		# If Horde owns only planets on not owned system.
		if = { limit = { num_owned_planets > 0 }
			# Give former owner
			every_owned_planet = {
				limit = { any_playable_country = { has_country_flag = former_owner@prev } }
				random_playable_country = {
					limit = { has_country_flag = former_owner@prev }
					prev = {
						set_owner = prev
						if = {
							limit = { exists = starbase }
							starbase = { set_owner = prevprev }
						}
					}
					remove_country_flag = former_owner@prev
				}
			}
			# Give system owner
			if = {
				limit = { num_owned_planets > 0 }
				every_owned_planet = {
					if = {
						limit = { exists = space_owner space_owner = { is_country_type_with_subjects = yes } }
						set_owner = space_owner
					}
					else_if = { # Another colony
						limit = {
							solar_system = {
								any_system_colony = {
									NOR = {
										is_planet = prevprev
										is_owned_by = prevprevprevprev
									}
								}
							}
						}
						solar_system = {
							random_system_colony = {
								limit = {
									exists = owner
									NOR = {
										is_planet = prevprev
										is_owned_by = prevprevprevprev
									}
								}
								weights = { base = 1 modifier = { add = 3 is_colonizable = no } }
								prevprev = { set_owner = prev.owner }
							}
						}
					}
					else = {
						# generate_late_pre_ftls_on_planet = yes
						if = {
							limit = {
								any_owned_pop = {
									NOR = {
										is_robot_pop = yes
										has_trait = trait_hive_mind
										can_think = no
										prev = { habitability = { who = prev value < 0.5 } }
									}
								}
							}
							random_owned_pop = {
								limit = {
									NOR = {
										is_robot_pop = yes
										has_trait = trait_hive_mind
										can_think = no
										prev = { habitability = { who = prev value < 0.5 } }
									}
									exists = species
								}
								weights = {
									base = 1
									modifier = { add = 2 prev = { habitability = { who = prev value >= 0.7 } } }
									modifier = { add = 10 species = { exists = home_planet home_planet = { is_planet = prevprevprev } } }
								}
								species = { save_event_target_as = primitive_world_species }
							}
						}
						else_if = {
							limit = {
								any_owned_pop = {
									NOR = {
										is_robot_pop = yes
										has_trait = trait_hive_mind
										can_think = no
										prev = { habitability = { who = prev value < 0.3 } }
									}
								}
							}
							random_owned_pop = {
								limit = {
									NOR = {
										is_robot_pop = yes
										has_trait = trait_hive_mind
										can_think = no
										prev = { habitability = { who = prev value < 0.3 } }
									}
									exists = species
								}
								weights = {
									base = 1
									modifier = { add = 2 prev = { habitability = { who = prev value >= 0.6 } } }
									modifier = { add = 10 species = { exists = home_planet home_planet = { is_planet = prevprevprev } } }
								}
								species = { save_event_target_as = primitive_world_species }
							}
						}
						else = { # last fallback
							random_owned_pop = {
								weights = {
									base = 1
									modifier = { add = 20 is_robot_pop = no }
									modifier = { add = 2 prev = { habitability = { who = prev value >= 0.5 } } }
									modifier = { add = 10 species = { exists = home_planet home_planet = { is_planet = prevprevprev } } }
								}
								species = { save_event_target_as = primitive_world_species }
							}
						}

						event_target:primitive_world_species = {
							modify_species = {
								species = this
								# add_trait_no_notify = <key> # optional, can specify multiple
								# remove_trait = <key> # optional, can specify multiple
								ideal_planet_class = prev
								change_scoped_species = yes
							}
						}
						while = { limit = { has_building = building_commercial_zone } remove_building = building_commercial_zone }
						while = { limit = { has_building = building_research_lab_1 } remove_building = building_research_lab_1 }
						while = { limit = { has_building = building_research_lab_2 } remove_building = building_research_lab_2 }
						while = { limit = { has_building = building_research_lab_3 } remove_building = building_research_lab_3 }
						if = { limit = { has_building = building_institute } remove_building = building_institute }
						if = { limit = { has_building = building_supercomputer } remove_building = building_supercomputer }
						if = { limit = { has_building = building_clone_vats } remove_building = building_clone_vats }
						if = { limit = { has_building = building_clone_army_clone_vat } remove_building = building_clone_army_clone_vat }
						if = { limit = { has_building = building_posthumous_employment_center } remove_building = building_posthumous_employment_center }
						create_late_pre_ftl_empire = yes
						setup_pre_ftl_planet = yes
						last_created_country = {
							random_list = {
								3 = { set_pre_ftl_age_effect = { PRE_FTL_AGE = industrial_age } }
								4 = { set_pre_ftl_age_effect = { PRE_FTL_AGE = machine_age } }
								5 = { set_pre_ftl_age_effect = { PRE_FTL_AGE = atomic_age } }
								6 = { set_pre_ftl_age_effect = { PRE_FTL_AGE = early_space_age } }
							}
						}
						# Prevent Dormant marauder own planet
						if = {
							limit = {
								exists = event_target:marauder_capital
								event_target:marauder_capital = {
									OR = {
										AND = {
											is_scope_type = planet
											solar_system = { is_same_value = prev.solar_system }
										}
										AND = {
											is_scope_type = galactic_object
											is_same_value = prev.solar_system
										}
									}
								}
							}
							solar_system = {
								create_starbase = { size = "starbase_marauder" owner = event_target:restored_marauders }
							}
						}
					}
				}
			}
		}
		country_event = { id = marauder.609 days = -1 }		# Fully handover
		set_update_modifiers_batch = end

		# Establish Communications
		every_country = {
			limit = { has_communications = root }
			establish_communications_no_message = event_target:restored_marauders
		}
		every_subject = {
			limit = { is_default_or_fallen = yes }
			set_subject_of = { who = none }
			country_event = { id = marauder.670 days = 3 }			# Notify Satrap End
			country_event = { id = marauder.671 days = 10 }			# Notify Garrison End
		}
		observer_event = { id = observer.21 }
		if = {
			limit = {
				OR = {
					is_country_type = awakened_marauders
					AND = {
						exists = event_target:raider_khanate
						is_same_empire = event_target:raider_khanate
					}
					has_country_flag = marauder600_happened
				}
			}
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = marauder.630 } # Notify
			}
		}
	}
	after = {
		# Try workaround for strange fleet behavior
		event_target:restored_marauders = {
			every_owned_fleet = {
				limit = { is_mobile = yes }
				set_event_locked = no
				if = {
					limit = {
						NOR = {
							is_civilian = yes
							exists = leader
							is_ship_class = shipclass_transport
						}
					}
					fleet_event = { id = khan.613 days = 2 }
				}
			}
		}
	}
}

# Fully handover marauder country (HIDDEN)
# From marauder.602 .603 .604
# This = be destroyed country
country_event = {
	id = marauder.609
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		exists = event_target:raider_khanate
		# NOT = { has_global_flag = great_khan_wins }
	}
	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = last_created_country
				last_created_country = { has_origin = "origin_khan_successor" }
			}
			last_created_country = { save_event_target_as = new_khanate }
		}
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = from
				from = {
					is_ai = yes
					OR = {
						CmtTriggerIsMarauder = yes
						is_subject_of_khan = yes
					}
				}
			}
			from = { save_event_target_as = new_khanate }
		}
		if = {
			limit = { NOT = { exists = event_target:new_khanate } }
			break = yes
		}
		if = {
			limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
			# Drag military fleets except for one (or two)
			ordered_owned_fleet = {
				limit = {
					is_mobile = yes
					is_civilian = no
					exists = leader # somehow gets ignored sometimes (if juggernaut?)
					any_owned_ship = { is_ship_class = shipclass_military }
				}
				position = 1
				order_by = trigger:fleet_power
				if = { # is_ship_size = juggernaut
					limit = { NOT = { any_owned_ship = { is_ship_class = shipclass_starbase } } }
					leader = { set_owner = event_target:new_khanate }
				}
				set_owner = event_target:new_khanate
			}
			random_owned_fleet = {
				limit = { is_mobile = yes exists = leader }
				set_owner = root
				# Recruit leader
				leader = {
					set_owner = root
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
			random_owned_fleet = {
				limit = {
					is_mobile = yes
					exists = leader
					exists = solar_system
					is_civilian = no any_owned_ship = { is_ship_class = shipclass_military }
				}
				set_owner = event_target:new_khanate
				# Recruit leader
				leader = {
					set_owner = event_target:new_khanate
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
			if = {
				limit = { event_target:new_khanate = { CmtTriggerIsMarauder = no } }
				every_owned_fleet = {
					limit = {
						is_civilian = no
						any_owned_ship = { is_ship_class = shipclass_military }
					}
					delete_fleet = this
				}
			}
		}
		# Normalize Starbases
		if = {
			limit = {
				OR = {
					NOT = { has_global_flag = marauder_crisis_ongoing }
					event_target:new_khanate = { CmtTriggerIsMarauder = no }
				}
			}
			# Return colonies that have only the starbase conquered.
			every_system_within_border = {
				limit = { exists = starbase }
				if = {
					limit = {
						any_system_colony = {
							NOR = {
								is_owned_by = root
								is_controlled_by = root
								is_owned_by = event_target:new_khanate
								is_controlled_by = event_target:new_khanate
								merg_is_habitat = yes
							}
						}
						NOT = {
							any_system_colony = {
								is_controlled_by = root
								OR = {
									merg_is_habitat = no
									AND = {
										merg_is_habitat = yes
										prev = { starbase = { has_starbase_size = starbase_marauder } }
									}
								}
							}
						}
					}
					ordered_system_colony = {
						limit = {
							exists = owner
							NOR = {
								is_owned_by = root
								is_controlled_by = root
								is_owned_by = event_target:new_khanate
								is_controlled_by = event_target:new_khanate
								merg_is_habitat = yes
							}
							owner = { is_default_or_fallen = yes }
						}
						position = 0
						order_by = trigger:num_pops
						log="Give system \\[Prev.GetName] back to \\[This.Owner.GetName]"
						owner = { save_event_target_as = planet_owner }
						prev = {
							# commit_system_to = { EMPIRE = prevprev.planet_owner } # the target scope is solved there (so add 1 more prev)
							commit_system_to = { EMPIRE = event_target:planet_owner }
							add_claims = { who = root num_of_claims = 1 show_notification = no }
						}
					}
				} # else = { starbase = { set_owner = event_target:new_khanate } }
				starbase = {
					if = {
						limit = { has_starbase_size = starbase_marauder }
						set_starbase_size = starbase_outpost
					}
				}
			}
			event_target:new_khanate = {
				if = {
					limit = { is_ai = yes }
					add_500_unity_per_year_passed = yes
					random_system_within_border = {
						limit = { CmtTriggerMarauderCapitalSystem = yes }
						system_event = { id = khan.301 days = -1 } # Create Citadel
					}
				}
			}
		}
		every_owned_starbase = { set_owner = event_target:new_khanate }
		log="Handover \\[This.GetName] to \\[event_target:new_khanate.GetName]"
		# Full handover
		every_owned_fleet = {
			limit = {
				is_mobile = yes
				# garrison = no
				OR = {
					is_civilian = yes
					num_ships > 1
					exists = leader
				}
			}
			set_owner = event_target:new_khanate
			# Recruit leader
			if = {
				limit = { exists = leader }
				leader = {
					set_owner = event_target:new_khanate
					set_timed_leader_flag = { flag = restored_admiral@prev days = 7 }
				}
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
		}

		# Needs to be last (as the country gets destroyed without planet)
		every_owned_planet = {
			set_owner = event_target:new_khanate
			set_controller = event_target:new_khanate
			# Just to keep the initial conquered planets in line while they stabilize.
			add_modifier = { modifier = "revolt_suppressed" months = 20 }
		}
		event_target:new_khanate = {
			if = {
				limit = { is_ai = yes }
				add_resource = {
					minerals =		20000
					energy =		40000
					alloys =		20000
					food =			20000
					influence = 	1000
					consumer_goods = 20000
				}
				copy_techs_from = { target = root }
			}
			if = {
				limit = { root = { num_owned_relics > 0 } }
				steal_relic = { target = root relic = all }
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size < starbase_starhold }
				}
				random_owned_starbase = {
					limit = { has_starbase_size < starbase_starhold }
					set_starbase_size = starbase_starhold
					starbase_event = { id = khan.302 days = 1 }
				}
				if = {
					limit = {
						any_owned_starbase = { has_starbase_size < starbase_starhold }
					}
					random_owned_starbase = {
						limit = { has_starbase_size < starbase_starhold }
						set_starbase_size = starbase_starhold
						starbase_event = { id = khan.302 days = 1 }
					}
				}
				if = {
					limit = {
						any_owned_starbase = { has_starbase_size < starbase_starhold }
					}
					random_owned_starbase = {
						limit = { has_starbase_size < starbase_starhold }
						set_starbase_size = starbase_starhold
						starbase_event = { id = khan.302 days = 1 }
					}
				}
			}
			# Survey Own Space
			every_planet_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = event_target:new_khanate
				}
			}
			# Survey Rest of Horde's Space
			root = {
				every_planet_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = event_target:new_khanate
					}
				}
			}
			# Mining and Research Stations
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = { owner = event_target:new_khanate }
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = { owner = event_target:new_khanate }
			}
			# Take all old leaders!?
			every_owned_leader = {
				# limit = { is_ruler = yes }
				set_owner = event_target:new_khanate
			}

			if = {
				limit = { CmtTriggerIsMarauder = no }
				owner_species = { save_event_target_as = marauder_species }
				add_500_unity_per_year_passed = yes
				country_event = { id = game_start.6 days = 6 random = 4 }	# advanced_empire
				country_event = { id = game_start.9 days = 12 random = 8 }	# empire_init_create_ships civil
				### Units
				create_ship_design = { design = "NAME_Pirate_Transport" }
				add_ship_design = last_created_design
				create_ship_design = { design = "NAME_Clan_Builder" }
				add_ship_design = last_created_design
				create_ship_design = { design = "NAME_Outrider" }
				add_ship_design = last_created_design
				### Dynamic Empire fleet_power
				root = { set_variable = { which = "successor_fleet_power" value = 40000 } }
				# Store each fleet_power to var.
				every_playable_country = {
					limit = {
						NOT = { is_variable_set = "successor_fleet_power" }
						fleet_power > 40000
					}
					if = {
						limit = {
							any_owned_planet = { has_planet_flag = fallen_empire_world }
						}
						set_variable = { which = "successor_fleet_power" value = 220000 }
					}
					else = {
						export_trigger_value_to_variable = { trigger = fleet_power variable = "successor_fleet_power" }
					}
				}
				random_owned_planet = {
					limit = { solar_system = { exists = starbase } }
					weights = {
						base = 1
						modifier = { add = 1 is_colony = yes }
						modifier = { add = 2 is_capital = yes }
					}
					prev = {
						CmtEffectCreateFleet_KhanStandard = yes # create_marauder_successor_fleet = yes
						CmtEffectCreateFleet_KhanArmy = yes
						CmtEffectCreateFleet_KhanConstructor = yes
					}
					while = {
						count = 4
						limit = {
							any_playable_country = {
								is_variable_set = "successor_fleet_power"
								check_variable = { which = "successor_fleet_power" value > root.successor_fleet_power }
							}
						}
						root = {
							change_variable = { which = "successor_fleet_power" value = 20000 }
							# Own old to get the right design!?
							CmtEffectCreateFleet_KhanStandard = { DIADOCHI = yes } # create_marauder_successor_fleet = yes
						}
						last_created_leader = {
							set_owner = prevprev
							last_created_fleet = {
								set_owner = prevprevprev
								assign_leader = prev
								set_leader = prev
							}
						}
					}
				}
				country_event = { id = khan.612 days = 7 } # Build Habitats

				### Do automatic claims if planet has belonged to an empire.
				# TODO also former systems?
				every_owned_planet = {
					limit = {
						any_playable_country = { has_country_flag = former_owner@prev }
					}
					random_playable_country = {
						limit = { has_country_flag = former_owner@prev }
						prev.solar_system = {
							if = {
								limit = { NOT = { is_owned_by = prev } }
								add_claims = { who = prev num_of_claims = 3 show_notification = no }
							}
							else = {
								prev = { remove_country_flag = former_owner@prevprevprev }
							}
						}
						if = {
							limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
							remove_country_flag = former_owner@prev
						}
					}
				}
				every_planet_within_border = {
					limit = {
						has_owner = no
						colonizable_planet = yes
						any_playable_country = { has_country_flag = former_owner@prev }
					}
					random_playable_country = {
						limit = { has_country_flag = former_owner@prev }
						prev.solar_system = {
							if = {
								limit = { NOT = { is_owned_by = prev } }
								add_claims = { who = prev num_of_claims = 2 show_notification = no }
							}
							else = {
								prev = { remove_country_flag = former_owner@prevprevprev }
							}
						}
						if = {
							limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
							remove_country_flag = former_owner@prev
						}
					}
				}
				# Cleanup temp vars
				every_playable_country = {
					limit = { is_variable_set = "successor_fleet_power" }
					clear_variable = "successor_fleet_power"
				}
			}
		}
		# Establish Communications
		every_country = {
			limit = { has_communications = root }
			establish_communications_no_message = event_target:new_khanate
		}
		event_target:new_khanate = {
			if = {
				limit = { CmtTriggerIsMarauder = no used_naval_capacity_percent < 0.75 }
				every_owned_fleet = {
					limit = {
						is_mobile = yes
						# garrison = no
						OR = {
							is_civilian = yes
							num_ships > 1
							exists = leader
						}
					}
					# Normalize fleets!?
					set_fleet_settings = {
						can_upgrade = yes
						can_disband = yes
						can_change_composition = yes
						can_change_leader = yes
					}
				}
				create_fleet_from_naval_cap = 0.2
			}
		}
	}
}

# The New Galactic Horde (Satrapy)
country_event = {
	id = marauder.660
	title = "marauder.660.name"
	desc = "marauder.660.desc"
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = {
		is_default_or_fallen = yes
		NOT = { has_country_flag = marauder_diplomacy_engaged }
		NOT = { has_active_event = { marauder.660 } }
	}
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = { limit = { is_subject = yes } set_subject_of = { who = none } }
		if = { limit = { is_variable_set = "planets_lost_to_marauder" } clear_variable = "planets_lost_to_marauder" }
		# if = { limit = { has_modifier = "satrapy_of_horde" } remove_modifier = "satrapy_of_horde" }
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.660.a
		ai_chance = { factor = 100 }
		join_alliance = {
			who = event_target:new_khanate
			name = "NAME_Galactic_Horde"
			override_requirements = yes
		}
	}
	option = { name = marauder.660.b }
}

# The New Galactic Horde (Non-Satrapy)
country_event = {
	id = marauder.661
	title = "marauder.660.name"
	desc = "marauder.661.desc"
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = {
		is_default_or_fallen = yes
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Opportunity Khan Destroyer marauder.710
	option = {
		name = marauder.660.a
		trigger = {
			hidden_trigger = {
				OR = {
					has_country_flag = no_khan_do
					is_same_empire = event_target:khan_destroyer
				}
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				OR = {
					is_robot_empire = yes
					is_militarist = yes
					has_federation = yes
					is_galactic_emperor = yes
					has_been_declared_crisis = yes
				}
			}
		}
		join_alliance = {
			who = event_target:new_khanate
			name = "NAME_Galactic_Horde"
			override_requirements = yes
		}
	}
	option = { name = marauder.661.a }
}

# Notify: Horde Diplomacy after Great Khan's death (on_custom_diplomacy)
country_event = {
	id = marauder.665
	title = "TRANSMISSION"
	desc = "marauder.665.a.desc"
	picture_event_data = { room = no_video_feed_room }
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	trigger = {
		has_global_flag = great_khan_dead
		is_ai = no
		from = {
			# OR = { is_country_type = awakened_marauders AND = {
			exists = event_target:raider_khanate
			is_same_empire = event_target:raider_khanate
		}
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = { name = marauder.665.a }
}

# Satrapy No Longer
country_event = {
	id = marauder.670
	title = "marauder.670.name"
	desc = "marauder.670.desc"
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = { is_default_or_fallen = yes }
	immediate = {
		if = { limit = { is_subject = yes } set_subject_of = { who = none } }
		if = { limit = { is_variable_set = "planets_lost_to_marauder" } clear_variable = "planets_lost_to_marauder" }
		# if = { limit = { has_modifier = "satrapy_of_horde" } remove_modifier = "satrapy_of_horde" }
	}
	option = { name = marauder.670.a }
}

# Garrison Station Scuttled
country_event = {
	id = marauder.671
	title = "marauder.671.name"
	desc = "marauder.671.desc"
	picture = GFX_evt_large_explosion
	show_sound = event_ship_explosion
	is_triggered_only = yes
	immediate = {
		if = { # To be sure (normally there should be nothing - used by khan.710)
			limit = { exists = event_target:raider_khanate }
			event_target:raider_khanate = {
				every_controlled_fleet = {
					limit = {
						OR = {
							has_fleet_flag = satrapy_garrison
							has_fleet_flag = satrapy_garrison_fleet
							has_fleet_flag = horde_auxuliaries
						}
						exists = solar_system
						is_within_borders_of = root
					}
					# delete_fleet = this
					set_owner = root
					if = {
						limit = { exists = leader }
						leader = { set_owner = root }
					}
				}
			}
		}
		if = { # To be sure (normally there should be nothing - used by khan.710)
			limit = { exists = event_target:marauders_garrison_1 }
			event_target:marauders_garrison_1 = {
				every_controlled_fleet = {
					limit = {
						OR = {
							has_fleet_flag = satrapy_garrison
							has_fleet_flag = satrapy_garrison_fleet
							has_fleet_flag = horde_auxuliaries
						}
						exists = solar_system
						is_within_borders_of = root
					}
					# delete_fleet = this
					set_owner = root
					if = {
						limit = { exists = leader }
						leader = { set_owner = root }
					}
				}
			}
		}
	}
	option = { name = marauder.671.a }
}

# New Fleet (Fix missing ship_piracy_suppression_add)
country_event = {
	id = marauder.704
	title = "marauder.704.name"
	desc = "marauder.704.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = marauder_neighbor_event_4 }
		years_passed > 30
	}
	immediate = { set_country_flag = marauder_neighbor_event_4 }
	option = {
		name = marauder.704.a
		create_fleet = {
			name = "NAME_Salvaged_Fleet"
			effect = {
				set_owner = root
				create_dyn_pirate_fleet = { Skull = 6 Corsair = 3 Black_Earl = 2 }
				set_location = root.capital_scope
			}
		}
		custom_tooltip = gain_marauder_fleet
		# hidden_effect = {
		# 	create_fleet = {
		# 		name = "NAME_Salvaged_Fleet"
		# 		effect = {
		# 			set_owner = root
		# 			while = {
		# 				count = 1
		# 				create_ship = {
		# 					name = random
		# 					prefix = no
		# 					design = "NAME_Black_Earl"
		# 					graphical_culture = "pirate_01"
		# 				}
		# 			}
		# 			create_dyn_pirate_fleet = { Skull = 10 Corsair = 4 }
		# 			set_location = root.capital_scope
		# 		}
		# 	}
		# }
	}
	option = {
		name = marauder.704.b
		add_resource = { minerals = 200 }
	}
}

# Great Khan's Throne
# This = khan_destroyer (from marauder.509)
country_event = {
	id = marauder.710
	title = "marauder.710.name"
	desc = "marauder.710.desc"
	picture = GFX_evt_space_walk
	show_sound = event_ship_thrusters
	is_triggered_only = yes
	trigger = {
		OR = {
			is_ai = no
			is_robot_empire = no
		}
		NOT = { has_relic = r_khans_throne }
	}
	# immediate = {}
	option = {
		name = EXCELLENT
		add_relic = r_khans_throne
	}
}

# on_leader_death - make extra sure that flag is set
# This = Country
# From = Leader
country_event = {
	id = marauder.711
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		from = { has_leader_flag = great_khan }
	}
	immediate = {
		if = {
			limit = { has_country_flag = khan_dead_age }
			remove_country_flag = khan_dead_age
		}

		if = { # Immortal fallback
			limit = {
				has_global_flag = khan_no_die
				has_country_flag = CmtFlagKhanNoDieCountry
				check_variable = { which = "CmtVarKhanRemainingLive" value > 0 }
			}

			if = {
				limit = { NOT = { has_global_flag = great_khan_dead } }
				set_global_flag = great_khan_dead
			}
			if = {
				limit = { has_country_flag = khan_dead_event_fine }
				remove_country_flag = khan_dead_event_fine
			}

			change_variable = { which = "CmtVarKhanRemainingLive" value = -1 } ## Not CmtGlobalVar

			if = { # Only Admiral dead?
				limit = { exists = event_target:great_khan_ruler }
				event_target:great_khan_ruler = {
					remove_leader_flag = great_khan					# Because possible loop trigger?
					kill_leader = { show_notification = no fire = yes }
				}
				### Return of Khan
				# if = { limit = { has_global_flag = CmtFlagDebugMode }
				# 	country_event = { id = marauder.523 days = 5 }
				# } else = {
				# 	event_target:global_event_country = {
				# 		country_event = { id = marauder.523 days = 210 random = 160 }
				# 	}
				# }
			} # else = {

			if = { # Only Ruler dead?
				limit = { exists = event_target:great_khan }
				event_target:great_khan = {
					remove_leader_flag = great_khan					# Because possible loop trigger?
					kill_leader = { show_notification = no fire = yes }
				}
			}

			### New Ruler Khan
			create_leader = {
				name = random
				class = admiral
				species = owner_main_species
				skill = 4
				event_leader = yes
				can_manually_change_location = no
				can_see_in_list = no
				randomize_traits = no 			# Cloning messes with traits, so don't start with them
				leader_age_min = 18
				leader_age_max = 22 			# Traits can add to age so start it low
				traits = {
					trait = leader_trait_ruler_great_khan
					trait = leader_trait_chosen
					trait = subclass_admiral_strategist
					# trait = leader_trait_fleet_organizer
					# trait = leader_trait_eager
				}
				effect = {
					add_skill = 4
					# Only really applicable destiny unfortunately
					add_trait_no_notify = leader_trait_armorer
					add_trait_no_notify = leader_trait_gale_speed_3
					add_trait_no_notify = leader_trait_border_guard_3
					add_trait_no_notify = leader_trait_crew_trainer_3
					set_leader_flag = great_khan
					save_global_event_target_as = great_khan_ruler
					recruitable = no
					# prev = { assign_leader = prev } not working!?
				}
			}
			last_created_leader = {
				root = { assign_leader = prev }
				random_list = {
					1 = { set_council_position = councilor_defense }
					1 = { set_council_position = councilor_crusader_spirit }
					1 = { set_council_position = councilor_distinguished_admiralty }
					1 = { set_council_position = councilor_heroic_tales }
				}
			}

			# ### New Admiral Khan
			# if = { ### NSC SUPPORT
			# 	limit = {
			# 		is_ai = no
			# 		has_global_flag = has_nsc_active
			# 	}
			# 	event_target:great_khan_ruler = {
			# 		remove_trait = leader_trait_great_khan
			# 		add_trait_no_notify = nsc_freebooter_leader_trait_ruler_child_of_great_khan
			# 	}
			# 	clone_leader = {
			# 		target = event_target:great_khan_ruler
			# 		class = admiral
			# 		skill = 7
			# 		# event_leader = yes
			# 		traits = {
			# 			trait = nsc_freebooter_admiral_trait_child_of_great_khan
			# 			0 = leader_trait_chosen
			# 			# 0 = leader_trait_fleet_logistician
			# 			# 0 = leader_trait_eager
			# 		}
			# 		# effect = {
			# 		# 	set_leader_flag = great_khan
			# 		# 	save_global_event_target_as = great_khan
			# 		# }
			# 	}
			# } else = {
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 7
				event_leader = yes
				can_manually_change_location = no
				can_see_in_list = no
				randomize_traits = no
				# traits are cleared only (vanilla bug?)
				traits = {
					0 = leader_trait_great_khan
					0 = leader_trait_chosen
					0 = leader_trait_fleet_logistician
				}
			}

			last_created_leader = {
				add_trait_no_notify = leader_trait_great_khan
				add_trait_no_notify = leader_trait_chosen
				add_trait_no_notify = subclass_admiral_aggressor # councilor no
				owner = {
					switch = { trigger = has_country_flag
						marauder_1 = { prev = { add_trait_no_notify = leader_trait_master_gunner } }
						marauder_2 = { prev = { add_trait_no_notify = leader_trait_demolisher_destiny } }
						marauder_3 = { prev = { add_trait_no_notify = leader_trait_destiny_engineer } }
				}
				}
				random_list = {
					1 = { add_trait_no_notify = leader_trait_annihilator_3 add_trait_no_notify = leader_trait_demolisher_3	add_trait_no_notify = leader_trait_artillerist_3 }
					1 = { add_trait_no_notify = leader_trait_artillerist_3 add_trait_no_notify = leader_trait_demolisher_3	add_trait_no_notify = leader_trait_wrecker_3 }
					1 = { add_trait_no_notify = leader_trait_annihilator_3 add_trait_no_notify = leader_trait_demolisher_3	add_trait_no_notify = leader_trait_wrecker_3 }
					1 = { add_trait_no_notify = leader_trait_annihilator_3 add_trait_no_notify = leader_trait_artillerist_3	add_trait_no_notify = leader_trait_wrecker_3 }
				}

				if = {
					limit = { NOT = { has_trait = leader_trait_fleet_logistician } }
					add_trait_no_notify = leader_trait_fleet_logistician
				}
				set_leader_flag = great_khan
				save_global_event_target_as = great_khan
				recruitable = no
				exile_leader_as = exiled_khan
			}
			if = {
				limit = { exists = event_target:khan_destroyer }
				## Assign fleet + notify: Only if in battle?
				if = {
					limit = { has_global_flag = CmtFlagDebugMode }
					country_event = { id = marauder.523 days = 5 }
				}
				else = {
					event_target:global_event_country = {
						country_event = { id = marauder.523 days = 210 random = 160 }
					}
				}
			}
		}
		else_if = {
			limit = {
				NOR = {
					has_global_flag = great_khan_dead
					has_country_flag = khan_dead_event_fine
				}
			}
			country_event = { id = marauder.514 days = 2 }
		}
		else = {
			country_event = { id = marauder.712 days = 10 } # Needless Vanilla Event!?
		}
	}
}

# Copy of marauder.514, fallback for when the Khan mysteriously dies outside of the events meant to kill them.
country_event = {
	id = marauder.712
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = khan_dead_event_fine }
	}
	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		set_country_flag = khan_dead_age
		observer_event = { id = observer.17 }
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		country_event = { id = marauder.600 days = 200 random = 100 }
		if = {
			limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = {
				kill_leader = { show_notification = no fire = yes }
			}
		}
		if = {
			limit = { exists = event_target:great_khan }
			event_target:great_khan = {
				kill_leader = { show_notification = no fire = yes }
			}
		}
	}
}

##################################

# namespace = custodian
# # Override Test Event
# country_event = {
# 	id = custodian.499
# 	hide_window = yes
# 	is_triggered_only = yes
# 	# trigger = { always = no }
# 	immediate = {
# 		if = {
# 			limit = { is_galactic_council_established = no }
# 			set_council_size = 3
# 			add_to_galactic_council = yes
# 			while = {
# 				count = 2
# 				random_playable_country = {
# 					limit = {
# 						is_galactic_community_member = yes
# 						is_part_of_galactic_council = no
# 						is_galactic_custodian = no
# 					}
# 					add_to_galactic_council = yes
# 				}
# 			}
# 		}
# 		set_galactic_custodian = yes
# 		country_event = { id = custodian.1 }
# 		country_event = { id = custodian.10 days = 5400 } # Ends in 15 years
# 		if = {
# 			limit = { has_global_flag = gdf_active }
# 			country_event = { id = custodian.35 days = 10 }
# 		}
# 	}
# }

##################################

namespace = emperor
# Override Test Event
country_event = {
	id = emperor.499
	hide_window = yes
	is_triggered_only = yes
	# trigger = { always = no }
	immediate = {
		if = {
			limit = { is_galactic_council_established = no }
			set_council_size = 3
			# add_to_galactic_council = yes
			while = {
				count = 3
				random_playable_country = {
					limit = {
						is_galactic_community_member = yes
						is_part_of_galactic_council = no
						is_galactic_custodian = no
					}
					add_to_galactic_council = yes
				}
			}
			# set_galactic_custodian = yes
		}
		country_event = { id = emperor.1 }
	}
}

# Vanilla Fix: distance source scope
### Pirates: The Bemat Thalassocracy (by Gemma Thomson) ###
namespace = pirate

# Take pirate starbase (on_ship_disabled - otherwise cannot be conquered).
# This = Ship
# From = Disabler Ship
ship_event = {
	id = pirate.65
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_scope_valid = yes
		exists = owner
		exists = from.owner
		exists = fleet
		exists = solar_system
		is_ship_class = shipclass_starbase
	}
	immediate = {
		if = {
			limit = { from.owner = { is_pirate = yes }
				owner = {
					OR = {
						is_pirate = yes
						is_country_type = rebel
					}
				}
			}
			solar_system = {
				every_system_planet = {
					limit = { is_owned_by = root.owner }
					set_controller = from.owner
				}
			}
			starbase = { set_owner = from.owner }
		}
		else_if = {
			limit = {
				from.owner = { is_country_type_with_subjects = yes }
				owner = {
					OR = {
						is_pirate = yes
						is_country_type = rebel
					}
				}
				starbase = { has_starbase_size > starbase_outpost }
			}
			# log="take pirate starbase"
			# if = { limit = { starbase = { has_starbase_size > starbase_outpost } }
			from = {
				save_event_target_as = pirate_slayers
				owner = {
					random_list = {
						85 = { country_event = { id = pirate.25 } }
						15 = {
							country_event = { id = pirate.26 }
							modifier = {
								factor = 0
								OR = {
									NOT = { has_event_chain = l_cluster_chain }
									root.owner = { is_country_type = rebel }
								}
							}
						}
					}
				}
			}
		}
		else_if = {
			limit = { owner = { is_pirate = yes } }
			starbase = { destroy_fleet = fleet }
			# log="destroy pirate station"
		}
	}
}

# Pirate starbase (on_ship_enabled) - destroy (HIDDEN)
ship_event = {
	id = pirate.66
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_scope_valid = yes
		exists = owner
		owner = {
			OR = {
				is_pirate = yes
				is_country_type = rebel
			}
		}
		exists = solar_system
		exists = fleet
		is_ship_class = shipclass_starbase
		NOR = {
			is_ship_size = starbase_marauder
			solar_system = {
				any_fleet_in_system = {
					exists = owner
					is_owned_by = root.owner
					NOT = { is_same_value = root.fleet }
				}
			}
		}
	}
	immediate = {
		if = {
			limit = {
				solar_system = {
					# NOT = {
					# 	any_fleet_in_system = {
					# 		NOT = { is_same_value = root.fleet }
					# 		is_owned_by = root.owner
					# 	}
					# }
					any_fleet_in_system = {
						exists = owner
						NOT = { is_owned_by = root.owner }
						owner = { is_hostile = root.owner }
						is_civilian = no
					}
				}
			}
			# log="destroy pirate starbase"
			fleet = { every_owned_ship = { destroy_ship = this } }
			destroy_fleet = fleet
		}
	}
}

# Setup (event_target:global_event_country scope; randomly triggered in pirate.100): Find a suitable spawn point
country_event = {
	id = pirate.150
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			exists = event_target:thalassocracy_country
			any_country = { has_country_flag = met_thalassocracy }
		}
	}

	immediate = {
		create_thalassocracy_country = yes
		if = { # Prioritise unoccupied systems
			limit = {
				any_system = {
					is_valid_crystal_splitter_system = yes
					num_planets_in_system > 1
				}
			}
			random_system = {
				limit = {
					is_valid_crystal_splitter_system = yes
					num_planets_in_system > 1
				}
				save_global_event_target_as = thalassocracy_target_system
				random_system_planet = {
					save_global_event_target_as = thalassocracy_spawn_planet
					set_planet_flag = thalassocracy_visited
				}
				random_system_planet = {
					limit = {
						NOT = { has_planet_flag = thalassocracy_visited }
					}
					save_global_event_target_as = thalassocracy_target_planet
				}
				event_target:thalassocracy_country = { set_country_flag = spawned_fleet }
				create_thalassocracy_fleet = yes
			}
		}
		else_if = { # Pop up in a semi-convenient, empire-owned system, if possible
			limit = { # Must be duplicated below, in the random_system effect.
				any_system = {
					has_owner = yes
					exists = space_owner
					num_planets_in_system > 1
					NOR = {
						is_pirate_system = yes
						has_star_flag = hostile_system
						has_star_flag = guardian
						has_star_flag = enclave
						is_capital_system = yes
					}
					has_system_trade_value >= 80
					distance = {
						source = space_owner.capital_scope.solar_system
						use_bypasses = no
						min_jumps = 2
						max_jumps = 5
					}
				}
			}
			random_system = {
				limit = {
					has_owner = yes
					exists = space_owner
					num_planets_in_system > 1
					NOR = {
						is_pirate_system = yes
						has_star_flag = hostile_system
						has_star_flag = guardian
						has_star_flag = enclave
						is_capital_system = yes
					}
					has_system_trade_value >= 80
					distance = {
						source = space_owner.capital_scope.solar_system
						use_bypasses = no
						min_jumps = 2
						max_jumps = 5
					}
				}
				save_global_event_target_as = thalassocracy_target_system
				random_system_planet = {
					save_global_event_target_as = thalassocracy_spawn_planet
					set_planet_flag = thalassocracy_visited
				}
				random_galaxy_planet = {
					limit = {
						NOT = { has_planet_flag = thalassocracy_visited }
					}
					save_global_event_target_as = thalassocracy_target_planet
				}
				event_target:thalassocracy_country = { set_country_flag = spawned_fleet }
				create_thalassocracy_fleet = yes
				space_owner = {
					country_event = { id = pirate.155 days = 0 scopes = { from = event_target:thalassocracy_country } } # Establish contact
				}
			}
		}
		# else = {
		# 	# Nothing; await next pulse/valid country
		# }
	}
}
