#########################################
#########################################
#####		Marauder Events			#####
#####	Vanilla by Henrik Thyrwall	#####
#####	Replaced by Crisis Manager	#####
#####								#####
#########################################
#########################################
namespace = marauder
#
# Check all events: has_country_flag = marauder_x (x = 1 - 3)
#
###		On Actions Short Docu	###
# on_leader_fired = marauder.70
# on_planet_bombarded = marauder.103
# on_monthly_pulse = marauder.113	# Raiders Driven Off (HIDDEN)
# on_yearly_pulse =
# 	marauder.100	# Raid Available
# 	marauder.85		# Mercenaries Available
# 	marauder.160	# Raiding End Failsafe
# 	marauder.699	# Neighbor Events - .707
###		Khan Dead Events		###
# on_ship_destroyed_victim	marauder.505 Defeated in Combat but NOT die.
# on_ship_destroyed_victim	marauder.509 Defeated in Combat and die.
# on_monthly_pulse			marauder.512 Dies for Other Reasons - From marauder.511.
# on timer start			marauder.514 Dies of Old Ages.
# on_leader_death			marauder.711/.712

###################
###- Constants -###
###################

### Critical (Lifespan of Khan, debug code)
@CmtConstKhanLifespan_1a =	1		### Minimun Lifespan / day
@CmtConstKhanLifespan_1b =	0.025	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_1c =	35		### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_1d =	5		### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_1e =	8		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_1f =	4		### Time-Lag of Post-Death Process (random = 1f)

### Fleeting (Lifespan of Khan)
@CmtConstKhanLifespan_2a =	4320	### Minimun Lifespan / day
@CmtConstKhanLifespan_2b =	0.75	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_2c =	7200	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_2d =	2880	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_2e =	90		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_2f =	60		### Time-Lag of Post-Death Process (random = 1f)

### Standard (Lifespan of Khan)
@CmtConstKhanLifespan_3a =	7200	### Minimun Lifespan / day
@CmtConstKhanLifespan_3b =	1.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_3c =	10800	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_3d =	5000	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_3e =	200		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_3f =	100		### Time-Lag of Post-Death Process (random = 1f)

### Enduring (Lifespan of Khan)
@CmtConstKhanLifespan_4a =	10800	### Minimun Lifespan / day
@CmtConstKhanLifespan_4b =	3.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_4c =	16200	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_4d =	5400	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_4e =	270		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_4f =	180		### Time-Lag of Post-Death Process (random = 1f)

### Venerable (Lifespan of Khan)
@CmtConstKhanLifespan_5a =	18000	### Minimun Lifespan / day
@CmtConstKhanLifespan_5b =	5.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_5c =	27000	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_5d =	9000	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_5e =	360		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_5f =	360		### Time-Lag of Post-Death Process (random = 1f)

### Immortality (Lifespan of Khan): Directly Written in Event/Effect
@CmtConstKhanLifespan_6e =	360		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_6f =	360		### Time-Lag of Post-Death Process (random = 1f)

### Marauders Destroyed (HIDDEN) on_ship_destroyed_victim
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
country_event = {
	id = marauder.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = dormant_marauders
		OR = {
			AND = { # Last ship is Void Dwelling.
				fromfrom = { is_ship_size = marauder_void_dwelling }
				count_owned_ship = {
					limit = { is_ship_size = marauder_void_dwelling }
					count = 0
				}
				num_starbases = 0
			}
			AND = { # Last ship is Starbase
				fromfrom = { is_ship_size = starbase_marauder }
				count_owned_ship = {
					limit = { is_ship_size = marauder_void_dwelling }
					count = 0
				}
				num_starbases = 1 # Last one still counts as alive when this fires.
			}
		}
	}

	immediate = {
		from = { save_event_target_as = marauder_killer }
		owner_species = { save_event_target_as = marauder_species }
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = { id = marauder.5 } # Notify
		}
		random_relation = {
			limit = {
				CmtTriggerIsPlayableEmpire = yes
				has_policy_flag = refugees_allowed
				has_communications = root
			}
			country_event = { id = marauder.9 days = 10 random = 10 } # Refugees
		}

		# Vengeance if Mercenaries hired
		if = {
			limit = {
				from = { CmtTriggerIsPlayableEmpire = yes }
				OR = {
					has_country_flag = merc_fleet_1_hired
					has_country_flag = merc_fleet_2_hired
					has_country_flag = merc_fleet_3_hired
				}
			}
			from = {
				country_event = { id = marauder.6 days = 100 random = 50 }
				if = {
					limit = { exists = fromfrom exists = fromfrom.solar_system }
					fromfrom.solar_system = {
						save_event_target_as = attacked_system
						random_system_planet = {
							limit = { is_a_planet = yes }
							weights = {
								base = 1
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 1)
			if = {
				limit = { has_country_flag = marauder_1 }
				every_playable_country = {
					limit = { any_owned_fleet = { CmtTriggerHiredMarauderFleet1 = yes } }
					set_country_flag = CmtFlagHiringMarauder1
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = {
					limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_1 }
						}
						random_system_planet = {
							limit = { is_a_planet = yes }
							weights = {
								base = 1
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 2)
			else_if = {
				limit = { has_country_flag = marauder_2 }
				every_playable_country = {
					limit = { any_owned_fleet = { CmtTriggerHiredMarauderFleet2 = yes } }
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = {
					limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_2 }
						}
						random_system_planet = {
							limit = { is_a_planet = yes }
							weights = {
								base = 1
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 3)
			else_if = {
				limit = { has_country_flag = marauder_3 }
				every_playable_country = {
					limit = { any_owned_fleet = { CmtTriggerHiredMarauderFleet3 = yes } }
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = {
					limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_3 }
						}
						random_system_planet = {
							limit = { is_a_planet = yes }
							weights = {
								base = 1
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}

			set_country_type = ruined_marauders # Kill diplomacy
			# Only to be sure, superfluous?
			if = { limit = { NOT = { is_hostile = from } }
				set_faction_hostility = {
					target = from
					set_hostile = yes
				}
			}

		}
		else = { destroy_country = yes }
	}
}

# Marauder Vengeance
country_event = {
	id = marauder.8
	title = "marauder.6.name"
	desc = "marauder.8.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	location = event_target:attacked_system
	is_triggered_only = yes
	option = { name = DISCONCERTING }
	after = {
		hidden_effect = {
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint }
				clear_global_event_target = CmtTargetMarauderRallyPoint
			}
		}
	}
}

## Marauder Infighting On Action (on_yearly_pulse)
# Reenabled by FirePrince - Commented out in Vanilla: Works in game, but causes asserts when fleets from the same country attack each other.
# Almost the same event exists for feral_prethoryn_infighting crisis.123
event = {
	id = marauder.11
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		years_passed > 80
		num_marauder_empires_to_spawn > 0
		NOR = {
			has_global_flag = marauder_infighting_ongoing
			has_global_flag = marauder_crisis_ongoing
		}
		# any_country = { is_country_type = dormant_marauders }
		OR = {
			exists = event_target:marauder_country_1
			AND = {
				num_marauder_empires_to_spawn > 1
				exists = event_target:marauder_country_2
			}
			AND = {
				num_marauder_empires_to_spawn > 2
				exists = event_target:marauder_country_3
			}
		}
	}
	immediate = {
		random = {
			chance = 50
			random_country = {
				limit = { is_country_type = dormant_marauders }
				country_event = { id = marauder.12 days = 12 random = 6 }
			}
		}
	}
}

# Marauder Infighting
country_event = {
	id = marauder.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_global_flag = marauder_infighting_ongoing
		random_planet_within_border = {
			limit = { is_star = no }
			save_event_target_as = marauder_infighting_target
			create_fleet = {
				effect = {
					set_owner = root
					# Dynamic strenght
					if = { limit = { mid_game_years_passed > 40 }
						create_dyn_marauder_fleet = { OUTRIDER = 34 LANCER = 22 CHAMPION = 16 }
					} else_if = { limit = { years_passed > 120 }
						create_dyn_marauder_fleet = { OUTRIDER = 22 LANCER = 14 CHAMPION = 8 }
					} else = {
						create_dyn_marauder_fleet = { OUTRIDER = 12 LANCER = 8 CHAMPION = 4 }
					}
					set_location = {
						target = prev
						distance = 80
						angle = 0
					}
					set_fleet_flag = infighting_marauders
					save_event_target_as = infighting_target_1
				}
			}
			if = {
				limit = { NOT = { exists = event_target:marauder_infighting } }
				# Make opponent species more diverse and random
				random_country = {
					limit = {
						CmtTriggerIsMarauder = yes
						exists = species
					}
					species = { save_event_target_as = marauder_species }
				}
				create_country = {
					name = random
					type = marauder_raiders # dormant_marauders # ruined_marauders
					species = event_target:marauder_species # root
					name_list = random
					flag = {
						icon = { category = "pirate" file = "flag_pirate_13.dds" }
						background = { category = "backgrounds" file = "new_dawn.dds" }
						colors = { "red_orange" "black" "null" "null" }
					}
					# origin = "origin_void_dwellers"
					effect = {
						save_global_event_target_as = marauder_infighting
						set_country_flag = marauder_vengeance_begun
						randomize_flag_symbol = "pirate"
					}
				}
			}
			# Mainly copied from pirate.150
			solar_system = {
				random_neighbor_system = {
					if = { #Prioritise unoccupied systems
						limit = {
							# any_neighbor_system = {
							closest_system = {
								limit = {
									num_planets_in_system > 1
									has_owner = no
								}
								NOR = {
									exists = space_owner
									has_star_flag = hostile_system
									has_star_flag = guardian
									has_star_flag = tiyanki_home_system
									has_star_flag = amoeba_home_system
									has_star_flag = lcluster
									has_star_flag = sealed_system
								}
								has_access_fleet = event_target:infighting_target_1
								min_steps = 2
								max_steps = 5
							}
						}
						closest_system = {
							limit = {
								num_planets_in_system > 1
								NOR = {
									exists = space_owner
									has_star_flag = hostile_system
									has_star_flag = guardian
									has_star_flag = tiyanki_home_system
									has_star_flag = amoeba_home_system
									has_star_flag = lcluster
									has_star_flag = sealed_system
								}
								has_access_fleet = event_target:infighting_target_1
							}
							min_steps = 2
							max_steps = 5
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = marauder_infighting_target
							}
						}
					}
					else = { # Pop up in a semi-convenient, empire-owned system, if possible
						#  limit = {
							# any_neighbor_system = {
						closest_system = {
							limit = {
								exists = space_owner
								num_planets_in_system > 1
								NOR = {
									is_pirate_system = yes
									has_star_flag = hostile_system
									has_star_flag = guardian
									has_star_flag = enclave
									is_capital_system = yes
									is_owned_by = root
								}
								has_system_trade_value > 75
								has_access_fleet = event_target:infighting_target_1
								distance = {
									source = space_owner.capital_scope.solar_system
									use_bypasses = no
									min_jumps = 1
									max_jumps = 5
								}
							}
							min_steps = 1
							max_steps = 5
							random_system_planet = {
								limit = { is_star = no }
								save_event_target_as = marauder_infighting_target
							}
						}
						# Must be duplicated above, in the random_system effect
						# random_neighbor_system = {
						# 	limit = {
						# 		exists = space_owner
						# 		num_planets_in_system > 1
						# 		NOR = {
						# 			is_pirate_system = yes
						# 			has_star_flag = hostile_system
						# 			has_star_flag = guardian
						# 			has_star_flag = enclave
						# 			is_capital_system = yes
						# 			is_owned_by = root
						# 		}
						# 		has_system_trade_value > 80
						# 		distance = {
						# 			source = space_owner.capital_scope.solar_system
						# 			use_bypasses = no
						# 			min_jumps = 2
						# 			max_jumps = 5
						# 		}
						# 	}
					}
					create_fleet = {
						# name = random
						effect = {
							set_owner = event_target:marauder_infighting # last_created_country
							# Dynamic strenght
							if = { limit = { mid_game_years_passed > 40 }
								create_dyn_marauder_fleet = { OUTRIDER = 34 LANCER = 22 CHAMPION = 16 }
							} else_if = { limit = { years_passed > 120 }
								create_dyn_marauder_fleet = { OUTRIDER = 22 LANCER = 14 CHAMPION = 8 }
							} else = {
								create_dyn_marauder_fleet = { OUTRIDER = 12 LANCER = 8 CHAMPION = 4 }
							}
							set_location = {
								target = event_target:marauder_infighting_target
								distance = 80
								angle = 180
							}
						}
					}
					last_created_fleet = {
						save_event_target_as = infighting_target_2
						set_fleet_flag = infighting_marauders
						auto_follow_fleet = { target = event_target:infighting_target_1 attack_fleet = yes }
					}
				}
			}
		}
		establish_communications_no_message = event_target:marauder_infighting
		# event_target:infighting_target_1 = {
		# 	every_country = {
		# 		limit = {
		# 			OR = {
		# 				is_country_type = nomad
		# 				is_country_type = enclave
		# 				is_country_type = dormant_marauders
		# 			}
		# 		}
		# 		set_faction_hostility = {
		# 			target = prev
		# 			set_hostile = no
		# 			set_neutral = no
		# 			set_friendly = yes
		# 		}
		# 	}
		# }
		set_faction_hostility = {
			target = event_target:marauder_infighting
			set_hostile = no
			set_neutral = no
			set_friendly = yes
		}
		every_playable_country = {
			# limit = { is_country_type = default }
			establish_communications_no_message = event_target:marauder_infighting
		}
	}
}

# Marauder Infighting Over (on_fleet_destroyed_victim)
# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = marauder.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_infighting_ongoing
		OR = {
			is_country_type = dormant_marauders
			is_country_type = marauder_raiders
		}
		OR = {
			fromfrom = { has_fleet_flag = infighting_marauders }
			fromfromfrom = { has_fleet_flag = infighting_marauders }
		}
	}
	immediate = {
		remove_global_flag = marauder_infighting_ongoing
		random_planet_within_border = {
			limit = { has_planet_flag = raid_source }
			save_event_target_as = return_point
		}
		# Also by marauder.14
		if = { limit = { exists = event_target:marauder_infighting }
			if = { limit = { is_same_empire = event_target:marauder_infighting }
				destroy_country = yes
			}
			if = { limit = { from = { is_same_empire = event_target:marauder_infighting } }
				set_country_type = dormant_marauders
			}
			clear_global_event_target = marauder_infighting
		}

		if = { limit = { fromfromfrom = { has_fleet_flag = infighting_marauders } }
			fromfromfrom = { save_event_target_as = infighting_marauders }
		} else_if = {
			limit = { exists = event_target:infighting_target_1 event_target:infighting_target_1 = { NOT = { is_same_value = fromfrom } } }
			event_target:infighting_target_1 = { save_event_target_as = infighting_marauders }
		} else_if = {
			limit = { exists =  event_target:infighting_target_2 event_target:infighting_target_2 = { NOT = { is_same_value = fromfrom } } }
			event_target:infighting_target_2 = { save_event_target_as = infighting_marauders }
		} else_if = {
			limit = { from = { is_country_type = dormant_marauders } }
			random_owned_fleet = {
				limit = { has_fleet_flag = infighting_marauders }
				save_event_target_as = infighting_marauders
			}
		}

		if = { limit = { exists =  event_target:infighting_marauders }
			event_target:infighting_marauders = {
				if = {
					limit = { NOT = { exists = event_target:return_point } }
					solar_system = {
						random_system_planet = {
							limit = { is_star = no }
							save_event_target_as = return_point
						}
					}
				}
				queue_actions = {
					wait = 2
					find_closest_planet = {
						trigger = {
							id = marauder_infighting.t1
							solar_system = {
								has_access_fleet = prevprev
								has_owner = yes
								NOR = {
									is_same_value = root.solar_system
									is_owned_by = event_target:infighting_marauders
									is_owned_by = from
								}
							}
							is_a_planet = yes
						}
						found_planet = {
							move_to = this
							wait = 5
							orbit_planet = this
						}
					}
					move_to = event_target:return_point
					wait = 5
					effect = {
						id = marauder_infighting.e2
						destroy_fleet = this
					}
				}
				# auto_move_to_planet = {
				# 	target = event_target:return_point
				# 	destroy_on_arrival = yes
				# 	clear_auto_move_on_arrival = yes
				# }
			}
		}
	}
}

# Rebuild marauder starbase
system_event = {
	id = marauder.17
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { exists = starbase }
		has_star_flag = marauder_system
	}
	immediate = {
		if = {
			limit = {
				any_fleet_in_system = {
					exists = owner
					owner = { is_country_type = dormant_marauders }
				}
			}
			random_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_country_type = dormant_marauders }
				}
				prev = {
					create_starbase = {
						size = "starbase_marauder"
						owner = prev.owner
					}
				}
			}
		}
	}
}

# Hire Mercenaries
# Fixed by FirePrince: give fleet not unreal instant
country_event = {
	id = marauder.34
	title = "marauder_diplo_header"
	desc = {
		text = marauder.34.1.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
		}
	}
	desc = {
		text = marauder.34.2.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
		}
	}
	desc = {
		text = marauder.34.3.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = "ethic_spaceship_room"
	}
	is_triggered_only = yes
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Hire Armada of the Voidborn
	option = {
		name = marauder.34.1.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_1_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire Star Rider Flotilla
	option = {
		name = marauder.34.1.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_1_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire First Storm Wing
	option = {
		name = marauder.34.1.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_1_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire 234th Dwamak-Bashers
	option = {
		name = marauder.34.2.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_2_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire Unhinged Screamer Flotilla
	option = {
		name = marauder.34.2.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_2_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire Frenzied Volunteer Squadron
	option = {
		name = marauder.34.2.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_2_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire Her Chosen Champions
	option = {
		name = marauder.34.3.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_3_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire Order of Eternal Night
	option = {
		name = marauder.34.3.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_3_hired
			country_event = { id = marauder.37 }
		}
	}
	# Hire Twilight Congregation
	option = {
		name = marauder.34.3.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_3_hired
			country_event = { id = marauder.37 }
		}
	}
	option = {
		name = marauder.34.d
		hidden_effect = {
			country_event = { id = marauder.21 }
		}
	}
	option = {
		name = marauder.34.e
		default_hide_option = yes
	}
}

# Mercenary Fleet Hired
country_event = {
	id = marauder.37
	title = "marauder_diplo_header"
	desc = {
		text = marauder.37.1.a.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			any_relation = { is_fallen_empire = yes }
		}
	}
	desc = {
		text = marauder.37.1.b.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { any_relation = { is_fallen_empire = yes } }
		}
	}
	desc = {
		text = marauder.37.2.a.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
		}
	}
	desc = {
		text = marauder.37.3.a.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = "ethic_spaceship_room"
	}
	is_triggered_only = yes
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		random_relation = {
			limit = { is_fallen_empire = yes }
			save_event_target_as = random_fallen_empire
		}
		# Create global Rally Point event_targets
		event_target:current_marauder_diplomacy = {
			switch = {
				trigger = has_country_flag
				marauder_1 = {
					save_global_event_target_as = marauder_country_1
					if = {
						limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint1 } }
						country_event = { id = marauder.499 }
					}
				}
				marauder_2 = {
					save_global_event_target_as = marauder_country_2
					if = {
						limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint2 } }
						country_event = { id = marauder.499 }
					}
				}
				marauder_3 = {
					save_global_event_target_as = marauder_country_3
					if = {
						limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint3 } }
						country_event = { id = marauder.499 }
					}
				}
			}
		}

		if = {
			limit = {
				OR = {
					is_hostile = event_target:current_marauder_diplomacy
					event_target:current_marauder_diplomacy = { is_hostile = prev }
				}
			}
			country_event = { id = marauder.38 days = 20 }
		} else = {
			country_event = { id = marauder.38 } # use mia
		}
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.37.a
		hidden_effect = {
			country_event = { id = marauder.21 }
		}
	}
	option = {
		name = marauder.37.b
		default_hide_option = yes
	}
}

# The Great Khan Expanded (by FirePrince)
country_event = {
	id = marauder.38
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		switch = {
			trigger = has_country_flag
			# Hire Armada of the Voidborn
			merc_fleet_1_1_hired = {
				remove_country_flag = merc_fleet_1_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					root = {
						CmtEffectCreateFleet_KhanArmadaVoidborn = yes
						last_created_fleet = { set_fleet_flag = armada_of_the_voidborn }
					}
				}
			}
			# Hire Star Rider Flotilla
			merc_fleet_2_1_hired = {
				remove_country_flag = merc_fleet_2_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					root = {
						CmtEffectCreateFleet_KhanStarRiderFlotilla = yes
						last_created_fleet = { set_fleet_flag = star_rider_flotilla }
					}
				}
			}
			# Hire First Storm Wing
			merc_fleet_3_1_hired = {
				remove_country_flag = merc_fleet_3_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					root = {
						CmtEffectCreateFleet_KhanFirstStormWing = yes
						last_created_fleet = { set_fleet_flag = first_storm_wing }
					}
				}
			}
			# Hire 234th Dwamak-Bashers
			merc_fleet_1_2_hired = {
				remove_country_flag = merc_fleet_1_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					root = {
						CmtEffectCreateFleet_KhanDwamakBashers = yes
						last_created_fleet = { set_fleet_flag = dwamak_bashers }
					}
				}
			}
			# Hire Unhinged Screamer Flotilla
			merc_fleet_2_2_hired = {
				remove_country_flag = merc_fleet_2_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					root = {
						CmtEffectCreateFleet_KhanUnhingedScreamerFlotilla = yes
						last_created_fleet = { set_fleet_flag = unhinged_screamer_flotilla }
					}
				}
			}
			# Hire Frenzied Volunteer Squadron
			merc_fleet_3_2_hired = {
				remove_country_flag = merc_fleet_3_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					root = {
						CmtEffectCreateFleet_KhanFrenziedVolunteerSquadron = yes
						last_created_fleet = { set_fleet_flag = frenzied_volunteer_squadron }
					}
				}
			}
			# Hire Her Chosen Champions
			merc_fleet_1_3_hired = {
				remove_country_flag = merc_fleet_1_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					root = {
						CmtEffectCreateFleet_KhanHerChosenChampions = yes
						last_created_fleet = { set_fleet_flag = her_chosen_champions }
					}
				}
			}
			# Hire Order of Eternal Night
			merc_fleet_2_3_hired = {
				remove_country_flag = merc_fleet_2_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					root = {
						CmtEffectCreateFleet_KhanOrderEternalNight = yes
						last_created_fleet = { set_fleet_flag = order_of_eternal_night }
					}
				}
			}
			# Hire Twilight Congregation
			merc_fleet_3_3_hired = {
				remove_country_flag = merc_fleet_3_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					root = {
						CmtEffectCreateFleet_KhanTwilightCongregation = yes
						last_created_fleet = { set_fleet_flag = twilight_congregation }
					}
				}
			}
		}
		last_created_fleet = {
			save_event_target_as = hired_merc_fleet # vanilla nowhere used??
			if = { limit = {
					OR = {
						root = { is_hostile = event_target:current_marauder_diplomacy }
						event_target:current_marauder_diplomacy = { is_hostile = root }
					}
				}
				set_location = {
					target = root.capital_scope
					distance = 25
					angle = random
				}
			}
			if = { limit = {
					exists = root.capital_star.starbase
					root.capital_star.starbase = { is_owned_by = root }
				}
				set_home_base = root.capital_star.starbase
				set_mia = yes
			} else = { set_location = root.capital_scope }
			fleet_event = { id = marauder.50 days = 1800 }
		}
	}
}

### Mercenaries Leave (Home Systems Destroyed)
# This = Hiring country
# From = Destroyed Marauders
country_event = {
	id = marauder.76
	title = "marauder.76.name"
	desc = "marauder.76.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	location = this
	is_triggered_only = yes
	immediate = {
		# Marauder 1
		if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder1
				# from = { has_country_flag = marauder_1 } not always exists
			}
			every_owned_fleet = {
				limit = { CmtTriggerHiredMarauderFleet1 = yes }
				if = {
					limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = { limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}

				} else = {
					if = { limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder1
			break = yes
		}
		# Marauder 2
		else_if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder2
				# from = { has_country_flag = marauder_2 } not always exists
			}
			every_owned_fleet = {
				limit = { CmtTriggerHiredMarauderFleet2 = yes }
				if = {
					limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = { limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}

				} else = {
					if = { limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder2
			break = yes
		}
		# Marauder 3
		else_if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder3
				# from = { has_country_flag = marauder_3 } not always exists
			}
			every_owned_fleet = {
				limit = { CmtTriggerHiredMarauderFleet3 = yes }
				if = {
					limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = { limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}

				} else = {
					if = { limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder3
		}
	}

	option = { name = marauder.76.a }
}

### Mercenaries Leave (join the Great Khan)
# Refund opportunity (by FirePrince)
# Scope = Recruiter
country_event = {
	id = marauder.77
	title = "marauder.77.name"
	desc = "marauder.77.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter

	is_triggered_only = yes

	immediate = {
		# Marauder 1
		set_variable = { which = merccost value = 0 }

		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder1 }

			every_owned_fleet = {
				limit = { CmtTriggerHiredMarauderFleet1 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					armada_of_the_voidborn = {
						prev = { change_variable = { which = merccost value = @largemerccost } }
					}
					star_rider_flotilla = {
						prev = { change_variable = { which = merccost value = @mediummerccost } }
					}
					first_storm_wing = {
						prev = { change_variable = { which = merccost value = @smallmerccost } }
					}
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}

			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_1 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder1
			if = { # All Marauders unified
				limit = {
					event_target:CmtGlobalVar = {
						check_variable = { which = CmtVarKhanMultiple value < 5 }
					}
				}
				break = yes
			}
		}
		# Marauder 2
		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder2 }
			every_owned_fleet = {
				limit = { CmtTriggerHiredMarauderFleet2 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					dwamak_bashers = {
						prev = { change_variable = { which = merccost value = @largemerccost } }
					}
					unhinged_screamer_flotilla = {
						prev = { change_variable = { which = merccost value = @mediummerccost } }
					}
					frenzied_volunteer_squadron = {
						prev = { change_variable = { which = merccost value = @smallmerccost } }
					}
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_2 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder2
			if = { # All Marauders unified
				limit = {
					event_target:CmtGlobalVar = {
						check_variable = { which = CmtVarKhanMultiple value < 5 }
					}
				}
				break = yes
			}
		}
		# Marauder 3
		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder3 }
			every_owned_fleet = {
				limit = { CmtTriggerHiredMarauderFleet3 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					her_chosen_champions = {
						prev = { change_variable = { which = merccost value = @largemerccost } }
					}
					order_of_eternal_night = {
						prev = { change_variable = { which = merccost value = @mediummerccost } }
					}
					twilight_congregation = {
						prev = { change_variable = { which = merccost value = @smallmerccost } }
					}
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_3 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder3
		}
	}
	after = {
		# Refund of Mercenary Pay 1/2
		random = {
			chance = 50
			divide_variable = { which = merccost value = 200 }
			add_resource = {
				energy = -100
				mult = merccost
			}
		}
		clear_variable = merccost
	}
	option = { name = marauder.76.a }
}

#######################
###- Reinforcements -###
#######################

### Mercenaries Join Great Khan (HIDDEN)
country_event = {
	id = marauder.78
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				OR = {
					NOT = { has_global_flag = great_khan_wins }
					AND = {
						num_marauder_empires_to_spawn > 2
						exists = event_target:CmtTargetMarauderRallyPoint1
						exists = event_target:CmtTargetMarauderRallyPoint2
						exists = event_target:CmtTargetMarauderRallyPoint3
					}
					AND = {
						num_marauder_empires_to_spawn > 1
						exists = event_target:CmtTargetMarauderRallyPoint1
						exists = event_target:CmtTargetMarauderRallyPoint2
					}
					AND = {
						num_marauder_empires_to_spawn > 0
						exists = event_target:CmtTargetMarauderRallyPoint1
					}
				}
			}
			every_planet_within_border = {
				limit = { has_planet_flag = CmtFlagMarauderExpRallyPoint }
				if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint1 is_same_value = event_target:CmtTargetMarauderRallyPoint1 }
					CmtEffectCreateAdmiralty_KhanMercenaries1 = yes
				} else_if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint2 is_same_value = event_target:CmtTargetMarauderRallyPoint2 }
					CmtEffectCreateAdmiralty_KhanMercenaries2 = yes
				} else_if = {
					limit = { exists = event_target:CmtTargetMarauderRallyPoint3 is_same_value = event_target:CmtTargetMarauderRallyPoint3 }
					CmtEffectCreateAdmiralty_KhanMercenaries3 = yes
				}
			}
		} else = {
			switch = {
				trigger = has_country_flag
				marauder_1 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries1 = yes } }
				marauder_2 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries2 = yes } }
				marauder_3 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries3 = yes } }
			}
		}

		event_target:marauder_rally_point = {
			solar_system = { system_event = { id = khan.301 } } # Create Citadel
		}
		set_country_flag = declared_crisis
	}

	# after = {
	# 	hidden_effect = {
	# 		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
	# 			clear_global_event_target = CmtTargetMarauderRallyPoint1
	# 		}
	# 		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
	# 			clear_global_event_target = CmtTargetMarauderRallyPoint2
	# 		}
	# 		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
	# 			clear_global_event_target = CmtTargetMarauderRallyPoint3
	# 		}
	# 	}
	# }
}

### Start Marauder pirate01 -> madd_01 Gfxculture Override
event = {
	id = marauder.99
	hide_window = yes
	is_triggered_only = yes
	# potential = {
	immediate = {
		every_country = {
			limit = {
				CmtTriggerIsMarauder = yes
				NOT = { graphical_culture = madd_01 }
			}
			set_graphical_culture = madd_01
			## If is_designable Error: referring to a non-existent ship design
			# if = { limit = { has_existing_ship_design = "NAME_Outrider" }
			# 	log= "has_existing_ship_design NAME_Outrider"
			# }
			# if = { limit = { has_existing_ship_design = "marauder_corvette" }
			# 	log= "has_existing_ship_design marauder_corvette"
			# }
			# add_global_ship_design = "NAME_Outrider"
			# create_ship_design = { design = "NAME_Outrider" }
			# add_ship_design = last_created_design
			# # add_global_ship_design = "NAME_Lancer"
			# create_ship_design = { design = "NAME_Lancer" }
			# add_ship_design = last_created_design
			# # add_global_ship_design = "NAME_Void_Champion"
			# create_ship_design = { design = "NAME_Void_Champion" }
			# add_ship_design = last_created_design
			# # add_global_ship_design = "NAME_Ancestral_Glory"
			# create_ship_design = { design = "NAME_Ancestral_Glory" }
			# add_ship_design = last_created_design
		}
	}
}

# Raiders Hit Planet (HIDDEN)
# Vanilla fix
# From = Bombarder
planet_event = {
	id = marauder.103
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
	}
	trigger = {
		planet_devastation > 15
		from = { is_country_type = marauder_raiders }
		owner = { CmtTriggerIsEmpire = yes }
		NOT = { has_planet_flag = planet_raided }
	}
	immediate = {

		from = {
			random_owned_fleet = {
				limit = {
					has_fleet_flag = raiding_fleet
					root = { any_fleet_in_orbit = { is_same_value = prevprev } }
				}
				save_event_target_as = raiding_fleet
				# log="Save Marauder Raid Fleet on \\[Root.GetName]"
			}
		}

		random_country = {
			limit = {
				is_country_type = dormant_marauders
				has_country_flag = parent_of@from
			}
			save_event_target_as = marauder_country
			# log="Save Marauder Country on \\[Root.GetName]"
		}

		### Check Target valid (Vanilla Fix)
		if = {
			limit = {
				OR = {
					owner = { NOT = { has_country_flag = under_marauder_attack } }
					# owner = { NOT = { is_hostile = from } }
					# owner = { has_relation_flag = { who = event_target:marauder_country flag = hired_fleet } }
					AND = {
						is_occupied_flag = yes
						exists = controller
						NOT = { is_controlled_by = owner }
						controller = {
							CmtTriggerIsEmpire = yes
							NOT = { has_country_flag = under_marauder_attack }
							# OR = {
							# 	has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
							# 	NOT = { is_hostile = from }
							# }
						}
					}
				}
			}
			# log="Invalid Marauder Raid Target \\[This.GetName]"

			## Break Attack immediately
			event_target:raiding_fleet = {
				remove_auto_move_target = yes
				clear_orders = yes
				clear_fleet_actions = this
				set_disabled = yes
				set_event_locked = yes
			}

			## Refresh Agreement
			if = {
				limit = {
					owner = {
						# from = { is_hostile = prev }
						is_hostile = from
						has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
					}
				}
				owner = { save_event_target_as = marauder_employer }
			} else_if = {
				limit = {
					is_occupied_flag = yes
					exists = controller
					NOT = { is_controlled_by = owner }
					controller = {
						CmtTriggerIsEmpire = yes
						OR = {
							has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
							is_friendly_to = from
						}
					}
				}
				controller = { save_event_target_as = marauder_employer }
			}

			if = {
				limit = {
					exists = event_target:marauder_employer
					from = { is_hostile = event_target:marauder_employer }
					has_global_flag = gf_great_khan_active
				}
				from = {
					# Set friendly
					country_event = {
						id = khan.308
						scopes = { from = event_target:marauder_employer }
					}
				}
			}

			### Search New Target
			if = {
				limit = {
					OR = {
						owner = {
							NOR = {
								has_country_flag = under_marauder_attack
								has_country_flag = raid_target_of@event_target:marauder_country
								has_relation_flag = { who = event_target:marauder_country flag = current_hired_target }
							}
						}
						AND = {
							is_occupied_flag = yes
							exists = controller
							NOT = { is_controlled_by = owner }
							controller = {
								CmtTriggerIsEmpire = yes
								NOT = { has_country_flag = under_marauder_attack }
								OR = {
									is_friendly_to = from
									is_neutral_to = from
								}
							}
						}
					}
				}
				# log="Save New Marauder Raid Target Victim"
				random_country = {
					limit = {
						CmtTriggerIsEmpire = yes
						has_country_flag = under_marauder_attack
						has_country_flag = raid_target_of@event_target:marauder_country
						has_relation_flag = { who = event_target:marauder_country flag = current_hired_target }
					}
					save_event_target_as = raid_victim
				}
			} else_if = {
				limit = {
					is_occupied_flag = no
					NOT = { exists = event_target:raid_victim }
					OR = {
						NOT = { exists = event_target:marauder_employer }
						owner = {
							NOT = { is_same_empire = event_target:marauder_employer }
							has_country_flag = under_marauder_attack
						}
					}
				}
				# log="Save fallback Marauder1 Raid Target Victim"
				owner = { save_event_target_as = raid_victim }
			}
			if = { # Raid anyway
				limit = {
					is_occupied_flag = yes
					NOT = { exists = event_target:raid_victim }
					owner = {
						NOT = { has_country_flag = under_marauder_attack }
						OR = {
							is_friendly_to = from
							is_neutral_to = from
						}
					}
					OR = {
						NOT = { exists = event_target:marauder_employer }
						controller = {
							has_country_flag = under_marauder_attack
							NOT = { is_same_empire = event_target:marauder_employer }
						}
					}
				}
				# log="Save fallback Marauder2 Raid Target Victim"
				controller = { save_event_target_as = raid_victim }
				# Free planet
				if = { limit = { num_armies < 1 }
					set_controller = owner
					if = {
						limit = {
							solar_system = { exists = starbase }
							solar_system.starbase = { is_owned_by = root.controller }
						}
						solar_system.starbase = { set_owner = root.owner }
					}
				}
			}

			if = {
				limit = {
					exists = event_target:raid_victim
					exists = event_target:raiding_fleet
				}
				# log="Search New Marauder Raid Target Planet"
				solar_system = {
					closest_system = {
						limit = {
							any_system_planet = {
								exists = owner
								is_owned_by = event_target:raid_victim
								is_colony = yes
								is_occupied_flag = no
								NOT = { has_planet_flag = planet_raided }
								num_pops > 1
							}
						}
						random_system_planet = {
							limit = {
								exists = owner
								is_owned_by = event_target:raid_victim
								is_colony = yes
								is_occupied_flag = no
								NOT = { has_planet_flag = planet_raided }
								num_pops > 1
							}
							save_event_target_as = raid_planet
							event_target:raiding_fleet = {
								# log="Found New Marauder Raid Target: \\[raid_planet.GetName]"
								set_event_locked = no
								# queue_actions = { wait = 2 }
								auto_move_to_planet = {
									target = event_target:raid_planet
									clear_auto_move_on_arrival = no
								}
							}
						}
					}
				}
				# Nothing found, return home
				if = {
					limit = {
						exists = event_target:raiding_fleet
						NOT = { exists = event_target:raid_planet }
					}
					# log="No new Marauder Raid Target found, return home"
					event_target:raiding_fleet = {
						set_event_locked = no
						fleet_event = { id = marauder.110 days = 7 }
					}
				}
				set_timed_planet_flag = { flag = planet_raided days = 9 }
				break = yes # Target not valid anymore
			}
		}

		set_timed_planet_flag = { flag = planet_raided days = 600 }
		event_target:raiding_fleet = { # Return home
			set_event_locked = no
			fleet_event = { id = marauder.110 days = 20 }
		}

		owner = { save_event_target_as = raid_victim }

		if = {
			limit = { owner = { NOT = { has_ethic = ethic_gestalt_consciousness } } }
			random_list = {
				50 = { planet_event = { id = marauder.104 } }
				50 = { planet_event = { id = marauder.105 } }
			}
		} else_if = {
			limit = {
				owner = {
					has_authority = auth_machine_intelligence
					NOT = { has_valid_civic = civic_machine_servitor }
				}
			}
			planet_event = { id = marauder.106 }
		} else_if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			planet_event = { id = marauder.107 }
		} else_if = {
			limit = { owner = { has_authority = auth_hive_mind } }
			planet_event = { id = marauder.108 }
		}
	}
}

# Raiders Hit Planet (Slaves)
planet_event = {
	id = marauder.105
	title = "marauder.104.name"
	desc = "marauder.105.desc"
	picture = GFX_evt_surrender
	show_sound = event_planetary_riot
	location = root
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = { is_colony = yes }
	immediate = {
		if = { limit = { NOT = { exists = event_target:marauder_country } }
			random_country = {
				limit = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@fromfrom
				}
				save_event_target_as = marauder_country
			}
		}
		if = {
			limit = {
				num_species > 1
				NOT = { exists = event_target:marauder_species }
			}
			if = { limit = { exists = event_target:marauder_country }
				event_target:marauder_country.owner_species = { save_event_target_as = marauder_species }
			} else_if = { limit = { exists = fromfrom exists = fromfrom.species }
				fromfrom.species = { save_event_target_as = marauder_species }
			}
			# log="Marauder From.species exists \\[marauder_species.GetName]"
		} # else = { log="No Marauder Species FromFrom \\[FromFrom.GetName]" }

		owner = {
			set_variable = { which = destruction_amount value = 3 }
			if = { limit = { exists = event_target:marauder_country }
				switch = {
					trigger = has_country_flag
					marauder_tribute_1@event_target:marauder_country = { set_variable = { which = destruction_amount value = 1 } }
					marauder_tribute_2@event_target:marauder_country = { set_variable = { which = destruction_amount value = 2 } }
					marauder_tribute_3@event_target:marauder_country = { set_variable = { which = destruction_amount value = 3 } }
					marauder_tribute_4@event_target:marauder_country = { set_variable = { which = destruction_amount value = 4 } }
					marauder_tribute_5@event_target:marauder_country = { set_variable = { which = destruction_amount value = 5 } }
					marauder_tribute_6@event_target:marauder_country = { set_variable = { which = destruction_amount value = 6 } }
					# default = { set_variable = { which = destruction_amount value = 3 } }
				}
			}
		}

		while = {
			count = owner.destruction_amount
			limit = { num_pops > 1 }
			random_owned_pop = {
				limit = {
					is_robot_pop = no
					is_sapient = yes
				}
				weights = {
					base = 3
					modifier = { add = 2 OR = { is_pop_category = slave is_pop_category = purge } }
					modifier = { add = 2 is_unemployed = yes }
					modifier = { add = 3 exists = event_target:marauder_species NOT = { is_same_species = event_target:marauder_species } }
					modifier = { add = 1 NOT = { ideal_planet_class = prev } }
					# modifier = { add = 1 prev = { count_owned_pop = { limit = { is_same_species = prevprev } count > 5 } } }
					# modifier = { add = 2 species_can_be_necrophaged = no }
				}
				kill_pop = yes
			}
		}
	}
	option = { name = marauder.105.a }
	after = { hidden_effect = { owner = { clear_variable = destruction_amount } } }
}

# Raiders Hit Planet (Servitor Machines)
planet_event = {
	id = marauder.107
	title = "marauder.104.name"
	desc = "marauder.107.desc"
	picture = GFX_evt_burning_settlement
	show_sound = event_planetary_riot
	location = root
	is_triggered_only = yes
	immediate = {
		if = { limit = { NOT = { exists = event_target:marauder_country } }
			random_country = {
				limit = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@fromfrom
				}
				save_event_target_as = marauder_country
			}
		}
		owner = {
			set_variable = { which = destruction_amount value = 5 }
			if = { limit = { exists = event_target:marauder_country }
				switch = {
					trigger = has_country_flag
					marauder_tribute_1@event_target:marauder_country = { set_variable = { which = destruction_amount value = 3 } }
					marauder_tribute_2@event_target:marauder_country = { set_variable = { which = destruction_amount value = 4 } }
					marauder_tribute_3@event_target:marauder_country = { set_variable = { which = destruction_amount value = 5 } }
					marauder_tribute_4@event_target:marauder_country = { set_variable = { which = destruction_amount value = 6 } }
					marauder_tribute_5@event_target:marauder_country = { set_variable = { which = destruction_amount value = 7 } }
					marauder_tribute_6@event_target:marauder_country = { set_variable = { which = destruction_amount value = 8 } }
					# default = { set_variable = { which = destruction_amount value = 5 } }
				}
			}
		}
	}
	option = {
		name = marauder.107.a
		while = {
			count = owner.destruction_amount
			limit = { num_pops > 1 }
			random_owned_pop = {
				limit = {
					is_robot_pop = no
					is_sapient = yes
				}
				weights = {
					base = 3
					modifier = { add = 1 OR = { is_pop_category = slave is_pop_category = purge } }
					modifier = { add = 1 is_unemployed = yes }
					# modifier = { add = -2 is_same_species = fromfrom }
				}
				kill_pop = yes
			}
		}
	}
	after = { hidden_effect = { owner = { clear_variable = destruction_amount } } }
}

# (The Great Khan Expanded)
# Helper event only - Create global Rally Point event_targets
country_event = {
	id = marauder.499
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		### Rally Point of Fleets 1/3: Set Event Targets; Set Owner Species to Target
		if = { limit = { exists = event_target:marauder_country_1 }
			event_target:marauder_country_1 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder1 }
				if = {
					limit = { any_system_within_border = { has_star_flag = marauder_capital_1 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_1 }
						if = {
							limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint1
							}
						} else = {	## Backup Code: raid_source NOT Found in Capital System
							random_system_planet = {
								limit = { is_planet = this }
								weights = {
									base = 1
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint1
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint1 - 1 Processed"
						}
					}
				} else = {	## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_planet = this }
						weights = {
							base = 1
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint1
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint1 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_1
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_1
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
		if = { limit = { exists = event_target:marauder_country_2 }
			event_target:marauder_country_2 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder2 }
				if = {
					limit = { any_system_within_border = { has_star_flag = marauder_capital_2 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_2 }
						if = {
							limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint2
							}
						} else = {	## Backup Code: raid_source NOT found in Capital System
							random_system_planet = {
								limit = { is_planet = this }
								weights = {
									base = 1
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint2
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint2 - 1 Processed"
						}
					}
				} else = {
					## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_planet = this }
						weights = {
							base = 1
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint2
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint2 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_2
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_2
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
		if = { limit = { exists = event_target:marauder_country_3 }
			event_target:marauder_country_3 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder3 }
				if = {
					limit = { any_system_within_border = { has_star_flag = marauder_capital_3 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_3 }
						if = {
							limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint3
							}
						} else = {	## Backup Code: raid_source NOT Found in Capital System
							random_system_planet = {
								limit = { is_planet = this }
								weights = {
									base = 1
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint3
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint3 - 1 Processed"
						}
					}
				} else = {	## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_planet = this }
						weights = {
							base = 1
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint3
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint3 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_3
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_3
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
	}
}

#####################################
### Main Effect of Khan Awakening ###
#####################################

### CRISIS BEGINS (MTTH 1 year)
country_event = {
	id = marauder.500
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		num_marauder_empires_to_spawn > 0
		# is_crises_allowed = yes
		NOT = { has_global_flag = great_khan_wins }
		CmtTriggerNowInKhanCrisis = no
		CmtTriggerHasPotentialKhanAwaking = yes
		NOT = { has_global_flag = war_in_heaven_started }
		crisis_happened_and_defeated = no
	}
	# trigger = {
	# 	OR = {
	# 		AND = {
	# 			mid_game_years_passed > 1
	# 			end_game_years_passed < 0
	# 		}
	# 		has_global_flag = horde_triggered
	# 	}
	# 	is_country_type = dormant_marauders
	# 	NOT = { has_global_flag = marauder_crisis_started }
	# 	OR = {
	# 		AND = {
	# 			has_country_flag = marauder_1
	# 			any_system_within_border = { has_star_flag = marauder_capital_1 }
	# 		}
	# 		AND = {
	# 			has_country_flag = marauder_2
	# 			any_system_within_border = { has_star_flag = marauder_capital_2 }
	# 		}
	# 		AND = {
	# 			has_country_flag = marauder_3
	# 			any_system_within_border = { has_star_flag = marauder_capital_3 }
	# 		}
	# 	}
	# }
	immediate = {
		if = {
			limit = {
				OR = {
					exists = event_target:raider_khanate
					has_global_flag = marauder_crisis_started
				}
			}
			clear_global_event_target = raider_khanate

			every_playable_country = {
				limit = { has_country_flag = rebelling_satrapy }
				remove_country_flag = rebelling_satrapy
			}
			if = { limit = { has_country_flag = marauder600_happened }
				remove_country_flag = marauder600_happened
			}
			if = { limit = { has_global_flag = great_khan_dead }
				remove_global_flag = great_khan_dead
			}
		}
		if = { limit = { exists = event_target:marauder_rally_point }
			clear_global_event_target = marauder_rally_point
		}

		set_global_flag = marauder_crisis_started
		set_global_flag = marauder_crisis_ongoing
		save_global_event_target_as = raider_khanate

		if = { limit = { NOT = { exists = event_target:marauder_country_1 } }
			random_country = { limit = { has_country_flag = marauder_1 }
				save_global_event_target_as = marauder_country_1
			}
		}
		if = { limit = { num_marauder_empires_to_spawn > 1 NOT = { exists = event_target:marauder_country_2 } }
			random_country = { limit = { has_country_flag = marauder_2 }
				save_global_event_target_as = marauder_country_2
			}
		}
		if = { limit = { num_marauder_empires_to_spawn > 2 NOT = { exists = event_target:marauder_country_3 } }
			random_country = { limit = { has_country_flag = marauder_3 }
				save_global_event_target_as = marauder_country_3
			}
		}
		# Create global Rally Point event_targets
		country_event = { id = marauder.499 }

		### Rally Point of Fleets 2/3: Set Event Targets, Flags
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
			event_target:CmtTargetMarauderRallyPoint1 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
			event_target:CmtTargetMarauderRallyPoint2 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}
		if = {
			limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
			event_target:CmtTargetMarauderRallyPoint3 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}

		### Unify All Marauders if Great Khan.
		if = {
			limit = {
				event_target:CmtGlobalVar = {
					check_variable = { which = CmtVarKhanMultiple value = 5 }
				}
			}
			save_event_target_as = new_khanate
			every_country = {
				limit = {
					is_country_type = dormant_marauders
					NOT = { is_same_empire = root }
				}
				country_event = { id = marauder.609 } # Fully handover
				destroy_country = yes
			}
		}
		# else = {
		# 	every_country = {
		# 		limit = {
		# 			is_country_type = dormant_marauders
		# 			NOT = { is_same_empire = root }
		# 		}
		# 		establish_communications_no_message = root
		# 		prev = {
		# 			set_faction_hostility = {
		# 				target = prev
		# 				set_hostile = no
		# 				set_neutral = yes
		# 				set_friendly = no
		# 			}
		# 		}
		# 	}
		# }

		### Rally Point of Fleets 3/3: Backup Code
		if = {
			limit = { NOT = { exists = event_target:marauder_rally_point } }
			random_planet_within_border = {
				limit = { is_a_planet = yes }
				save_global_event_target_as = marauder_rally_point
				set_planet_flag = marauder_rally_point
				log = "Backup Code for marauder_rally_point Processed"
			}
		}

		### Only for 2nd awakening.
		if = { limit = { has_origin = "origin_khan_successor" }
			if = { limit = { has_federation = yes }
				leave_alliance = {
					override_requirements = yes
					apply_opinion_penalty = yes
				}
			}
			if = { limit = { is_galactic_community_member = yes }
				remove_from_galactic_community = yes
			}
			if = { limit = { is_subject = yes }
				set_subject_of = { who = none }
			}
			else_if = { limit = { is_overlord = yes }
				every_subject = {
					limit = { NOT = { is_at_war_with = overlord } }
					set_subject_of = {
						who = root
						subject_type = satrapy
					}
					# set_subject_of = { who = none }
				}
			}
		} else = {
			species = {
				modify_species = { add_trait = trait_conformists }
			}
		}
		### Save old values
		create_country = {
			name = root
			name_list = root
			species = root
			type = ruined_marauders
			civics = root
			flag = root
			ethos = root
			ignore_initial_colony_error = yes
			day_zero_contact = no
			exclude_day_zero_contact = root
			effect = {
				save_global_event_target_as = marauder_precursor
			}
		}

		### Modify Country
		set_name = random
		change_country_flag = {
			icon = { category = "pirate" file = "flag_pirate_11.dds" }
			background = { category = "backgrounds" file = "00_solid.dds" }
			colors = { "red" "red" "null" "null" }
		}

		if = {
			limit = { is_pacifist = yes }
			shift_ethic = "ethic_militarist"
		}
		if = {
			limit = { has_ethic = "ethic_xenophobe" }
			country_remove_ethic = "ethic_xenophobe"
		}
		if = {
			limit = { is_spiritualist = no }
			shift_ethic = "ethic_spiritualist"
		}
		if = {
			limit = { is_militarist = no }
			shift_ethic = "ethic_fanatic_militarist"
		}

		if = { ### NSC SUPPORT
			limit = {
				is_ai = no
				host_has_dlc = Apocalypse
				has_global_flag = has_nsc_active
			}
			if = {
				limit = {
					NOT = {
						is_country_type = default
						# any_playable_country = { is_same_empire = root }
					}
				}
				set_country_type = default
			}
			set_origin = "origin_nsc_freebooter"
			change_government = {
				authority = auth_dictatorial
				remove_invalid_civics = yes
			}
			if = { limit = { has_authority = auth_corporate }
				force_add_civic = nsc_freebooter_civic_freebooter_trait_change_corp
			} else = { force_add_civic = nsc_freebooter_civic_freebooter_trait_change }
			# force_add_civic = nsc_freebooter_civic_great_khans_vision later
		} else = {
			set_country_type = awakened_marauders
			change_government = {
				authority = auth_dictatorial
				civics = {
					civic = civic_great_khans_vision
					civic = civic_shared_burden
					# civic = civic_warrior_culture
				}
				remove_invalid_civics = yes
			}
			# force_add_civic = civic_slaver_guilds
			force_add_civic = civic_barbaric_despoilers
			force_add_civic = civic_fanatic_purifiers
		}

		add_resource = {
			energy =	20000
			alloys =	12000
			minerals =	8000
			unity	=	200000
		}

		set_ai_personality = hegemonic_imperialists

		create_ship_design = { design = "NAME_Pirate_Transport" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Clan_Builder" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Outrider" }
		add_ship_design = last_created_design
		if = { # If not dormant origin
			limit = { NOT = { has_existing_ship_design = starbase_marauder } }
			create_ship_design = { design = "NAME_Marauder_Starbase" }
			add_ship_design = last_created_design
		}

		if = {
			limit = { NOT = { has_tradition = tr_harmony_adopt } }
			add_tradition = tr_harmony_adopt
			add_tradition = tr_harmony_the_greater_good
			add_tradition = tr_harmony_mind_and_body
			add_tradition = tr_harmony_kinship
			add_tradition = tr_harmony_utopian_dream
			add_tradition = tr_harmony_harmonious_directives
			add_tradition = tr_harmony_finish
		}

		### Ruler Khan
		if = {
			limit = { NOT = { exists = ruler } }
			create_leader = {
				class = ruler
				species = owner_species
				name = random
				skill = 10
				event_leader = yes
				leader_age_min = 22
				leader_age_max = 40
				traits = {
					trait = leader_trait_ruler_great_khan
					trait = leader_trait_ruler_chosen
					trait = leader_trait_fleet_organizer
					# trait = leader_trait_eager
				}
				# effect = {
				# 	prev = { assign_leader = prev }
				# }
			}
			assign_leader = last_created_leader
		} else_if = { ### NSC SUPPORT
			limit = { has_global_flag = has_nsc_active }
			ruler = { add_ruler_trait = nsc_freebooter_leader_trait_ruler_great_khan }
		} else = {
			ruler = {
				add_ruler_trait = leader_trait_ruler_great_khan
				# add_ruler_trait = leader_trait_ruler_chosen
				# add_trait = leader_trait_eager
				add_skill = 2

			}
		}

		ruler = {
			if = { limit = { NOT = { has_trait = leader_trait_fleet_organizer } }
				add_trait = leader_trait_fleet_organizer
			}
			set_leader_flag = great_khan
			save_global_event_target_as = great_khan_ruler
			recruitable = no
		}

		### Lifespan, Remaining Live of Khan.
		if = {
			limit = {
				event_target:CmtGlobalVar = {
					check_variable = { which = CmtVarKhanLifespan value = 1 }
				}
			}
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_1a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_1a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_1c random = @CmtConstKhanLifespan_1d }
		}
		else_if = {
			limit = {
				event_target:CmtGlobalVar = {
					check_variable = { which = CmtVarKhanLifespan value = 2 }
				}
			}
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_2a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_2a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_2c random = @CmtConstKhanLifespan_2d }
		}
		else_if = {
			limit = {
				event_target:CmtGlobalVar = {
					check_variable = { which = CmtVarKhanLifespan value = 4 }
				}
			}
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_4a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_4a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_4c random = @CmtConstKhanLifespan_4d }
		}
		else_if = {
			limit = {
				event_target:CmtGlobalVar = {
					check_variable = { which = CmtVarKhanLifespan value = 5 }
				}
			}
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_5a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_5a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_5c random = @CmtConstKhanLifespan_5d }
		}
		else_if = {
			limit = {
				event_target:CmtGlobalVar = {
					check_variable = { which = CmtVarKhanLifespan value = 6 }
				}
			}
			set_global_flag = khan_no_die
			set_country_flag = CmtFlagKhanNoDieCountry
		}
		else = {
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_3a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_3a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_3c random = @CmtConstKhanLifespan_3d }
		}
		# Legacy CmtEffectTransferKhanRemainingLive = yes
		event_target:CmtGlobalVar = {
			if = {
				limit = { check_variable = { which = CmtVarKhanResurgence value < -0.5 } }
				root = { set_variable = { which = CmtVarKhanRemainingLive value = -1 } }
			} else = {
				root = { set_variable = { which = CmtVarKhanRemainingLive value = prev.CmtVarKhanResurgence } }
			}
		}

		### Admiral Khan
		if = { limit = { is_ai = yes }
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 10
				event_leader = yes
				traits = {
					trait = leader_trait_great_khan
					trait = leader_trait_admiral_chosen
					# trait = leader_trait_eager
				}
				# effect = {
				# 	set_leader_flag = great_khan
				# 	save_global_event_target_as = great_khan
				# 	recruitable = no
				# }
			}
		} else_if = { ### NSC SUPPORT
			limit = { has_global_flag = has_nsc_active }
			clone_leader = {
				target = ruler
				class = admiral
				traits = { trait = nsc_freebooter_admiral_trait_great_khan }
				skill = 7
			}
		} else = {
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 6
				event_leader = yes
				traits = {
					trait = leader_trait_great_khan
					# trait = leader_trait_admiral_chosen
					trait = leader_trait_fleet_organizer
					# trait = leader_trait_eager
				}
				# effect = {
				# 	set_leader_flag = great_khan
				# 	save_global_event_target_as = great_khan
				# 	recruitable = no
				# }
			}
		}
		last_created_leader = {
			if = { limit = { NOT = { has_trait = leader_trait_fleet_logistician } }
				add_trait = leader_trait_fleet_logistician
			}
			set_leader_flag = great_khan
			save_global_event_target_as = great_khan
			recruitable = no
		}

		### Create Fleets
		event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_Khan1stFleet = yes }
		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } } }
			every_planet_within_border = {
				limit = { has_planet_flag = CmtFlagMarauderExpRallyPoint }
				CmtEffectCreateAdmiralty_KhanStarterPack = yes
			}
		} else = {
			event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanStarterPack = yes }
		}
		### Compat. replace hack for CM.
		event_target:great_khan.fleet = {
			create_ship = {
				design = "NAME_JuukTidir"
				graphical_culture = "npf_01_dirty"
				prefix = no
				# upgradable = no
			}
			random_owned_ship = {
				limit = { is_ship_size = marauder_galleon }
				delete_ship = this
			}
		}
		country_event = { id = marauder.520 days = 210 }	## Reinforcement cycle
		event_target:CmtGlobalVar = { set_variable = { which = CmtVarKhanReinforcementCounter value = 10 } }

		if = {
			limit = { is_ai = yes }
			country_event = { id = marauder.78 days = 20 }		## Mercenaries Join

			### Should not attack: the Khan is not that bad!
			every_country = {
				limit = {
					CmtTriggerIsPlayableEmpire = no
					OR = {
						is_country_type = fallen_empire # is_fallen_empire = yes
						is_country_type = enclave
						is_country_type = caravaneer_home
						is_country_type = caravaneer_fleet
						is_country_type = guardian_sphere
						is_country_type = marauder_raiders
						is_country_type = ratlings
						is_country_type = ldragon_country
						is_tiyanki_country_type = yes
						is_amoeba_country_type = yes
						is_crystal_country_type = yes
						is_drone_country_type = yes
						is_country_type = vluur
						is_primitive = yes
					}
					OR = {
						is_hostile = prev
						prev = { is_hostile = prev }
						# prev = { NOT = { is_neutral_to = prev } }
					}
					# prev = { NOR = { is_friendly_to = prev is_neutral_to = prev } }
				}
				establish_communications_no_message = root
				prev = {
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = yes
						# set_friendly = no
					}
				}
			}
		}

		### Notifications
		if = {
			limit = { has_country_flag = CmtFlagKhanVengeanceCountry }
			every_playable_country = {
				# limit = { CmtTriggerIsPlayableEmpire = yes }
				establish_communications_no_message = root
				country_event = { id = marauder.526 }
				observer_event = { id = observer.18 }
			}
		} else = {
			every_playable_country = {
				# limit = { CmtTriggerIsPlayableEmpire = yes }
				establish_communications_no_message = root
				country_event = { id = marauder.501 }
				observer_event = { id = observer.13 }
			}
		}
		# every_country = {
		# 	limit = {
		# 		is_ai = yes
		# 		CmtTriggerIsPlayableEmpire = yes # is_country_type_with_subjects = yes
		# 	}
		# 	establish_communications_no_message = root
		# }

		### Mercenaries Defect
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_1
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint1.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint1.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder1 = yes }
				set_country_flag = CmtFlagHiringMarauder1
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_2
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint2.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint2.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder2 = yes }
				set_country_flag = CmtFlagHiringMarauder2
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_3
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint3.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint3.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder3 = yes }
				set_country_flag = CmtFlagHiringMarauder3
			}
		}
		every_playable_country = {
			limit = {
				OR = {
					has_country_flag = CmtFlagHiringMarauder1
					has_country_flag = CmtFlagHiringMarauder2
					has_country_flag = CmtFlagHiringMarauder3
				}
			}
			country_event = { id = marauder.77 days = 20 }
		}

		# random_neighbor_country = {
		# 	limit = {
		# 		CmtTriggerIsPlayableEmpire = yes
		# 		NOR = {
		# 			is_at_war_with = prev # Is needed for some kind of alliance.
		# 			is_same_empire = prev
		# 		}
		# 	}
		# 	# set_faction_hostility = {
		# 	# 	target = root
		# 	# 	set_hostile = yes
		# 	# }
		# 	root = {
		# 		declare_war = {
		# 			target = prev
		# 			name = "NAME_Expansion"
		# 			attacker_war_goal = "wg_great_expansion"
		# 		}
		# 		# set_faction_hostility = {
		# 		# 	target = prev
		# 		# 	set_hostile = yes
		# 		# }
		# 		add_opinion_modifier = {
		# 			modifier = opinion_first_contact_war
		# 			who = prev
		# 		}
		# 	}
		# 	if = {
		# 		limit = { has_origin = "origin_khan_successor" }
		# 		change_variable = { which = "planets_lost_to_marauder" value = 3 }
		# 	}
		# }
		# country_event = { id = khan.529 days = 360 } # Drums of War init
	}
}

############################
### Standard War Process ###
############################

### Horde Conquers Planet
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
country_event = {
	id = marauder.503
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		exists = from
		OR = {
			CmtTriggerIsKhanCountry = yes
			AND = { # Khan Subject
				is_subject_of_khan = yes
				NOT = { has_country_flag = rebellion_cooldown }
				exists = from
				from = {
					is_subject_of_khan = no
					NOT = { is_country_type = awakened_marauders }
				}
			}
		}
		from = { CmtTriggerIsPlayableEmpire = yes }
	}

	immediate = {
		fromfrom = {
			if = {
				limit = { num_pops > 20 }
				prev.from = { change_variable = { which = "planets_lost_to_marauder" value = 1 } }
				while = {
					count = 6
					limit = { num_pops > 20 }
					random_owned_pop = {
						limit = {
							is_robot_pop = no
							is_sapient = yes
						}
						weights = {
							base = 3
							modifier = { add = 1 OR = { is_pop_category = slave is_pop_category = purge } }
							modifier = { add = 1 is_unemployed = yes }
							modifier = { add = 1 NOT = { ideal_planet_class = prev } }
							modifier = { add = 2 NOT = { is_same_species = root.species } }
							# modifier = { add = 1 prev = { count_owned_pop = { limit = { is_same_species = prevprev.species } count < 4 } } }
						}
						kill_pop = yes
					}
				}
			}

			### Create Marauder Pops
			save_event_target_as = conquered_planet
			planet_event = { id = marauder.105 } # (Slaves)
			set_owner = root
			set_controller = root

			set_variable = { which = CmtVarTemp value = 4 }
			if = {
				limit = { free_housing < 2 }
				change_variable = { which = CmtVarTemp value = 4 }
			} else_if = {
				limit = { free_housing < 6 free_housing > 1 }
				change_variable = { which = CmtVarTemp value = 8 }
			} else_if = {
				limit = { free_housing > 5 }
				change_variable = { which = CmtVarTemp value = 12 }
			}

			set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
			divide_variable = { which = CmtVarTemp4 value = 4 }
			if = {
				limit = { exists = event_target:marauder_country_1 }
				while = {
					limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
					create_pop = { species = event_target:marauder_country_1.owner_species }
					change_variable = { which = CmtVarTemp4 value = -1 }
					change_variable = { which = CmtVarTemp value = -1 }
				}
			}
			set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
			divide_variable = { which = CmtVarTemp4 value = 3 }
			if = {
				limit = { exists = event_target:marauder_country_2 }
				while = {
					limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
					create_pop = { species = event_target:marauder_country_2.owner_species }
					change_variable = { which = CmtVarTemp4 value = -1 }
					change_variable = { which = CmtVarTemp value = -1 }
				}
			}
			set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
			divide_variable = { which = CmtVarTemp4 value = 2 }
			if = {
				limit = { exists = event_target:marauder_country_3 }
				while = {
					limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
					create_pop = { species = event_target:marauder_country_3.owner_species }
					change_variable = { which = CmtVarTemp4 value = -1 }
					change_variable = { which = CmtVarTemp value = -1 }
				}
			}
			while = { # rest
				limit = { check_variable = { which = CmtVarTemp value > 0.5 } }
				create_pop = { species =		root }
				change_variable = { which = CmtVarTemp value = -1 }
			}

			# Flip Starbase ownership or create a new one.
			solar_system = {
				if = {
					limit = {
						exists = starbase
						starbase = { fleet = { NOT = { is_owned_by = root } } }
					}
					starbase = { set_owner = root }
					# FIXME: needs possible workaround? As starbase from horde gets not conquered? See Fix id = khan.304-305
				} else = {
					create_starbase = {
						size = "starbase_marauder"
						owner = root
					}
				}
			}
		}
		from = {
			change_variable = { which = "planets_lost_to_marauder" value = 1 }
			if = { limit = { prev = { can_copy_random_tech_from = { who = prev } } }
				prev = { copy_random_tech_from = { who = prev } }
			}
			if = {
				limit = { fromfrom.solar_system = { is_capital_system = yes } }
				change_variable = { which = "planets_lost_to_marauder" value = 1 }
				if = { limit = { prev = { can_copy_random_tech_from = { who = prev } } }
					prev = { copy_random_tech_from = { who = prev } }
				}
				if = {
					limit = { fromfrom = { is_capital = yes } }
					change_variable = { which = "planets_lost_to_marauder" value = 3 }
					if = { limit = { prev = { can_copy_random_tech_from = { who = prev } } }
						prev = { copy_random_tech_from = { who = prev } }
					}
				}
			}
			if = {
				limit = { NOT = { has_active_event = { marauder.504 } } }
				country_event = { id = marauder.504 days = 1 } # Notify + Hack
			}
			set_country_flag = former_owner@fromfrom
		}
		fromfrom = {
			### Create Defense Armies (for some reason they get deleted)
			set_variable = { which = CmtVarTemp value = 8 }
			if = {
				limit = { exists = event_target:marauder_country_1 }
				while = {
					count = 2
					create_army = {
						name = random
						owner = root
						species = event_target:marauder_country_1.owner_species
						type = "occupation_army" # "defense_army"
					}
					change_variable = { which = CmtVarTemp value = -1 }
				}
			}
			if = {
				limit = { exists = event_target:marauder_country_2 }
				while = {
					count = 2
					create_army = {
						name = random
						owner = root
						species = event_target:marauder_country_2.owner_species
						type = "occupation_army" # "defense_army"
					}
					change_variable = { which = CmtVarTemp value = -1 }
				}
			}
			if = {
				limit = { exists = event_target:marauder_country_3 }
				while = {
					count = 2
					create_army = {
						name = random
						owner = root
						species = event_target:marauder_country_3.owner_species
						type = "occupation_army" # "defense_army"
					}
					change_variable = { which = CmtVarTemp value = -1 }
				}
			}
			while = { # rest
				limit = { check_variable = { which = CmtVarTemp value > 0.5 } }
				create_army = {
					name = random
					owner = root
					species = root.species
					type = "occupation_army" # "defense_army"
				}
				change_variable = { which = CmtVarTemp value = -1 }
			}

			clear_variable = CmtVarTemp
			clear_variable = CmtVarTemp4

			if = {
				limit = {
					NOR = {
						# has_building = building_colony_shelter
						has_building = building_capital
						has_building = building_major_capital
						has_building = building_system_capital
						has_building = building_imperial_capital
						# building_hive_major_capital
						# building_machine_major_capital
						has_building = building_resort_major_capital
						has_building = building_slave_major_capital
						# building_ancient_control_center
						# building_ancient_palace
					}
				}
				add_building = building_capital
			}
		}
	}
}

# Horde Conquers Planet
country_event = {
	id = marauder.504
	title = "marauder.504.name"
	desc = "marauder.504.desc"
	picture = GFX_evt_ground_combat
	show_sound = event_ground_battle
	is_triggered_only = yes
	location = event_target:conquered_planet
	immediate = {
		hidden_effect = {
			event_target:conquered_planet = {
				set_owner = from
				while = {
					count = trigger:num_armies
					create_army = {
						name = random
						owner = from
						species = prev
						type = "defense_army"
					}
				}
			}
		}
	}
	option = { name = marauder.504.a }
}

#######################
###- Death of Khan -###
#######################

### Khan defeated in Combat (on_ship_destroyed_victim)
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
country_event = {
	id = marauder.505
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		CmtTriggerIsKhanCountry = yes
		fromfrom = {
			exists = leader
			leader = { has_leader_flag = great_khan }
			NAND = {
				exists = fleet
				fleet = { num_ships > 0 }
			}
		}
	}

	immediate = {
		set_global_flag = great_khan_dead
		# set_global_flag not needed
		change_variable = { which = CmtVarKhanRemainingLive value = -1 } ## Not CmtGlobalVar

		if = {
			limit = { exists = from }
			from = {
				save_event_target_as = khan_destroyer
				change_variable = { which = "planets_lost_to_marauder" value = -5 }
			}
		}

		if = { # 505 but NOT die.
			limit = {
				check_variable = { which = CmtVarKhanRemainingLive value > -1.5 }	## Not CmtGlobalVar
				NAND = {
					has_country_flag = great_khan_defeated_once # CmtFlagKhanDefeatCountry
					check_variable = { which = CmtVarKhanRemainingLive value < 0 } ## Not CmtGlobalVar
				}
			}
			set_country_flag = great_khan_defeated_once # CmtFlagKhanDefeatCountry
			fromfrom = {
				solar_system = { save_event_target_as = khan_death_system }
				leader = {
					save_event_target_as = great_khan
					exile_leader_as = exiled_khan
				}
			}
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = marauder.506 } # Notify
			}
			observer_event = { id = observer.14 }

			if = { limit = { has_global_flag = CmtFlagDebugMode }
				country_event = { id = marauder.523 days = 5 }
			} else = {
				event_target:global_event_country = {
					country_event = { id = marauder.523 days = 210 random = 160 }
				}
			}
			# Back to the fold
			every_owned_fleet = {
				limit = {
					exists = solar_system
					# NOR = { is_ship_class = shipclass_starbase is_ship_class = shipclass_military_station is_ship_class = shipclass_transport }
					# is_civilian = no
					is_mobile = yes
					any_owned_ship = {
						OR = {
							is_ship_class = shipclass_military
							is_ship_class = shipclass_transport
						}
					}
					NOT = { is_within_borders_of = root.owner }
				}
				fleet_event = { id = khan.611 days = -1 }
			}
		} else = { # Khan dies (former .509)
			set_country_flag = khan_dead_event_fine
			set_country_flag = great_khan_defeated_once # CmtFlagKhanDefeatCountry
			if = {
				limit = { exists = event_target:great_khan_ruler }
				event_target:great_khan_ruler = { kill_leader = { show_notification = no } }
			}
			if = {
				limit = { exists = event_target:great_khan }
				event_target:great_khan = { kill_leader = { show_notification = no } }
			}

			event_target:khan_destroyer = {
				# save_event_target_as = khan_destroyer
				set_country_flag = no_khan_do
				if = { limit = { CmtTriggerIsPlayableEmpire = yes } # is_ai = no
					country_event = { id = marauder.710 days = 7 } # Max days = 8
					if = {
						limit = { root = { has_relic = r_khans_throne } }
						root = { remove_relic = r_khans_throne }
					}
					if = {
						limit = { can_copy_random_tech_from = { who = root } }
						copy_random_tech_from = { who = root }
					}
					if = {
						limit = { root = { num_owned_relics > 0 } }
						steal_relic = { target = root relic = random }
					}
				}
			}
			fromfrom = { solar_system = { save_event_target_as = khan_death_system } }
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = marauder.510 } # Notify
			}
			observer_event = { id = observer.16 }
			if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
			} else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
			} else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
			} else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
			} else_if = {
				limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
				country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
			} else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
		}
	}
}

# Great Khan Defeated First Time.
country_event = {
	id = marauder.506
	title = "marauder.506.name"
	desc = "marauder.506.desc"
	picture = GFX_evt_sabotaged_ship
	show_sound = event_ship_explosion
	is_triggered_only = yes
	location = event_target:khan_death_system
	option = { name = marauder.506.a }
}

### Return of Khan
country_event = {
	id = marauder.507
	hide_window = yes
	is_triggered_only = yes
	trigger = { has_global_flag = great_khan_dead }
	immediate = {
		remove_global_flag = great_khan_dead
		country_event = { id = khan.306 } # Check/Create fallback rally_point
		event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_Khan2ndFleetSet = yes }

		if = {
			limit = { NOT = { exists = event_target:great_khan.fleet } }
			last_created_fleet = { assign_leader = event_target:great_khan }
		}
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.508 } # Notify
		}
		observer_event = { id = observer.15 }

		### Compat. hack for CM
		event_target:great_khan.fleet = {
			create_ship = {
				# name = "NAME_Glorious_Might"
				design = "NAME_Glorious_Might"
				graphical_culture = "npf_01_dirty"
				prefix = no
				upgradable = yes
			}
		}
	}
}

# Return of the Great Khan.
country_event = {
	id = marauder.508
	title = "greatkhan_diplo_header"
	desc = {
		trigger = {
			OR = {
				is_subject_type = satrapy
				has_country_flag = rebelling_satrapy
			}
		}
		text = "marauder.508.desc.1"
	}
	desc = {
		trigger = {
			NOR = {
				is_subject_type = satrapy
				has_country_flag = rebelling_satrapy
				is_homicidal = yes
			}
		}
		text = "marauder.508.desc.2"
	}
	desc = {
		trigger = { is_homicidal = yes }
		text = "marauder.508.desc.3"
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:raider_khanate
		room = "ethic_spaceship_room"
	}
	location = event_target:marauder_rally_point
	is_triggered_only = yes
	option = { name = marauder.508.a }
}

## DEPRECATED - now .505
### Khan Defeated in Combat and die.
country_event = {
	id = marauder.509
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		always = no
		# has_global_flag = marauder_crisis_ongoing
		# exists = event_target:raider_khanate
		# CmtTriggerIsKhanCountry = yes
		# fromfrom = {
		# 	exists = leader
		# 	leader = { has_leader_flag = great_khan }
		# 	fleet = { num_ships < 1 }
		# }
		OR = {
			check_variable = { which = CmtVarKhanRemainingLive value < 0 }	## Not CmtGlobalVar
			AND = {
				has_country_flag = great_khan_defeated_once # CmtFlagKhanDefeatCountry
				check_variable = { which = CmtVarKhanRemainingLive value < 1 }	## Not CmtGlobalVar
			}
		}
	}

	immediate = {
		# set_global_flag = great_khan_dead
	}
}

# Great Khan Dies (Notify)
country_event = {
	id = marauder.510
	title = "marauder.510.name"
	desc = "marauder.510.desc"
	picture = GFX_evt_space_funeral
	show_sound = event_airlock
	is_triggered_only = yes
	location = event_target:khan_death_system
	# immediate = {}
	### Become the Khan Crisis
	option = {
		name = great_khan_wins_response
		custom_tooltip = khan.710.a.tooltip
		trigger = {
			hidden_trigger = {
				exists = event_target:raider_khanate
				exists = event_target:khan_destroyer
				has_country_flag = no_khan_do
				host_has_dlc = Apocalypse
				is_ai = no
				is_same_empire = event_target:khan_destroyer
				event_target:raider_khanate = { is_ai = yes }
			}
			is_robot_empire = no
			# has_federation = no
			# is_galactic_emperor = no
			has_been_declared_crisis = no
			is_gestalt = no
			OR = {
				is_militarist = yes
				is_authoritarian = yes
				has_ethic = "ethic_fanatic_spiritualist"
			}
		}
		# TODO if Multiplayer redundant to crisis.4099
		# every_playable_country = {
		# 	limit = { is_ai = no }
		# 	country_event = { id = khan. } # Notify about the new Khan.
		# }
		hidden_effect = {
			### Save old values
			create_country = {
				name = root
				name_list = root
				species = root
				type = ruined_marauders
				civics = root
				flag = root
				ethos = root
				ignore_initial_colony_error = yes
				day_zero_contact = no
				exclude_day_zero_contact = root
				effect = {
					save_global_event_target_as = marauder_precursor
				}
			}

			save_event_target_as = new_khanate
			remove_global_flag = marauder_crisis_ongoing
			remove_global_flag = great_khan_wins
			set_global_flag = khan_no_die # TODO immortal? otherwise needs set_player somewhere
			set_country_flag = CmtFlagKhanNoDieCountry
			set_country_flag = declared_crisis
			country_event = { id = crisis.4099 days = 9 }
			set_country_type = dormant_marauders # Hack for trigger?
			set_country_flag = new_khanate_flag
			set_origin = "origin_khan_successor"
			event_target:raider_khanate = {
				every_subject = {
					limit = { has_modifier = "satrapy_of_horde" }
					country_event = { id = marauder.671 } # Do it immediately as raider_khanate should exists.
					set_subject_of = { who = none }
					remove_modifier = "satrapy_of_horde"
				}
				# Inheritance old flag
				switch = {
					trigger = has_country_flag
					marauder_1 = {
						prev = { set_country_flag = marauder_1 save_global_event_target_as = marauder_country_1 }
					}
					marauder_2 = {
						prev = { set_country_flag = marauder_2 save_global_event_target_as = marauder_country_2 }
					}
					marauder_3 = {
						prev = { set_country_flag = marauder_3 save_global_event_target_as = marauder_country_3 }
					}
				}
				if = { ### NSC SUPPORT
					limit = {
						has_global_flag = has_nsc_active
						exists = capital_scope
					}
					capital_scope = { origin_nsc_freebooter_start_setup = yes }
				}

				country_event = { id = marauder.609 } # Fully handover?
				# set_country_type = dormant_marauders
				destroy_country = yes
			}
			if = { # (as we could decline?)
				limit = { NOT = { has_relic = r_khans_throne } }
				add_relic = r_khans_throne
			}
			country_event = { id = marauder.500 days = 3 }
		}
		ai_chance = { factor = 0 }
	}
	option = {
		# name = great_khan_integrate_response # "This isn't good..."
		name = marauder.510.a
		custom_tooltip = marauder.122.a # "good job"
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:raider_khanate
					exists = event_target:khan_destroyer
					has_country_flag = no_khan_do
					is_robot_empire = no
					has_been_declared_crisis = no
					is_gestalt = no
				}
				add_resource = { influence = 100 }
			}
		}
	}
}

### Sudden Death of Khan (on_monthly_pulse)
# Great Khan dies for other reasons.
event = {
	id = marauder.511
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		NOR = {
			has_global_flag = khan_no_die
			has_global_flag = great_khan_dead
		}
		exists = event_target:raider_khanate
		event_target:raider_khanate = {
			NOR = {
				has_country_flag = CmtFlagKhanNoDieCountry
				has_country_flag = khan_dead_event_fine
			}
		}
	}
	immediate = {
		if = {
			limit = {
				exists = event_target:great_khan
				NAND = {
					exists = event_target:great_khan.fleet
					event_target:great_khan.fleet = { num_ships > 0 }
				}
			}
			if = { # Put him on a fleet.
				limit = {
					event_target:raider_khanate = {
						any_owned_fleet = {
							exists = solar_system
							is_mobile = yes
							is_in_combat = no
							NOR = {
								exists = leader
								has_fleet_flag = satrapy_garrison_fleet
							}
							fleet_power > 20000
						}
					}
				}
				event_target:raider_khanate = {
					# Assign the strongest fleet
					ordered_owned_fleet = {
						limit = {
							exists = solar_system
							is_mobile = yes
							is_in_combat = no
							NOR = {
								exists = leader
								has_fleet_flag = satrapy_garrison_fleet
							}
							fleet_power > 20000
						}
						position = 0
						order_by = trigger:fleet_power
						assign_leader = event_target:great_khan
					}
				}
			} else = {
				event_target:marauder_rally_point = {
					if = { limit = { exists = event_target:great_khan }
						CmtEffectCreateAdmiralty_Khan1stFleet = yes
					} else = { # try take exiled - not always work
						event_target:raider_khanate = { CmtEffectCreateFleet_Khan2ndFleet = yes }
					}
				}
			}
		}
		if = {
			limit = {
				NAND = {
					exists = event_target:great_khan
					exists = event_target:great_khan.fleet
					# exists = exiled_khan
				}
			}
			event_target:raider_khanate = { country_event = { id = marauder.512 } }
			# event_target:CmtGlobalVar = { set_variable = { which = CmtVarKhanLifespan value = 1 } }
			break = yes
		}

		# every_country = { currently only one Khan
			# limit = {
			# 	CmtTriggerIsKhanCountry = yes
			# 	NOT = { has_country_flag = CmtFlagKhanNoDieCountry }
			# }
		event_target:CmtGlobalVar = {
			random_list = {
				2 = {
					event_target:raider_khanate = { country_event = { id = marauder.512 } }
					modifier = {
						factor = 0
						check_variable = { which = CmtVarKhanLifespan value = 6 }
					}
				}
				98 = {
					modifier = {
						factor = @CmtConstKhanLifespan_1b
						check_variable = { which = CmtVarKhanLifespan value = 1 }
					}
					modifier = {
						factor = @CmtConstKhanLifespan_2b
						check_variable = { which = CmtVarKhanLifespan value = 2 }
					}
					modifier = {
						factor = @CmtConstKhanLifespan_3b
						check_variable = { which = CmtVarKhanLifespan value = 3 }
					}
					modifier = {
						factor = @CmtConstKhanLifespan_4b
						check_variable = { which = CmtVarKhanLifespan value = 4 }
					}
					modifier = {
						factor = @CmtConstKhanLifespan_5b
						check_variable = { which = CmtVarKhanLifespan value = 5 }
					}
				}
			}
		}
	}
}

### Great Khan Dies for Other Reasons.
country_event = {
	id = marauder.512
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		random_list = {
			10 = { set_country_flag = khan_dead_poison }
			10 = { set_country_flag = khan_dead_disease }
			10 = { set_country_flag = khan_dead_assassin }
			10 = { set_country_flag = khan_dead_concubine }
		}

		if = {
			limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = { kill_leader = { show_notification = no } }
		}
		if = {
			limit = { exists = event_target:great_khan }
			event_target:great_khan = { kill_leader = { show_notification = no } }
		}

		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		observer_event = { id = observer.17 }
		if = { limit = { NOT = { has_relic = r_khans_throne } }
			add_relic = r_khans_throne
		}

		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		} else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

### Great Khan Dies (Notify)
country_event = {
	id = marauder.513
	title = "marauder.510.name"
	desc = {
		text = marauder.513.a.desc
		trigger = { from = { has_country_flag = khan_dead_poison } }
	}
	desc = {
		text = marauder.513.b.desc
		trigger = { from = { has_country_flag = khan_dead_disease } }
	}
	desc = {
		text = marauder.513.c.desc
		trigger = { from = { has_country_flag = khan_dead_assassin } }
	}
	desc = {
		text = marauder.513.d.desc
		trigger = { from = { has_country_flag = khan_dead_concubine } }
	}
	desc = {
		text = marauder.513.e.desc
		trigger = { from = { has_country_flag = khan_dead_age } }
	}
	picture = GFX_evt_space_funeral
	show_sound = event_life_support_fail

	is_triggered_only = yes

	option = { name = marauder.510.a }
}

### Great Khan Dies of Old Ages.
country_event = {
	id = marauder.514
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		CmtTriggerIsKhanCountry = yes
		NOT = { has_country_flag = khan_dead_age }
	}
	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		set_country_flag = khan_dead_age

		if = { limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = {
				remove_leader_flag = great_khan # Because possible loop trigger?
				kill_leader = { show_notification = no }
			}
		}
		if = { limit = { exists = event_target:great_khan }
			event_target:great_khan = {
				remove_leader_flag = great_khan # Because possible loop trigger?
				kill_leader = { show_notification = no }
			}
		}

		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		observer_event = { id = observer.17 }
		if = { limit = { NOT = { has_relic = r_khans_throne } }
			add_relic = r_khans_throne
		}
		if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		} else_if = {
			limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		} else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

### Marauder Reinforcement Cycle at Capital (Regular)
# Need a flag to determine if the Horde has a Machinesmith (Improved)
# This = Marauder
country_event = {
	id = marauder.520
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		CmtTriggerIsKhanCountry = yes
		NOT = { has_global_flag = great_khan_wins }
		# NOT = { has_country_flag = has_machinesmith }
	}
	immediate = {
		country_event = { id = khan.306 } # Check/Create fallback rally_point
		if = {
			limit = { exists = event_target:marauder_rally_point }
			### Khan Expanded
			if = {
				limit = { NOT = { has_country_flag = KhanReinforcement_Cycle } }
				country_event = { id = khan.299 } # End check
				set_country_flag = KhanReinforcement_Cycle
			} else = { remove_country_flag = KhanReinforcement_Cycle }

			if = {
				limit = { fleet_power < 250000 has_country_flag = has_machinesmith }
				create_marauder_constructors = yes
				if = {
					limit = { num_armies < 40 }
					create_marauder_armies = yes
				}
				event_target:marauder_rally_point = {
					create_fleet = {
						effect = {
							set_owner = root
							create_dyn_marauder_fleet = { OUTRIDER = 20 LANCER = 10 CHAMPION = 6 VARIANT = "_4" }
							set_location = {
								target = prev
								distance = 20
								angle = random
							}
							set_aggro_range = 500
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
						}
					}
				}

				random_subject = {
					limit = {
						is_subject_type = machinesmith
						NOT = { has_country_flag = rebelling_satrapy }
					}
					root = {
						if = {
							limit = { can_copy_random_tech_from = { who = prev } }
							copy_random_tech_from = { who = prev }
						}
					}
					log = "machinesmith sold"
					country_event = { id = marauder.520 days = 360 } # Improved cycle
					break = yes
				}
				remove_country_flag = has_machinesmith # Regular cycle
				country_event = { id = marauder.520 days = 330 }
			}
			else = {
				event_target:CmtGlobalVar = {
					if = {
						limit = {
							OR = {
								check_variable = { which = CmtVarReinforceCycle_Khan value < 2 }
								check_variable = { which = CmtVarReinforceCycle_Khan value > 4 }
							}
						}
						CmtEffectKhanReinforceOnCapital = yes
						root = {
							remove_country_flag = KhanReinforcement_Cycle
							country_event = { id = marauder.520 days = 340 }
						}
					} else = {
						if = {
							limit = { check_variable = { which = CmtVarKhanReinforcementCounter value > 9.5 } }
							CmtEffectKhanReinforceOnCapital = yes
							change_variable = { which = CmtVarKhanReinforcementCounter value = -10 }
						} # else = { root = { set_country_flag = KhanReinforcement_Cycle } }
						CmtEffectKhanIncreasementReinforcementCycle = yes ## required: prev = root
						root = { # TODO: days somehow dyn.
							country_event = { id = marauder.520 days = 100 }
						}
					}
				}
				# Legacy
				# create_marauder_constructors = yes
				# if = { limit = { num_armies < 40 }
				# 	create_marauder_armies = yes
				# }
				# if = { limit = { fleet_power < 200000 }
				# 	create_marauder_fleet = yes
				# }
				# country_event = { id = marauder.520 days = 340 }

				# Try to expand the war?
				# TODO?
				# country_event = { id = khan.529 }
			}
		} else = {
			country_event = { id = marauder.520 days = 210 }
		}
	}
}

# Return of the Great Khan (HIDDEN)
country_event = {
	id = marauder.523
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = { exists = from }
			from = {
				country_event = { id = marauder.507 }
			}
		}
		else = {
			every_playable_country = {
				# limit = { CmtTriggerIsPlayableEmpire = yes }
				country_event = { id = marauder.524 }
			}
		}
	}
}

# Great Khan Dies
country_event = {
	id = marauder.524
	title = "marauder.524.name"
	desc = {
		text = marauder.524.a.desc
		trigger = {
			NAND = {
				exists = event_target:khan_destroyer
				is_same_empire = event_target:khan_destroyer
			}
		}
	}
	desc = {
		text = marauder.524.b.desc
		trigger = {
			exists = event_target:khan_destroyer
			is_same_empire = event_target:khan_destroyer
		}
	}
	picture = GFX_evt_space_funeral
	show_sound = event_airlock
	is_triggered_only = yes
	option = {
		name = marauder.524.a
		trigger = {
			NAND = {
				exists = event_target:khan_destroyer
				is_same_empire = event_target:khan_destroyer
			}
		}
	}
	option = {
		name = marauder.524.b
		trigger = {
			exists = event_target:khan_destroyer
			is_same_empire = event_target:khan_destroyer
			NOT = { has_relic = r_khans_throne }
		}
		add_relic = r_khans_throne
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:great_khan
					event_target:great_khan = { has_relic = r_khans_throne }
				}
				event_target:great_khan = { remove_relic = r_khans_throne }
			}
		}
	}
}

#########################################################
### Awakening for Vengeance: on_ship_destroyed_victim ###
#########################################################

# Horde Triggered Through Destruction of Stations.
country_event = {
	id = marauder.525
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = marauder_crisis_ongoing }
		is_country_type = dormant_marauders
		end_game_years_passed < event_target:CmtGlobalVar.CmtVarKhanLatestEgpy
		fromfrom = {
			exists = solar_system
			solar_system = {
				has_star_flag = marauder_system
			}
			OR = {
				is_ship_size = marauder_void_dwelling
				is_ship_size = starbase_marauder
			}
		}
		from = { CmtTriggerIsPlayableEmpire = yes } # There are some unpredictable possiblities.
		event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value != 1 } }
		OR = {
			count_owned_ship = {
				limit = { is_ship_size = marauder_void_dwelling }
				count > 1
			}
			AND = {
				event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 5 } }
				count_owned_ship = {
					limit = { is_ship_size = marauder_void_dwelling }
					count > 0
				}
			}
		}
		CmtTriggerKhanAwakingMultipleCheck = yes
	}

	immediate = {
		from = { save_event_target_as = awakened_horde }
		# Since 3.0: reduce possibility if too early and scale with CmtVarKhanEarliestMgpy
		set_variable = { which = CmtVarKhanProbability value = trigger:years_passed }
		# if = {
		# 	limit = { mid_game_years_passed < event_target:CmtGlobalVar.CmtVarKhanEarliestMgpy } else more possible
		# factor = 2*curY/mgY-1
		if = {
			limit = { NOT = { is_variable_set = CmtVarHalfMidgame } }
			get_galaxy_setup_value = { which = CmtVarHalfMidgame setting = mid_game_year }
			change_variable = { which = CmtVarHalfMidgame value = event_target:CmtGlobalVar.CmtVarKhanEarliestMgpy }
			divide_variable = { which = CmtVarHalfMidgame value = 2 }
		}
		divide_variable = { which = CmtVarKhanProbability value = CmtVarHalfMidgame }
		subtract_variable = { which = CmtVarKhanProbability value = 1 }
		# }

		random_list = {
			2 = {
				modifier = {		## 9.9%
					factor = 5.5
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 3 } }
				}
				modifier = {		## 28.6%
					factor = 20
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 4 } }
				}
				modifier = {
					factor = CmtVarKhanProbability
					check_variable = { which = CmtVarKhanProbability value < 0 }
				}
				set_global_flag = horde_triggered
				set_country_flag = CmtFlagKhanVengeanceCountry
				country_event = { id = marauder.500 }
			}
			100 = {
				modifier = {
					factor = 0
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 5 } }
				}
				fromfromfrom.solar_system = {
					system_event = { id = marauder.17 days = 360 } # rebuild marauder starbase
				}
			}
		}
	}
}

### Horde Clearing System (for evaluation marauder.555)
# This = starbase being destroyed
# From = fleet that destroyed the starbase
starbase_event = {
	id = marauder.527
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		exists = from
		exists = owner
		has_starbase_size > starbase_outpost
		owner = { CmtTriggerIsPlayableEmpire = yes }
		from.owner = {
			OR = {
				CmtTriggerIsKhanCountry = yes
				AND = { # Khan Subject
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebellion_cooldown }
					exists = from
					from = { is_subject_of_khan = no }
				}
			}
		}
	}

	immediate = {
		## Change loss by value
		# if = { limit = { has_starbase_size > starbase_outpost }
		owner = {
			change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
			if = {
				limit = { prev = { has_starbase_size > starbase_starport } }
				change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
				if = {
					limit = {
						prev = {
							OR = {
								solar_system = { is_capital_system = yes }
								has_starbase_size > starbase_starhold
							}
						}
					}
					change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
					save_event_target_as = former_starbase_owner
					# prev = { works but gets destroyed anyway
					# 	set_owner = from.owner
					# 	fleet = {
					# 		every_owned_ship = {
					# 			repair_percentage = 0.1 set_disabled = no
					# 		}
					# 	}
					# }
					prev.solar_system = {
						if = { # Not Dead End Systems
							limit = {
								OR = {
									count_neighbor_system = { count > 1 }
									count_system_planet = { count > 0 limit = { is_colonizable = yes } }
								}
							}
							# Flip Starbase ownership (create new one)
							system_event = { id = khan.310 days = 1 }
						}
					}
					if = {
						limit = { prev = { has_starbase_size > starbase_starfortress } }
						change_variable = { which = "planets_lost_to_marauder" value = 0.2 }
						# log = "starbase_citadel lost_to_marauder"
						from = { set_timed_fleet_flag = { flag = starbase_destroyed days = 5 } }
					}
					# else = { log = "starbase_starfortress lost_to_marauder" }
				}
			}
			# log = "marauder.527 system lost_to_marauder for \\[This.GetName]"
		}
	}
}

# Vanilla Fix
### Horde Clearing Planet (for evaluation marauder.555)
# Planet has reached 0 pops from orbital bombardment or collateral damage.
# This = Planet
# From = Bombarder
planet_event = {
	id = marauder.528
	hide_window = yes
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
	}

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		NOT = { has_planet_flag = planet_raided }
		exists = event_target:raider_khanate
		exists = from
		exists = owner
		# owner = { CmtTriggerIsEmpire = yes }
		count_planet_army = { count = 0 }
		OR = {
			planet_devastation > 90
			num_pops < 2
		}
		from = {
			OR = {
				CmtTriggerIsKhanCountry = yes
				AND = { # Khan Subject
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebellion_cooldown }
					exists = from
					from = { is_subject_of_khan = no }
				}
			}
		}
	}

	immediate = {
		set_timed_planet_flag = { flag = planet_raided days = 300 }
		if = {
			limit = {
				num_pops < 2
				owner = {
					CmtTriggerIsPlayableEmpire = yes
					num_owned_planets > 1
				}
			}
			owner = { change_variable = { which = "planets_lost_to_marauder" value = 1 } }
			destroy_colony = yes
		} else_if = {
			limit = {
				exists = owner
				owner = {
					num_owned_planets < 2
					CmtTriggerIsPlayableEmpire = yes
				}
			}
			## Complete takeover
			from = { save_event_target_as = new_khanate }
			owner = { country_event = { id = marauder.609 } } # Fully handover
			from = {
				country_event = {
					id = marauder.503
					scopes = { from = root.owner fromfrom = root }
				}
			}
		} else = {
			from = {
				country_event = {
					id = marauder.503
					days = 2
					scopes = { from = root.owner fromfrom = root }
				}
			}
		}
		log = "marauder.528 planets_lost_to_marauder increased for \\[This.Owner.GetName]"
	}
}

##################
##	Great Khan	##
##	Diplomacy	##
##################
country_event = {
	id = marauder.550
	title = "greatkhan_diplo_header"
	desc = {
		trigger = { is_subject_type = fabricator_satrapy }
		text = "marauder_fabricator_greeting1"
	}
	desc = {
		trigger = { is_subject_type = fabricator_satrapy }
		text = "marauder_fabricator_greeting2"
	}
	desc = {
		trigger = { is_subject_type = fabricator_satrapy }
		text = "marauder_fabricator_greeting3"
	}
	# desc = {
	# 	trigger = { is_subject_type = machinesmith }
	# 	text = "khan.899.g.desc"
	# }
	# desc = {
	# 	trigger = { is_subject_type = machinesmith }
	# 	text = "khan.898.g.desc"
	# }
	# desc = {
	# 	trigger = { is_subject_type = machinesmith }
	# 	text = "khan.897.g.desc"
	# }
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.a.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.b.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.c.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.d.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.e.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.f.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.g.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.h.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.i.desc"
	}
	desc = {
		trigger = { is_subject = yes is_subject_type = satrapy }
		text = "marauder.550.j.desc"
	}
	desc = {
		trigger = { is_subject = yes is_subject_type = satrapy }
		text = "marauder.550.k.desc"
	}
	desc = {
		trigger = {
			is_subject_type = satrapy
			has_authority = auth_machine_intelligence
		}
		text = "marauder.550.l.desc"
	}
	desc = {
		trigger = {
			is_subject_type = satrapy
			has_authority = auth_machine_intelligence
		}
		text = "marauder.550.m.desc"
	}
	desc = {
		trigger = {
			is_subject_type = satrapy
			has_authority = auth_hive_mind
		}
		text = "marauder.550.n.desc"
	}
	desc = {
		trigger = {
			is_subject_type = satrapy
			has_authority = auth_hive_mind
		}
		text = "marauder.550.o.desc"
	}
	desc = {
		trigger = {
			is_subject_type = satrapy
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		text = "marauder.550.p.desc"
	}
	desc = {
		trigger = {
			is_subject_type = satrapy
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
		text = "marauder.550.q.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.r.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.s.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.t.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.u.desc"
	}
	desc = {
		trigger = { is_homicidal = yes }
		text = "marauder.550.v.desc"
	}
	desc = {
		trigger = {
			from = { has_country_flag = marauder_2 }
		}
		text = "marauder.550.w.desc"
	}
	picture_event_data = {
		portrait = event_target:raider_khanate
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	trigger = {
		exists = event_target:raider_khanate
		OR = {
			NOT = { exists = from }
			from = { CmtTriggerIsKhanCountry = yes }
		}
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Submit? Extended subject offer
	option = {
		name = marauder_deal_start
		sound = advisor_clicking_respons_13
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
			OR = {
				AND = {
					has_technology = tech_mass_drivers_4
					has_technology = tech_lasers_4
					has_technology = tech_ship_armor_4
					has_technology = tech_shields_4
				}
				has_monthly_income = {
					resource = alloys
					value > 100
				}
			}
		}
		allow = { NOT = { has_active_event = { khan.998 } } }
		hidden_effect = {
			country_event = { id = khan.998 }
		}
		ai_chance = { factor = 50 }
	}
	option = {
		# Submit? Already rebelled
		name = marauder_deal_start
		# sound = no_tut_advior_05
		trigger = {
			has_country_flag = rebelling_satrapy
			has_technology = tech_mass_drivers_4
			has_technology = tech_lasers_4
			has_technology = tech_ship_armor_4
			has_technology = tech_shields_4
			is_fallen_empire = no
		}
		response_text = marauder.550.a.2.response
		is_dialog_only = yes
	}
	option = {
		# Submit?
		name = marauder.550.a
		sound = advisor_clicking_respons_13
		trigger = {
			is_subject_of_khan = no
			NOR = {
				has_been_declared_crisis = yes
				has_country_flag = rebelling_satrapy
				is_homicidal = yes
			}
			is_fallen_empire = no
		}
		allow = { NOT = { has_active_event = { marauder.551 } } }
		hidden_effect = {
			country_event = { id = marauder.551 }
		}
		ai_chance = { factor = 5 }
	}
	option = {
		# Submit? Already rebelled
		name = marauder.550.a
		sound = no_tut_advior_05
		trigger = { has_country_flag = rebelling_satrapy }
		response_text = marauder.550.a.2.response
		is_dialog_only = yes
	}
	option = {
		name = marauder.550.b
		trigger = {
			from = { has_country_flag = marauder_2 }
			NOR = {
				has_country_flag = asked_about_language
				is_homicidal = yes
			}
		}
		response_text = marauder.550.b.response
		is_dialog_only = yes
		hidden_effect = { set_country_flag = asked_about_language }
		ai_chance = { factor = 0 }
	}
	option = {
		name = marauder.550.c
		trigger = {
			from = { has_country_flag = marauder_3 }
			NOR = {
				has_country_flag = asked_about_religion
				is_homicidal = yes
			}
		}
		response_text = marauder.550.c.response
		is_dialog_only = yes
		hidden_effect = { set_country_flag = asked_about_religion }
		ai_chance = { factor = 0 }
	}
	option = { # Rebel?
		name = marauder_fabricator_rebel
		# sound = no_tut_advior_01
		trigger = { is_subject_type = fabricator_satrapy }
		allow = { NOT = { has_active_event = { marauder.554 } } }
		hidden_effect = {
			country_event = { id = marauder.554 }
		}
		ai_chance = { factor = 2 }
	}
	option = { # Rebel?
		name = marauder.550.d
		# sound = no_tut_advior_01
		trigger = {
			OR = {
				is_subject_type = machinesmith
				is_subject_type = satrapy
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = marauder.550.d_fail
				NOT = { has_country_flag = rebellion_cooldown }
			}
			NOT = { has_active_event = { marauder.554 } }
		}
		hidden_effect = {
			country_event = { id = marauder.554 }
		}
		ai_chance = { factor = 2 }
	}
	# Option = { TODO copy of 554??
	# 	name = khan.896.g.desc # Uprising machinesmith
	# 	trigger = { is_subject_type = machinesmith }
	# 	hidden_effect = {
	# 		country_event = { id = khan.801 }
	# 	}
	# }

	# Satrapy: Extended subject offer?
	option = {
		name = marauder_deal_start
		sound = advisor_clicking_respons_13
		trigger = {
			is_subject_of_khan = yes
			NOR = {
				is_subject_type = machinesmith
				is_subject_type = fabricator_satrapy
				has_country_flag = rebellion_cooldown
				has_country_flag = rebelling_satrapy
				is_homicidal = yes
			}
			OR = {
				AND = {
					has_technology = tech_mass_drivers_4
					has_technology = tech_lasers_4
					has_technology = tech_ship_armor_4
					has_technology = tech_shields_4
				}
				has_monthly_income = {
					resource = alloys
					value > 100
				}
			}
		}
		allow = { NOT = { has_active_event = { khan.998 } } }
		hidden_effect = {
			country_event = { id = khan.998 }
		}
		ai_chance = { factor = 5 }
	}

	option = {
		name = marauder.20.e
		default_hide_option = yes
		ai_chance = { factor = 0 }
	}
}

# Submit?
country_event = {
	id = marauder.551
	title = "greatkhan_diplo_header"
	desc = marauder.551.a.desc
	picture_event_data = {
		portrait = event_target:raider_khanate
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { has_been_declared_crisis = no }
	force_open = yes
	diplomatic = yes
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.551.a
		sound = advisor_clicking_respons_01
		trigger = { has_been_declared_crisis = no }
		response_text = marauder.551.a.response
		country_event = { id = marauder.559 } # Pre-Submit to Khan
		hidden_effect = {
			set_subject_of = {
				who = event_target:raider_khanate
				subject_type = satrapy
			}
		}
	}
	option = {
		name = marauder.551.a
		sound = full_tut_advisor_01
		trigger = {
			has_been_declared_crisis = no
			OR = {
				is_militarist = yes
				has_militarist_government = yes
				# 	has_spiritualist_government = yes
				# 	has_militarist_government = yes
				# 	is_spiritualist = yes
			}
			OR = {
				relative_power = {
					who = event_target:raider_khanate
					category = all
					value > pathetic
				}
				has_origin = "origin_khan_successor"
			}
			tech_unlocked_ratio = { who = from ratio < 0.7 }
		}
		response_text = marauder.551.a.response
		country_event = { id = marauder.559 } # Pre-Submit to Khan
		hidden_effect = {
			set_subject_of = {
				who = event_target:raider_khanate
				subject_type = war_satrapy
			}
		}
		ai_chance = { factor = 5 }
	}
	option = {
		name = marauder.551.b
		response_text = marauder.551.b.response
		default_hide_option = yes
		ai_chance = { factor = 0 }
	}
}

### Initial Reinforcement for Encouraging Satrap.
### Marauder Establishes Base in Capital System.
country_event = {
	id = marauder.553
	title = "marauder.553.name"
	desc = "marauder.553.desc"
	picture = GFX_evt_khan_throne_room
	show_sound = event_conversation
	location = event_target:garrison_base

	is_triggered_only = yes

	immediate = {
		save_event_target_as = satrapy_empire
		capital_scope = {
			save_event_target_as = capital_planet
			solar_system = { save_event_target_as = capital_system }
		}
		event_target:raider_khanate = {
			if = { limit = { is_hostile = prev }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = yes
				}
			}
			country_event = { id = khan.309 days = 1 } # to be sure
		}
		CmtEffectCreateEncouragingBase = yes		## event_target:garrison_base
		event_target:garrison_base = { CmtEffectCreateAdmiralty_KhanEncourager = yes }
	}
	option = { name = marauder.553.a }
	after = {
		hidden_effect = {
			event_target:raider_khanate = {
				copy_random_tech_from = { who = prev area = physics }
			}
		}
	}
}

# Rebel?
country_event = {
	id = marauder.554
	title = "greatkhan_diplo_header"
	desc = marauder.554.a.desc
	desc = {
		text = marauder_fabricator_threat
		exclusive_trigger = { is_subject_type = fabricator_satrapy }
	}
	picture_event_data = {
		portrait = event_target:raider_khanate
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	trigger = {
		NOT = { has_country_flag = marauder_diplomacy_engaged }
		exists = event_target:raider_khanate
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# option = {
	# 	name = marauder_fabricator_disloyal
	# 	response_text = marauder.554.a.response
	# 	exclusive_trigger = { is_subject_type = fabricator_satrapy }
	# }
	option = {
		name = marauder.554.a
		sound = no_tut_advior_02
		response_text = marauder.554.a.response
		set_subject_of = { who = none }
		hidden_effect = {
			set_country_flag = rebelling_satrapy
			set_timed_country_flag = { flag = rebellion_cooldown days = @CmtConstKhanLifespan_5e }
			if = { limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			if = { limit = { is_variable_set = "planets_lost_to_marauder" }
				divide_variable = { which = "planets_lost_to_marauder" value = 5 } # clear_variable = "planets_lost_to_marauder"
			}
			if = {
				limit = { has_federation = yes is_in_federation_with = event_target:raider_khanate }
				leave_alliance = { override_requirements = yes }
			}
			if = {
				limit = { is_ai = yes }
				# Owner can be someone
				random_system_within_border = {
					limit = {
						any_fleet_in_system = {
							OR = {
								has_fleet_flag = satrapy_garrison
								has_fleet_flag = satrapy_garrison_fleet
							}
						}
					}
					random_fleet_in_system = { # Desert 1 garrison
						limit = { has_fleet_flag = satrapy_garrison }
						destroy_fleet = { target = this destroy_template = yes }
					}

					random_fleet_in_system = { # Own 1 garrison
						limit = { has_fleet_flag = satrapy_garrison_fleet }
						set_owner = root
						if = {
							limit = { exists = leader }
							leader = { set_owner = root }
						}
						remove_fleet_flag = satrapy_garrison_fleet
					}
				}

				event_target:raider_khanate = {
					# random_owned_fleet = { # Desert 1 garrison
					# 	limit = {
					# 		has_fleet_flag = satrapy_garrison
					# 		solar_system = { is_owned_by = root }
					# 	}
					# 	destroy_fleet = { target = this destroy_template = yes }
					# }
					# random_owned_fleet = { # Own 1 garrison
					# 	limit = {
					# 		has_fleet_flag = satrapy_garrison_fleet
					# 		solar_system = { is_owned_by = root }
					# 	}
					# 	set_owner = root
					# 	if = {
					# 		limit = { exists = leader }
					# 		leader = { set_owner = root }
					# 	}
					# }
					# > 3.1
					ordered_owned_fleet = { # Own 1 auxuliaries
						limit = {
							has_fleet_flag = horde_auxuliaries
							exists = leader
							solar_system = { is_owned_by = root }
							leader = { is_same_species = root }
						}
						position = 0
						order_by = trigger:fleet_power
						set_owner = root
						leader = { set_owner = root }
					}
				}
			}

			if = {
				limit = {
					has_global_flag = great_khan_wins
					event_target:raider_khanate = {
						any_war = {
							using_war_goal = { type = "wg_independence" owner = attacker }
							NOT = {
								is_war_participant = { who = root side = attackers }
							}
						}
					}
				}
				event_target:raider_khanate = {
					random_war = {
						limit = {
							using_war_goal = { type = "wg_independence" owner = attacker }
							NOT = {
								is_war_participant = { who = root side = attackers }
							}
						}
						root = {
							join_war_on_side = { war = prev side = attackers }
						}
						# Remove all non marauder related from war
						every_defender = {
							limit = {
								NOR = {
									# is_same_empire = prevprev
									has_origin = "origin_khan_successor"
									is_subject_type = war_satrapy
								}
								CmtTriggerIsMarauder = no
							}
							prev = { remove_war_participant = prev }
						}
					}
				}
			} else = {
				every_war = { # End War
					limit = { is_war_participant = { who = event_target:raider_khanate } }
					remove_war_participant = root
				}
				if = {
					limit = {
						NOT = {
							any_war = {
								using_war_goal = { type = "wg_independence" owner = attacker }
							}
						}
					}
					declare_war = {
						target = event_target:raider_khanate
						name = "NAME_Rebellion"
						attacker_war_goal = "wg_independence"
					}
				}
			}

			event_target:raider_khanate = {
				add_opinion_modifier = { modifier = opinion_traitor_to_empire who = prev }
				if = { limit = { NOT = { is_hostile = root } }
					set_faction_hostility = {
						target = root
						set_hostile = yes
					}
				}
			}
			if = {
				limit = {
					exists = event_target:marauders_garrison_1
					event_target:marauders_garrison_1 = { NOT = { is_hostile = root } }
				}
				set_faction_hostility = {
					target = event_target:marauders_garrison_1
					set_hostile = yes
				}
			}
		}
		ai_chance = { factor = 2 }
	}
	option = {
		name = marauder_fabricator_loyal
		trigger = { is_subject_type = fabricator_satrapy }
		response_text = marauder.554.b.response
		ai_chance = { factor = 0 }
	}
	option = {
		name = marauder.554.b
		trigger = { NOT = { is_subject_type = fabricator_satrapy } }
		# sound = no_tut_advior_07
		response_text = marauder.554.b.response
		ai_chance = { factor = 0 }
	}
}

###########################
### While Khan Reigning ###
###########################

### NPC (AI Empire) Submits to Marauder.
country_event = {
	id = marauder.555
	hide_window = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		NOR = {
			has_global_flag = great_khan_dead
			# has_global_flag = great_khan_wins
			has_country_flag = rebelling_satrapy
		}
		has_been_declared_crisis = no
		NOT = { has_country_flag = rebellion_cooldown }
		CmtTriggerExistKhanCountry = yes # exists = event_target:raider_khanate
		CmtTriggerIsPlayableEmpire = yes # is_country_type = default
		is_subject = no
		is_ai = yes
		check_variable = { which = "planets_lost_to_marauder" value > 2 }
		is_homicidal = no
		relative_power = {
			who = event_target:raider_khanate
			category = fleet
			value < equivalent
		}
	}
	mean_time_to_happen = {
		years = 6
		modifier = {
			factor = 0.5
			OR = {
				check_variable = { which = "planets_lost_to_marauder" value > 10 }
				num_owned_planets < 3
			}
		}
		modifier = {
			factor = 0.1
			OR = {
				check_variable = { which = "planets_lost_to_marauder" value > 20 }
				num_owned_planets < 3
			}
		}
		modifier = {
			factor = 3
			OR = {
				has_ai_personality = honorbound_warriors
				is_galactic_emperor = yes
				has_global_flag = great_khan_wins
				# has_ai_personality = technological_warriors ? from mod
			}
		}
		modifier = {
			factor = 2
			OR = {
				has_ai_personality = xenophobic_isolationists
				has_ethic = ethic_gestalt_consciousness
				has_federation = yes
			}
		}
		modifier = {
			factor = 0.5
			OR = {
				has_ai_personality = peaceful_traders
				has_origin = "origin_khan_successor"
			}
		}
		modifier = {
			factor = 0.2
			OR = {
				has_ai_personality = fanatic_befrienders
				relative_power = {
					who = event_target:raider_khanate
					category = fleet
					value < inferior
				}
				AND = {
					is_at_war = yes
					def_war_exhaustion_sum > 0.95
				}
			}
		}
	}
	immediate = {
		# var = "planets_lost_to_marauder" is increased on .503, .527 and .528
		# country_event = { id = marauder.550 } # Submit to Khan
		country_event = { id = marauder.559 } # Pre-Submit to Khan
		set_subject_of = {
			who = event_target:raider_khanate
			subject_type = satrapy
		}
	}
}

# Submit to Khan (Pre-Helper)
# Used also for marauder.555 and marauder.551
# This = new subject
country_event = {
	id = marauder.559
	is_triggered_only = yes
	hide_window = yes
	# trigger = {}
	immediate = {
		## If has_federation give Horde malus partial back.
		capitaL_scope = {
			set_variable = { which = "planets_lost_to_marauder" value = 1 } # temp. only
			if = { limit = { root = { has_federation = yes } }
				change_variable = { which = "planets_lost_to_marauder" value = 1 }
				if = { limit = { root = { is_federation_leader = yes } }
					change_variable = { which = "planets_lost_to_marauder" value = 1 }
				}
				root.federation = {
					every_member = {
						change_variable = { which = "planets_lost_to_marauder" value = prevprev.planets_lost_to_marauder }
					}
				}
			}
			if = { limit = { root = { num_defensive_pacts > 0 } }
				every_playable_country = {
					limit = { has_defensive_pact = root }
					change_variable = { which = "planets_lost_to_marauder" value = 1 }
					change_variable = { which = "planets_lost_to_marauder" value = prev.planets_lost_to_marauder }
				}
			}
		}
		if = { limit = { check_variable = { which = "planets_lost_to_marauder" value < 6 } }
			set_variable = { which = "planets_lost_to_marauder" value = 6 }
		}
		divide_variable = { which = "planets_lost_to_marauder" value = 2 }

		if = { limit = { is_overlord = yes }
			every_subject = {
				country_event = { id = marauder.553 days = 10 }
				country_event = { id = marauder.551 }
				# set_subject_of = {
				# 	who = event_target:raider_khanate
				# 	subject_type = satrapy
				# }
				add_modifier = { modifier = "satrapy_of_horde" days = -1 }
				change_variable = { which = "planets_lost_to_marauder" value = 1 }
				event_target:raider_khanate = {
					copy_random_tech_from = { who = prev area = engineering }
					add_resource = { influence = 20 }
				}
			}
		} else_if = { limit = { is_subject = yes exists = overlord }
			overlord = { # Much less likely
				change_variable = { which = "planets_lost_to_marauder" value = 2 }
			}
		}

		# Can't rebel for a year after submitting.
		set_timed_country_flag = { flag = rebellion_cooldown days = @CmtConstKhanLifespan_5e }
		save_event_target_as = new_satrapy
		observer_event = { id = observer.19 }
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
				NOT = { is_same_empire = root }
			}
			country_event = { id = marauder.552 }
		}
		country_event = { id = marauder.553 days = 10 }
		add_modifier = { modifier = "satrapy_of_horde" days = -1 }

		event_target:raider_khanate = {
			copy_random_tech_from = { who = prev area = physics }
			add_resource = { influence = 100 }
		}
		capitaL_scope = { clear_variable = "planets_lost_to_marauder" }
	}
}

### Regular Reinforcements at Capital of Satrap (Marauder Auxiliary Cycle)
# This = Garrison_Base
fleet_event = {
	id = marauder.560
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_scope_valid = yes
		CmtTriggerExistKhanCountry = yes
		is_owned_by = event_target:raider_khanate
	}

	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:satrapy_empire }
				exists = space_owner
				space_owner = {
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebelling_satrapy }
					prev.owner = { is_same_empire = prev.overlord }
				}
			}
			space_owner = { save_event_target_as = satrapy_empire }
		}
		if = {
			limit = { exists = event_target:satrapy_empire }
			event_target:satrapy_empire = { owner_species = { save_event_target_as = satrapy_species } }

			# if = {
			# 	limit = {
			# 		event_target:CmtGlobalVar = {
			# 			OR = {
			# 				check_variable = { which = CmtVarReinforceCycle_Khan value < 2 }
			# 				check_variable = { which = CmtVarReinforceCycle_Khan value > 4 }
			# 			}
			# 		}
			# 	}
			fleet_event = { id = marauder.560 days = 600 random = 300 }
			if = {
				limit = {
					solar_system = {
						count_fleet_in_system = {
							count < 5
							limit = {
								is_owned_by = event_target:raider_khanate
								has_fleet_flag = horde_auxuliaries
							}
						}
					}
				}
				CmtEffectCreateAdmiralty_KhanSubReinforcement = yes
			}
			# } else = {
			# 	# TODO needs FIX: CM somehow not working as fleet power gets unlimited (over 5M)
			# 	# So static limit is of 4 fleets is set.
			# 	fleet_event = { id = marauder.560 days = 160 random = 80 }
			# 	if = {
			# 		limit = { check_variable = { which = CmtVarKhanReinforcementCounter value > 9.5 } }
			# 		change_variable = { which = CmtVarKhanReinforcementCounter value = -10 }
			# 		if = {
			# 			limit = {
			# 				solar_system = {
			# 					count_fleet_in_system = {
			# 						count < 5
			# 						limit = {
			# 							is_owned_by = event_target:raider_khanate
			# 							has_fleet_flag = horde_auxuliaries
			# 						}
			# 					}
			# 				}
			# 			}
			# 			CmtEffectCreateAdmiralty_KhanSubReinforcement = yes
			# 		}
			# 	}
			# 	root.owner = { root = { CmtEffectKhanIncreasementReinforcementCycle = yes } }
			# }
		}
	}
}

### The Future of the Horde (HIDDEN)
country_event = {
	id = marauder.600
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			is_country_type = awakened_marauders
			AND = {
				exists = event_target:raider_khanate
				is_same_empire = event_target:raider_khanate
			}
		}
		NOT = { has_country_flag = marauder600_happened }
	}

	immediate = {
		set_country_flag = marauder600_happened
		set_global_flag = khan_dead_event_fine
		remove_global_flag = marauder_crisis_ongoing
		remove_global_flag = khan_no_die
		remove_country_flag = CmtFlagKhanNoDieCountry
		if = { limit = { has_global_flag = great_khan_wins }
			# clear_global_event_target = great_khan
			# clear_global_event_target = raider_khanate
			clear_global_event_target = great_khan_ruler
			if = { limit = { exists = event_target:marauders_garrison_1 }
				event_target:marauders_garrison_1 = {
					every_owned_fleet = {
						limit = {
							OR = {
								has_fleet_flag = satrapy_garrison
								has_fleet_flag = satrapy_garrison_fleet
							}
						}
						destroy_fleet = this
					}
					destroy_country = yes
				}
			}
			if = { limit = { has_global_flag = war_in_heaven_started }
				remove_global_flag = sleepers_awake_rival_waking
				remove_global_flag = war_in_heaven_started
				remove_global_flag = war_in_heaven_debug
				clear_global_event_target = SecondSleeper
				if = { limit = { has_global_flag = war_in_heaven_ongoing }
					remove_global_flag = war_in_heaven_ongoing
					if = { limit = { exists = event_target:FirstSleeper }
						remove_country_flag = sleepers_awake_first_sleeper
						remove_country_flag = sleepers_awake_ancient_rival
						remove_country_flag = sleepers_awake_first
						event_target:FirstSleeper = {
							every_war = { # End War in Heaven
								limit = {
									any_war_participant = {
										prev = {
											using_war_goal = {
												type = wg_war_in_heaven
												owner = prev
											}
										}
									}
									is_scope_type = war # if not the error.log tells: Invalid Scope
								}
								end_war_effect = yes
								# TODO Notify?
								# every_playable_country = {
								# 	limit = { is_ai = no }
								# 	country_event = { id = war_in_heaven.6 }
								# }
								# observer_event = { id = observer.78 }
							}
							if = { limit = { end_game_years_passed < 0 }
								set_country_type = fallen_empire
							}
						}
						clear_global_event_target = FirstSleeper
					}
				}
			}
			random_federation = {
				limit = { has_federation_flag = non_aligned_league }
				random_member = {
					limit = { is_federation_leader = yes }
					set_country_flag = last_best_hope
					remove_country_flag = ai_no_wars
					every_war = { # End War in Heaven
						limit = {
							any_war_participant = {
								prev = {
									using_war_goal = {
										type = wg_war_in_heaven
										owner = prev
									}
								}
							}
							is_scope_type = war # if not the error.log tells: Invalid Scope
						}
						end_war_effect = yes
					}
				}
				every_member = {
					limit = { is_federation_leader = no }
					remove_country_flag = ai_no_wars
					leave_alliance = { override_requirements = yes }
				}
				dissolve_federation = yes
			}
		}

		if = { # Khan Extended
			limit = {
				is_at_war = yes
				is_war_leader = yes
				# any_war = { is_war_participant = root }
			}
			every_war = { # End Expansion War
				# limit = { is_war_participant = { who = root side = attackers } }
				# limit = { is_scope_type = war } # if not the error.log tells: Invalid Scope
				end_war_effect = yes
				# every_war_participant = {
				# 	limit = { NOT = { is_same_empire = root } } # don't break the loop
				# 	prev = { remove_war_participant = prev }
				# }
			}
			# End subject wars
			every_subject = {
				limit = { is_at_war = yes }
				every_war = {
					limit = {
						is_scope_type = war # TODO because of strange error.
						OR = {
							using_war_goal = { type = wg_marauder_expansion owner = prev }
							using_war_goal = { type = wg_great_expansion owner = prev }
						}
					}
					remove_war_participant = prev
				}
			}
			# Compensatory allowance for victims (some kind of compensation for damage done)
			every_playable_country = {
				limit = { is_variable_set = "planets_lost_to_marauder" }
				# multiply_variable = { which = "planets_lost_to_marauder" value = 35 }
				round_variable = "planets_lost_to_marauder"
				while = {
					count = planets_lost_to_marauder
					add_resource = {
						influence = 30
						alloys = 50
					}
				}
				clear_variable = "planets_lost_to_marauder"
			}
		} # End Khan Extended

		if = {
			limit = { num_owned_planets < 1 } # If Horde owns no planet.
			country_event = { id = marauder.604 } # Reverts to old ways.
		} else = {
			if = {
				limit = {
					OR = {
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value != 1 } }
						AND = {
							num_owned_planets > 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value != 1 } }
						}
						AND = {
							count_country = { limit = { is_subject_of_khan = yes } count > 1 }
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value != 1 } }
						}
					}
				}
				random_list = {
					60 = {
						modifier = {
							factor = 0
							OR = {
								num_owned_planets < 7
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 1 } }
							}
						}
						modifier = {
							factor = 0.167
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 2 } }
						}
						modifier = {
							factor = 0.334
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 3 } }
						}
						modifier = { factor = 2 num_owned_planets > 11 }
						country_event = { id = marauder.601 } # Fractures into Diadochi
					}
					10 = {
						modifier = {
							factor = 0
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 1 } }
						}
						modifier = {
							factor = 2
							OR = {
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 3 } }
								has_country_flag = diadochi
								has_country_flag = new_khanate_flag
							}
						}
						modifier = {
							factor = 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 4 } }
						}
						modifier = { factor = 0.1 num_owned_planets > 15 }
						country_event = { id = marauder.602 } # Stays united in New Khanate.
					}
					10 = {
						modifier = {
							factor = 0 # Can only happen if there are enough Satrapies.
							OR = {
								count_country = { limit = { is_subject_of_khan = yes } count < 2 }
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 1 } }
							}
						}
						modifier = {
							factor = 2
							OR = {
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 3 } }
								has_origin = "origin_khan_successor"
							}
						}
						modifier = {
							factor = 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 4 } }
						}
						modifier = { factor = 0.1 num_owned_planets > 15 }
						country_event = { id = marauder.603 } # Turns into Democratic Federation
					}
				}
			} else = {
				random_list = {
					60 = {
						modifier = { factor = 0 num_owned_planets < 7 }
						modifier = { factor = 2 num_owned_planets > 11 }
						country_event = { id = marauder.601 } # Fractures into Diadochi
					}
					10 = {
						modifier = { factor = 0 num_owned_planets > 15 }
						modifier = { factor = 2 has_origin = "origin_khan_successor" }
						country_event = { id = marauder.602 } # Stays united in New Khanate.
					}
					10 = {
						modifier = {
							factor = 0 # Can only happen if there are enough Satrapies.
							OR = {
								num_owned_planets > 15
								count_country = { limit = { is_subject_of_khan = yes } count < 2 }
							}
						}
						modifier = { factor = 2 has_origin = "origin_khan_successor" }
						country_event = { id = marauder.603 } # Turns into Democratic Federation
					}
				}
			}
		}
		clear_global_event_target = marauder_rally_point
		event_target:CmtGlobalVar = {
			if = {
				limit = { check_variable = { which = CmtVarKhanMultiple value = 3 } }
				remove_global_flag = CmtFlagNowInKhanInterval
				if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T0 } } # 7.5
					if = {
						limit = { check_variable = { which = CmtVarKhanInterval value > 0 } }
						set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = CmtVarKhanInterval }
					}
					### Do nothing
				} else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T1 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D1 }
				} else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T2 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D2 }
				} else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T3 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D3 }
				} else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T4 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D4 }
				} else_if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T5 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D5 }
				} else = {
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstTUnq_ConstKhanInterval }
				}
			}
		}
	}
	after = {
		hidden_effect = {
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
				clear_global_event_target = CmtTargetMarauderRallyPoint1
			}
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
				clear_global_event_target = CmtTargetMarauderRallyPoint2
			}
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
				clear_global_event_target = CmtTargetMarauderRallyPoint3
			}
		}
	}
}

# The Diadochi (HIDDEN)
country_event = {
	id = marauder.601
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		owner_species = { save_event_target_as = marauder_species }
		# every_owned_fleet = { # Delete everything except starbase_marauder
		# 	limit = {
		# 		count_owned_ship = {
		# 			count < 1
		# 			limit = { is_ship_size = starbase_marauder }
		# 		}
		# 	}
		# 	delete_fleet = { target = this destroy_template = yes }
		# }
		every_subject = {
			set_subject_of = { who = none }
			if = {
				limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			country_event = { id = marauder.670 days = 2 } # Notify
		}
		every_country = {
			limit = { has_modifier = "satrapy_of_horde" }
			country_event = { id = marauder.670 days = 4 } # Notify
			remove_modifier = "satrapy_of_horde"
		}
		if = {
			limit = {
				OR = {
					num_owned_planets > 9
					count_system_within_border = {
						count > 3
						limit = {
							any_system_planet = {
								has_owner = yes
								is_owned_by = root
							}
							is_potential_diadochi_system = yes
						}
					}
				}
			}
			# Four Diadochi
			assign_first_diadochi_planets = yes
			assign_second_diadochi_planets = yes
			assign_third_diadochi_planets = yes
			assign_fourth_diadochi_planets = yes
			assign_diadochi_systems = yes
			create_first_diadochi = yes
			create_second_diadochi = yes
			create_third_diadochi = yes
			create_fourth_diadochi = yes
		}
		# Two Diadochi (Marauder small)
		else = {
			assign_third_diadochi_planets = yes
			assign_fourth_diadochi_planets = yes
			assign_diadochi_systems = yes
			create_third_diadochi = yes
			create_fourth_diadochi = yes
		}
		set_diadochi_claims = yes
		observer_event = { id = observer.20 }
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.620 }
		}
		# Cleanup temp vars
		every_playable_country = {
			limit = { is_variable_set = "successor_fleet_power" }
			clear_variable = "successor_fleet_power"
		}
		clear_global_event_target = marauder_precursor
		if = { limit = { is_ai = yes }
			destroy_country = yes
		} else = {
			# TODO: Player could chose!?
			event_target:first_diadochi_origin = { set_player = root }
		}
	}
}

# The New Khanate (HIDDEN)
country_event = {
	id = marauder.602
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		country_event = { id = khan.303 } # Get marauder_species
		create_country = {
			name_list = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = {
				civic = civic_great_khans_legacy
				civic = random
			}
			origin = "origin_khan_successor"
			# flag = {
			# 	icon = { category = "pirate" file = }
			# 	background = { category = "backgrounds" file = "triangle_split.dds" }
			# 	colors = { "red" "black" "null" "null" }
			# }
			ethos = {
				ethic = ethic_fanatic_militarist
				ethic = ethic_xenophobe
			}
			ignore_initial_colony_error = yes
			# exclude_day_zero_contact = root
			effect = {
				set_name = random
				save_event_target_as = new_khanate
				set_country_flag = new_khanate_flag
				set_country_flag = first_alien_life
				set_country_flag = has_encountered_other_empire
				# Gimmick for possible after-events
				root = {
					switch = {
						trigger = has_country_flag
						marauder_1 = {
							prev = { set_country_flag = marauder_1 save_global_event_target_as = marauder_country_1 }
						}
						marauder_2 = {
							prev = { set_country_flag = marauder_2 save_global_event_target_as = marauder_country_2 }
						}
						marauder_3 = {
							prev = { set_country_flag = marauder_3 save_global_event_target_as = marauder_country_3 }
						}
					}
				}
				force_add_civic = civic_slaver_guilds
			}
		}
		# last_created_country = {}
		clear_global_event_target = marauder_precursor
		country_event = { id = marauder.609 } # Fully handover
		every_subject = {
			set_subject_of = { who = none }
			if = {
				limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			country_event = { id = marauder.670 days = 2 } # Notify
			country_event = { id = marauder.671 days = 8 }
		}
		every_country = {
			limit = { has_modifier = "satrapy_of_horde" }
			country_event = { id = marauder.670 days = 4 } # Notify
			remove_modifier = "satrapy_of_horde"
		}
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.640 } # Notify
		}
		observer_event = { id = observer.22 }
		if = { limit = { is_ai = yes }
			destroy_country = yes
		} else = {
			event_target:new_khanate = { set_player = root }
		}
	}
}

# Democratic Federation (HIDDEN)
# This = awakened_marauders
country_event = {
	id = marauder.603
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		country_event = { id = khan.303 } # Get marauder_species
		create_country = {
			name_list = random
			name = random
			species = event_target:marauder_species
			type = default
			authority = auth_democratic
			civics = random
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_fanatic_egalitarian
				ethic = ethic_xenophile
			}
			ignore_initial_colony_error = yes
			exclude_day_zero_contact = root
			effect = {
				set_country_flag = democratic_khanate_flag
				save_event_target_as = new_khanate
			}
		}
		clear_global_event_target = marauder_precursor

		# Give khan_destroyer opportunity to join new federation.
		if = {
			limit = { NOT = { exists = event_target:khan_destroyer } }
			random_playable_country = {
				limit = {
					# CmtTriggerIsPlayableEmpire = yes
					has_country_flag = no_khan_do
					is_subject_of_khan = no
				}
				save_event_target_as = khan_destroyer
			}
		}
		if = {
			limit = {
				exists = event_target:khan_destroyer
				NOT = {
					has_active_event = { marauder.660 marauder.661 }
				}
				is_ai = yes
				is_subject_of_khan = no
			}
			event_target:khan_destroyer = { country_event = { id = marauder.661 } }
		}

		every_playable_country = {
			limit = {
				is_ai = no
				is_subject_of_khan = no
			}
			country_event = { id = marauder.661 }
		}

		every_subject = {
			set_subject_of = { who = none }
			if = {
				limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			country_event = { id = marauder.660 }
		}
		every_country = {
			limit = {
				has_modifier = "satrapy_of_horde"
				NOT = { has_active_event = { marauder.660 } }
			}
			country_event = { id = marauder.660 days = 2 }
			remove_modifier = "satrapy_of_horde"
		}

		observer_event = { id = observer.23 }
		country_event = { id = marauder.609 } # Fully handover
		if = { limit = { is_ai = yes }
			destroy_country = yes
		} else = {
			event_target:new_khanate = { set_player = root }
		}
	}
}

# The Old Ways (HIDDEN)
country_event = {
	id = marauder.604
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		owner_species = { save_event_target_as = marauder_species }

		if = { limit = { exists = event_target:marauder_precursor }
			event_target:marauder_precursor = {
				create_country = {
					name_list = prev
					name = prev
					species = root
					type = dormant_marauders
					civics = prev
					flag = prev
					ethos = prev
					ignore_initial_colony_error = yes
					day_zero_contact = no
					exclude_day_zero_contact = root
					effect = {
						save_event_target_as = restored_marauders
					}
				}
			}
			clear_global_event_target = marauder_precursor
		} else = {
			create_country = {
				name_list = random
				# name = random
				species = event_target:marauder_species
				type = dormant_marauders
				civics = {
					civic = civic_anarcho_tribalism
					civic = civic_slaver_guilds
					civic = random
				}
				origin = "origin_khan_successor"
				flag = {
					icon = { category = "pirate" file = "flag_pirate_13.dds" } # flag_pirate_5.dds
					background = { category = "backgrounds" file = "00_solid.dds" }
					colors = { "black" "black" "null" "null" }
				}
				ethos = {
					ethic = ethic_fanatic_militarist
					ethic = ethic_xenophobe
				}
				ignore_initial_colony_error = yes
				day_zero_contact = no
				exclude_day_zero_contact = root
				effect = {
					save_event_target_as = restored_marauders
				}
			}
		}
		event_target:restored_marauders = {
			set_country_flag = restored_marauders_flag
			set_name = random
			randomize_flag_symbol = "pirate"
			root = {
				switch = {
					trigger = has_country_flag
					marauder_1 = {
						prev = { set_country_flag = marauder_1 save_global_event_target_as = marauder_country_1 }
					}
					marauder_2 = {
						prev = { set_country_flag = marauder_2 save_global_event_target_as = marauder_country_2 }
					}
					marauder_3 = {
						prev = { set_country_flag = marauder_3 save_global_event_target_as = marauder_country_3 }
					}
				}
				every_owned_leader = {
					# limit = { leader_class = ruler }
					set_owner = prevprev
				}
			}
		}

		every_owned_fleet = {
			limit = {
				OR = {
					has_fleet_flag = satrapy_garrison
					has_fleet_flag = satrapy_garrison_fleet
					has_fleet_flag = horde_auxuliaries
				}
			}
			destroy_fleet = this
		}
		if = {
			limit = {
				exists = event_target:great_khan
				exists = event_target:great_khan.fleet
			}
			delete_fleet = event_target:great_khan.fleet
			clear_global_event_target = great_khan
		}
		every_system_within_border = {
			limit = { exists = starbase }
			starbase = { set_owner = event_target:restored_marauders }
		}
		every_owned_fleet = {
			if = {
				limit = { NOT = { is_within_borders_of = root.owner } }
				delete_fleet = this
			} else = {
				set_owner = event_target:restored_marauders
				if = {
					limit = { exists = leader }
					leader = { set_owner = event_target:restored_marauders }
					if = {
						limit = { NOT = { is_ship_class = shipclass_transport } }
						assign_leader = leader
					}
					# fleet_event = { id = khan.611 days = -1 }
				}
			}
		}
		event_target:restored_marauders = {
			copy_techs_from = { target = root }
			if = {
				limit = { root = { num_owned_relics > 0 } }
				steal_relic = { target = root relic = all }
			}
			country_event = { id = khan.306 }
			# create_marauder_successor_fleet = yes
			event_target:marauder_rally_point = {
				prev = { CmtEffectCreateFleet_KhanStandard = yes }
			}
		}

		# Establish Communications
		every_country = {
			limit = { has_communications = root }
			establish_communications_no_message = event_target:restored_marauders
		}

		every_subject = {
			set_subject_of = { who = none }
			if = {
				limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			country_event = { id = marauder.670 days = 3 } # Notify
			country_event = { id = marauder.671 days = 10 }
		}
		every_country = {
			limit = { has_modifier = "satrapy_of_horde" }
			country_event = { id = marauder.670 days = 8 } # Notify
			remove_modifier = "satrapy_of_horde"
		}
		observer_event = { id = observer.21 }
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.630 } # Notify
		}
		destroy_country = yes
		clear_global_event_target = marauder_rally_point
	}
}

# Fully handover marauder country (HIDDEN)
# From marauder.602 and marauder.603
# This = be destroyed country
country_event = {
	id = marauder.609
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		exists = event_target:raider_khanate
		# NOT = { has_global_flag = great_khan_wins }
	}
	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = last_created_country
				last_created_country = { has_origin = "origin_khan_successor" }
			}
			last_created_country = { save_event_target_as = new_khanate }
		}
		if = {
			limit = {
				NOT = { exists = event_target:new_khanate }
				exists = from
				from = {
					is_ai = yes
					OR = {
						CmtTriggerIsMarauder = yes
						is_subject_of_khan = yes
					}
				}
			}
			from = { save_event_target_as = new_khanate }
		}
		if = { limit = { NOT = { exists = event_target:new_khanate } }
			break = yes
		}
		if = {
			limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
			# Drag military fleets except for one (or two)
			# random_owned_fleet = { pre 3.1
			ordered_owned_fleet = {
				limit = {
					is_mobile = yes
					exists = leader
					is_civilian = no any_owned_ship = { is_ship_class = shipclass_military }
				}
				position = 1
				order_by = trigger:fleet_power
				# weights = { pre 3.1
				# 	base = 1
				# 	# modifier = { add = 1 num_ships > 5 }
				# 	# modifier = { add = 2 num_ships > 10 }
				# 	# modifier = { add = 3 num_ships > 20 }
				# 	modifier = { add = 1 fleet_power > 5500 }
				# 	modifier = { add = 2 fleet_power > 11000 }
				# 	modifier = { add = 3 fleet_power > 22000 }
				# }
				set_owner = event_target:new_khanate
				leader = { set_owner = event_target:new_khanate }
			}
			random_owned_fleet = {
				limit = { is_mobile = yes exists = leader }
				set_owner = root
				leader = { set_owner = root } # Recruit leader
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_fleet = {
				limit = {
					is_civilian = no
					any_owned_ship = { is_ship_class = shipclass_military }
				}
				delete_fleet = this
			}
		}
		# Normalize Starbases
		if = {
			limit = {
				OR = {
					NOT = { has_global_flag = marauder_crisis_ongoing }
					event_target:new_khanate = { CmtTriggerIsMarauder = no }
				}
			}
			every_owned_starbase = {
				limit = { has_starbase_size = starbase_marauder }
				set_owner = event_target:new_khanate
				set_starbase_size = starbase_outpost
			}
			event_target:new_khanate = {
				if = {
					limit = { is_ai = yes }
					add_100_unity_per_year_passed = yes
					random_system_within_border = {
						limit = { CmtTriggerMarauderCapitalSystem = yes }
						system_event = { id = khan.301 } # Create Citadel
					}
				}
			}
		}
		every_system_within_border = {
			limit = { exists = starbase }
			starbase = { set_owner = event_target:new_khanate }
		}
		every_owned_fleet = {
			set_owner = event_target:new_khanate
			# Recruit leader
			if = {
				limit = { exists = leader }
				leader = { set_owner = event_target:new_khanate }
				if = {
					limit = { NOT = { is_ship_class = shipclass_transport } }
					assign_leader = leader
				}
				fleet_event = { id = khan.611 days = -1 }
			}
		}

		# Needs to be last (as the country gets destroyed without planet)
		every_owned_planet = {
			set_owner = event_target:new_khanate
			set_controller = event_target:new_khanate
			# Just to keep the initial conquered planets in line while they stabilize.
			add_modifier = { modifier = "revolt_suppressed" days = 600 }
		}
		event_target:new_khanate = {
			if = {
				limit = { is_ai = yes }
				add_resource = {
					minerals =		20000
					energy =		40000
					alloys =		20000
					food =			20000
					influence = 	1000
					consumer_goods = 20000
				}
				copy_techs_from = { target = root }
			}
			if = {
				limit = { root = { num_owned_relics > 0 } }
				steal_relic = { target = root relic = all }
			}
			if = {
				limit = {
					any_owned_starbase = { has_starbase_size < starbase_starhold }
				}
				random_owned_starbase = {
					limit = { has_starbase_size < starbase_starhold }
					set_starbase_size = starbase_starhold
					starbase_event = { id = khan.302 days = 1 }
					# set_starbase_module = { slot = 1 module = shipyard }
					# set_starbase_module = { slot = 2 module = shipyard }
					# set_starbase_module = { slot = 3 module = shipyard }
				}
				if = {
					limit = {
						any_owned_starbase = { has_starbase_size < starbase_starhold }
					}
					random_owned_starbase = {
						limit = { has_starbase_size < starbase_starhold }
						set_starbase_size = starbase_starhold
						starbase_event = { id = khan.302 days = 1 }
					}
				}
				if = {
					limit = {
						any_owned_starbase = { has_starbase_size < starbase_starhold }
					}
					random_owned_starbase = {
						limit = { has_starbase_size < starbase_starhold }
						set_starbase_size = starbase_starhold
						starbase_event = { id = khan.302 days = 1 }
					}
				}
			}
			# Survey Own Space
			every_planet_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = event_target:new_khanate
				}
			}
			# Survey Rest of Horde's Space
			root = {
				every_planet_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = event_target:new_khanate
					}
				}
			}
			# Mining and Research Stations
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_mining_station = no
				}
				create_mining_station = { owner = event_target:new_khanate }
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_research_station = no
				}
				create_research_station = { owner = event_target:new_khanate }
			}
			# Take all old leaders!?
			every_owned_leader = {
				# limit = { leader_class = ruler }
				set_owner = event_target:new_khanate
			}

			if = {
				limit = { CmtTriggerIsMarauder = no }
				add_100_unity_per_year_passed = yes
				country_event = { id = game_start.6 days = 6 random = 4 }	# advanced_empire
				country_event = { id = game_start.9 days = 12 random = 8 }	# empire_init_create_ships civil
				create_fleet_from_naval_cap = 0.2 # base
				### Units
				create_ship_design = { design = "NAME_Pirate_Transport" }
				add_ship_design = last_created_design
				create_ship_design = { design = "NAME_Clan_Builder" }
				add_ship_design = last_created_design
				create_ship_design = { design = "NAME_Outrider" }
				add_ship_design = last_created_design
				### Dynamic Empire fleet_power
				root = { set_variable = { which = "successor_fleet_power" value = 40000 } }
				# Store each fleet_power to var.
				every_playable_country = {
					limit = {
						NOT = { is_variable_set = "successor_fleet_power" }
						fleet_power > 40000
					}
					if = {
						limit = {
							any_owned_planet = { has_planet_flag = fallen_empire_world }
						}
						set_variable = { which = "successor_fleet_power" value = 220000 }
					} else = {
						export_trigger_value_to_variable = { trigger = fleet_power variable = "successor_fleet_power" }
					}
				}
				random_owned_planet = {
					limit = { solar_system = { exists = starbase } }
					weights = {
						base = 1
						modifier = { add = 1 is_colony = yes }
						modifier = { add = 2 is_capital = yes }
					}
					prev = {
						CmtEffectCreateFleet_KhanStandard = yes # create_marauder_successor_fleet = yes
						CmtEffectCreateFleet_KhanArmy = yes
						CmtEffectCreateFleet_KhanConstructor = yes
					}
					while = {
						count = 4
						limit = {
							any_playable_country = {
								is_variable_set = "successor_fleet_power"
								check_variable = { which = "successor_fleet_power" value > root.successor_fleet_power }
							}
						}
						root = {
							change_variable = { which = "successor_fleet_power" value = 20000 }
							# Own old to get the right design!?
							CmtEffectCreateFleet_KhanStandard = { DIADOCHI = yes } # create_marauder_successor_fleet = yes
						}
						last_created_leader = {
							set_owner = prevprev
							last_created_fleet = { set_owner = prevprevprev assign_leader = prev }
						}
					}
				}
				country_event = { id = khan.612 days = 7 } # Build Habitas

				### Do automatic claims if planet has belonged to an empire.
				# TODO also former systems?
				every_owned_planet = {
					limit = {
						any_playable_country = { has_country_flag = former_owner@prev }
					}
					random_playable_country = {
						limit = { has_country_flag = former_owner@prev }
						prev.solar_system = {
							add_claims = { who = prev num_of_claims = 2 show_notification = no }
						}
						if = { limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
							remove_country_flag = former_owner@prev
						}
					}
				}
				every_planet_within_border = {
					limit = {
						has_owner = no
						colonizable_planet = yes
						any_playable_country = { has_country_flag = former_owner@prev }
					}
					random_playable_country = {
						limit = { has_country_flag = former_owner@prev }
						prev.solar_system = {
							add_claims = { who = prev num_of_claims = 1 show_notification = no }
						}
						if = { limit = { NOT = { has_global_flag = marauder_crisis_ongoing } }
							remove_country_flag = former_owner@prev
						}
					}
				}
			}
		}
		# Establish Communications
		every_country = {
			limit = { has_communications = root }
			establish_communications_no_message = event_target:new_khanate
		}
	}
}

# The New Galactic Horde (Satrapy)
country_event = {
	id = marauder.660
	title = "marauder.660.name"
	desc = "marauder.660.desc"
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = { is_subject = yes }
			set_subject_of = { who = none }
		}
		if = {
			limit = { is_variable_set = "planets_lost_to_marauder" }
			clear_variable = "planets_lost_to_marauder"
		}
	}
	option = {
		name = marauder.660.a
		ai_chance = { factor = 100 }
		join_alliance = {
			who = event_target:new_khanate
			name = "NAME_Galactic_Horde"
			override_requirements = yes
		}
	}
	option = { name = marauder.660.b }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
}

# The New Galactic Horde (Non-Satrapy)
country_event = {
	id = marauder.661
	title = "marauder.660.name"
	desc = "marauder.661.desc"
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	# Opportunity Khan Destroyer marauder.710
	option = {
		name = marauder.660.a
		trigger = {
			hidden_trigger = {
				OR = {
					has_country_flag = no_khan_do
					is_same_empire = event_target:khan_destroyer
				}
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				OR = {
					is_robot_empire = yes
					is_militarist = yes
					has_federation = yes
					is_galactic_emperor = yes
					has_been_declared_crisis = yes
				}
			}
		}
		join_alliance = {
			who = event_target:new_khanate
			name = "NAME_Galactic_Horde"
			override_requirements = yes
		}
	}
	option = { name = marauder.661.a }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
}

# Horde Diplomacy after Great Khan's death (on_custom_diplomacy)
country_event = {
	id = marauder.665
	title = "TRANSMISSION"
	desc = "marauder.665.a.desc"
	picture_event_data = { room = no_video_feed_room }
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes
	trigger = {
		has_global_flag = great_khan_dead
		from = {
			OR = {
				is_country_type = awakened_marauders
				AND = {
					exists = event_target:raider_khanate
					is_same_empire = event_target:raider_khanate
				}
			}
		}
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.665.a
		default_hide_option = yes
	}
}

# Satrapy No Longer
country_event = {
	id = marauder.670
	title = "marauder.670.name"
	desc = "marauder.670.desc"
	picture = GFX_evt_arguing_senate
	show_sound = event_conversation
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = { is_subject = yes }
			set_subject_of = { who = none }
		}
		if = {
			limit = { is_variable_set = "planets_lost_to_marauder" }
			clear_variable = "planets_lost_to_marauder"
		}
	}
	option = { name = marauder.670.a }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
}

# Garrison Station Scuttled
country_event = {
	id = marauder.671
	title = "marauder.671.name"
	desc = "marauder.671.desc"
	picture = GFX_evt_large_explosion
	show_sound = event_ship_explosion
	is_triggered_only = yes
	immediate = {
		if = { # To be sure (normally there should be nothing - used by khan.710)
			limit = { exists = event_target:raider_khanate }
			event_target:raider_khanate = {
				every_owned_fleet = {
					limit = {
						OR = {
							has_fleet_flag = satrapy_garrison
							has_fleet_flag = satrapy_garrison_fleet
							has_fleet_flag = horde_auxuliaries
						}
						exists = solar_system
						is_within_borders_of = root
					}
					# delete_fleet = this
					set_owner = root
					if = { limit = { exists = leader }
						leader = { set_owner = root }
					}
				}
			}
		}
	}
	option = { name = marauder.671.a }
}

# Great Khan's Throne
# This = khan_destroyer (from marauder.509)
country_event = {
	id = marauder.710
	title = "marauder.710.name"
	desc = "marauder.710.desc"
	picture = GFX_evt_space_walk
	show_sound = event_ship_thrusters
	is_triggered_only = yes
	trigger = { NOT = { has_relic = r_khans_throne } }
	# immediate = {}
	option = {
		name = EXCELLENT
		trigger = {
			hidden_trigger = {
				OR = {
					is_ai = no
					is_robot_empire = no
				}
			}
		}
		add_relic = r_khans_throne
	}
}

# on_leader_death - make extra sure that flag is set
# This = Country
# From = Leader
country_event = {
	id = marauder.711
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		from = { has_leader_flag = great_khan }
	}
	immediate = {
		if = { limit = { has_country_flag = khan_dead_age }
			remove_country_flag = khan_dead_age
		}

		if = { # Immortal fallback
			limit = {
				has_global_flag = khan_no_die
				has_country_flag = CmtFlagKhanNoDieCountry
				# OR = {
				# 	has_global_flag = great_khan_dead
				# 	has_global_flag = khan_dead_event_fine
				# }
				check_variable = { which = CmtVarKhanRemainingLive value > 0 }
			}

			if = { limit = { NOT = { has_global_flag = great_khan_dead } }
				set_global_flag = great_khan_dead
			}
			if = { limit = { has_country_flag = khan_dead_event_fine }
				remove_country_flag = khan_dead_event_fine
			}

			change_variable = { which = CmtVarKhanRemainingLive value = -1 } ## Not CmtGlobalVar

			if = { # Only Admiral dead?
				limit = { exists = event_target:great_khan_ruler }
				event_target:great_khan_ruler = {
					remove_leader_flag = great_khan # Because possible loop trigger?
					kill_leader = { show_notification = no }
				}
				### Return of Khan
				# if = { limit = { has_global_flag = CmtFlagDebugMode }
				# 	country_event = { id = marauder.523 days = 5 }
				# } else = {
				# 	event_target:global_event_country = {
				# 		country_event = { id = marauder.523 days = 210 random = 160 }
				# 	}
				# }
			} # else = {

			if = { # Only Ruler dead?
				limit = { exists = event_target:great_khan }
				event_target:great_khan = {
					remove_leader_flag = great_khan # Because possible loop trigger?
					kill_leader = { show_notification = no }
				}
			}

			### New Ruler Khan
			create_leader = {
				class = ruler
				species = owner_species
				name = random
				skill = 8
				event_leader = yes
				leader_age_min = 18
				leader_age_max = 22
				traits = {
					trait = leader_trait_ruler_great_khan
					trait = leader_trait_ruler_chosen
					# trait = leader_trait_eager
				}
				effect = {
					set_leader_flag = great_khan
					save_global_event_target_as = great_khan_ruler
					recruitable = no
					# prev = { assign_leader = prev }
				}
			}
			assign_leader = last_created_leader

			### New Admiral Khan
			if = { ### NSC SUPPORT
				limit = {
					is_ai = no
					has_global_flag = has_nsc_active
				}
				event_target:great_khan_ruler = {
					remove_trait = leader_trait_great_khan
					add_ruler_trait = nsc_freebooter_leader_trait_ruler_child_of_great_khan
				}
				clone_leader = {
					target = event_target:great_khan_ruler
					class = admiral
					skill = 7
					# event_leader = yes
					traits = {
						trait = nsc_freebooter_admiral_trait_child_of_great_khan
						trait = leader_trait_admiral_chosen
						# trait = leader_trait_fleet_logistician
						# trait = leader_trait_eager
					}
					# effect = {
					# 	set_leader_flag = great_khan
					# 	save_global_event_target_as = great_khan
					# }
				}
			} else = {
				clone_leader = {
					target = event_target:great_khan_ruler
					class = admiral
					skill = 7
					event_leader = yes
					traits = {
						trait = leader_trait_great_khan
						trait = leader_trait_admiral_chosen
						# trait = leader_trait_fleet_logistician
						# trait = leader_trait_eager
					}
					# effect = {
					# 	set_leader_flag = great_khan
					# 	save_global_event_target_as = great_khan
					# 	recruitable = no
					# }
				}
			}

			last_created_leader = {
				if = { limit = { NOT = { has_trait = leader_trait_fleet_logistician } }
					add_trait = leader_trait_fleet_logistician
				}
				set_leader_flag = great_khan
				save_global_event_target_as = great_khan
				recruitable = no
				exile_leader_as = exiled_khan
			}

			## Assign fleet + notify
			if = { limit = { has_global_flag = CmtFlagDebugMode }
				country_event = { id = marauder.523 days = 5 }
			} else = {
				event_target:global_event_country = {
					country_event = { id = marauder.523 days = 210 random = 160 }
				}
			}
		} else_if = {
			limit = {
				NOR = {
					has_global_flag = great_khan_dead
					has_global_flag = khan_dead_event_fine
				}
			}
			country_event = { id = marauder.514 days = 2 }
		} else = {
			country_event = { id = marauder.712 days = 10 } # Needless Vanilla Event!?
		}

	}
}

##################################

namespace = crisis
# TODO remove on 3.3
# Declare Crisis Test (Used on desired Crisis Empire)
country_event = {
	id = crisis.4099
	hide_window = yes
	is_triggered_only = yes
	# trigger = { always = no }
	immediate = {
		set_country_flag = declared_crisis
		save_event_target_as = new_crisis
		country_event = { id = crisis.4105 } # Notify
		every_playable_country = {
			limit = {
				is_ai = no
				NOT = { is_same_empire = prev }
			}
			country_event = { id = crisis.4100 }
		}
		if = {
			limit = { is_galactic_community_formed = yes }
			if = {
				limit = { has_galactic_custodian = yes }
				random_playable_country = {
					limit = { is_galactic_custodian = yes }
					save_event_target_as = community_war_leader
					declare_war = {
						target = event_target:new_crisis
						name = "NAME_Declared_Crisis_War"
						attacker_war_goal = "wg_declared_crisis"
					}
				}
				every_playable_country = {
					limit = {
						is_galactic_custodian = no
						is_galactic_community_member = yes
					}
					join_war = event_target:community_war_leader # Should use different effect to ensure they only join the correct war.
				}
			}
			else = {
				random_playable_country = {
					limit = {
						is_galactic_community_member = yes
						galactic_community_rank = 1
					}
					save_event_target_as = community_war_leader
					declare_war = {
						target = event_target:new_crisis
						name = "NAME_Declared_Crisis_War"
						attacker_war_goal = "wg_declared_crisis"
					}
					every_playable_country = {
						limit = {
							is_galactic_community_member = yes
							NOT = { is_same_value = event_target:community_war_leader }
						}
						join_war = event_target:community_war_leader # Should use different	 effect to ensure they only join the correct war
					}
				}
			}
		}
	}
}

##################################

# namespace = custodian
# # Override Test Event
# country_event = {
# 	id = custodian.499
# 	hide_window = yes
# 	is_triggered_only = yes
# 	# trigger = { always = no }
# 	immediate = {
# 		if = {
# 			limit = { is_galactic_council_established = no }
# 			set_council_size = 3
# 			add_to_galactic_council = yes
# 			while = {
# 				count = 2
# 				random_playable_country = {
# 					limit = {
# 						is_galactic_community_member = yes
# 						is_part_of_galactic_council = no
# 						is_galactic_custodian = no
# 					}
# 					add_to_galactic_council = yes
# 				}
# 			}
# 		}
# 		set_galactic_custodian = yes
# 		country_event = { id = custodian.1 }
# 		country_event = { id = custodian.10 days = 5400 } # Ends in 15 years
# 		if = {
# 			limit = { has_global_flag = gdf_active }
# 			country_event = { id = custodian.35 days = 10 }
# 		}
# 	}
# }

##################################

namespace = emperor
# Override Test Event
country_event = {
	id = emperor.499
	hide_window = yes
	is_triggered_only = yes
	# trigger = { always = no }
	immediate = {
		if = {
			limit = { is_galactic_council_established = no }
			set_council_size = 3
			# add_to_galactic_council = yes
			while = {
				count = 3
				random_playable_country = {
					limit = {
						is_galactic_community_member = yes
						is_part_of_galactic_council = no
						is_galactic_custodian = no
					}
					add_to_galactic_council = yes
				}
			}
			# set_galactic_custodian = yes
		}
		country_event = { id = emperor.1 }
	}
}


# Vanilla Fix: distance source scope
### Pirates: The Bemat Thalassocracy (by Gemma Thomson) ###
namespace = pirate
# Setup (event_target:global_event_country scope; randomly triggered in pirate.100): Find a suitable spawn point
country_event = {
	id = pirate.150
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOR = {
			exists = event_target:thalassocracy_country
			any_country = { has_country_flag = met_thalassocracy }
		}
	}

	immediate = {
		create_thalassocracy_country = yes
		if = { #Prioritise unoccupied systems
			limit = {
				any_system = {
					num_planets_in_system > 1
					NOR = {
						exists = space_owner
						has_star_flag = hostile_system
						has_star_flag = guardian
						has_star_flag = tiyanki_home_system
						has_star_flag = amoeba_home_system
						has_star_flag = lcluster
						has_star_flag = sealed_system
					}
				}
			}
			random_system = {
				limit = {
					num_planets_in_system > 1
					NOR = {
						exists = space_owner
						has_star_flag = hostile_system
						has_star_flag = guardian
						has_star_flag = tiyanki_home_system
						has_star_flag = amoeba_home_system
						has_star_flag = lcluster
						has_star_flag = sealed_system
					}
				}
				save_global_event_target_as = thalassocracy_target_system
				random_system_planet = {
					save_global_event_target_as = thalassocracy_spawn_planet
					set_planet_flag = thalassocracy_visited
				}
				random_system_planet = {
					limit = {
						NOT = { has_planet_flag = thalassocracy_visited }
					}
					save_global_event_target_as = thalassocracy_target_planet
				}
				event_target:thalassocracy_country = {
					set_country_flag = spawned_fleet
				}
				create_thalassocracy_fleet = yes
			}
		}
		else_if = { #Pop up in a semi-convenient, empire-owned system, if possible
			limit = { #Must be duplicated below, in the random_system effect
				any_system = {
					exists = space_owner
					num_planets_in_system > 1
					NOR = {
						is_pirate_system = yes
						has_star_flag = hostile_system
						has_star_flag = guardian
						has_star_flag = enclave
						is_capital_system = yes
					}
					has_system_trade_value >= 80
					distance = {
						source = space_owner.capital_scope.solar_system
						use_bypasses = no
						min_jumps = 2
						max_jumps = 5
					}
				}
			}
			random_system = {
				limit = {
					exists = space_owner
					num_planets_in_system > 1
					NOR = {
						is_pirate_system = yes
						has_star_flag = hostile_system
						has_star_flag = guardian
						has_star_flag = enclave
						is_capital_system = yes
					}
					has_system_trade_value >= 80
					distance = {
						source = space_owner.capital_scope.solar_system
						use_bypasses = no
						min_jumps = 2
						max_jumps = 5
					}
				}
				save_global_event_target_as = thalassocracy_target_system
				random_system_planet = {
					save_global_event_target_as = thalassocracy_spawn_planet
					set_planet_flag = thalassocracy_visited
				}
				random_galaxy_planet = {
					limit = {
						NOT = { has_planet_flag = thalassocracy_visited }
					}
					save_global_event_target_as = thalassocracy_target_planet
				}
				event_target:thalassocracy_country = { set_country_flag = spawned_fleet }
				create_thalassocracy_fleet = yes
				space_owner = {
					country_event = { id = pirate.155 days = 0 scopes = { from = event_target:thalassocracy_country } } #Establish contact
				}
			}
		}
		# else = {
		# 	#Nothing; await next pulse/valid country
		# }
	}
}
